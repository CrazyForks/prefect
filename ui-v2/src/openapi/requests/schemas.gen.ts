// This file is auto-generated by @hey-api/openapi-ts

export const $Artifact = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Key',
            description: 'An optional unique reference key for this artifact.'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type',
            description: "An identifier that describes the shape of the data field. e.g. 'result', 'table', 'markdown'"
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'A markdown-enabled description of the artifact.'
        },
        data: {
            anyOf: [
                {
                    type: 'object'
                },
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Data',
            description: 'Data associated with the artifact, e.g. a result.; structure depends on the artifact type.'
        },
        metadata_: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Metadata',
            description: 'User-defined artifact metadata. Content must be string key and value pairs.'
        },
        flow_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Run Id',
            description: 'The flow run associated with the artifact.'
        },
        task_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Task Run Id',
            description: 'The task run associated with the artifact.'
        }
    },
    type: 'object',
    required: [],
    title: 'Artifact'
} as const;

export const $ArtifactCollection = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        key: {
            type: 'string',
            title: 'Key',
            description: 'An optional unique reference key for this artifact.'
        },
        latest_id: {
            type: 'string',
            format: 'uuid',
            title: 'Latest Id',
            description: 'The latest artifact ID associated with the key.'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type',
            description: "An identifier that describes the shape of the data field. e.g. 'result', 'table', 'markdown'"
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'A markdown-enabled description of the artifact.'
        },
        data: {
            anyOf: [
                {
                    type: 'object'
                },
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Data',
            description: 'Data associated with the artifact, e.g. a result.; structure depends on the artifact type.'
        },
        metadata_: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Metadata',
            description: 'User-defined artifact metadata. Content must be string key and value pairs.'
        },
        flow_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Run Id',
            description: 'The flow run associated with the artifact.'
        },
        task_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Task Run Id',
            description: 'The task run associated with the artifact.'
        }
    },
    type: 'object',
    required: ['key', 'latest_id', 'id', 'created', 'updated'],
    title: 'ArtifactCollection'
} as const;

export const $ArtifactCollectionFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        latest_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtifactCollectionFilterLatestId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Artifact.id`'
        },
        key: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtifactCollectionFilterKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Artifact.key`'
        },
        flow_run_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtifactCollectionFilterFlowRunId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Artifact.flow_run_id`'
        },
        task_run_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtifactCollectionFilterTaskRunId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Artifact.task_run_id`'
        },
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtifactCollectionFilterType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Artifact.type`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactCollectionFilter',
    description: 'Filter artifact collections. Only artifact collections matching all criteria will be returned'
} as const;

export const $ArtifactCollectionFilterFlowRunId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run IDs to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactCollectionFilterFlowRunId',
    description: 'Filter by `ArtifactCollection.flow_run_id`.'
} as const;

export const $ArtifactCollectionFilterKey = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of artifact keys to include'
        },
        like_: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Like',
            description: 'A string to match artifact keys against. This can include SQL wildcard characters like `%` and `_`.',
            examples: ['my-artifact-%']
        },
        exists_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Exists',
            description: 'If `true`, only include artifacts with a non-null key. If `false`, only include artifacts with a null key. Should return all rows in the ArtifactCollection table if specified.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactCollectionFilterKey',
    description: 'Filter by `ArtifactCollection.key`.'
} as const;

export const $ArtifactCollectionFilterLatestId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of artifact ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactCollectionFilterLatestId',
    description: 'Filter by `ArtifactCollection.latest_id`.'
} as const;

export const $ArtifactCollectionFilterTaskRunId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of task run IDs to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactCollectionFilterTaskRunId',
    description: 'Filter by `ArtifactCollection.task_run_id`.'
} as const;

export const $ArtifactCollectionFilterType = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of artifact types to include'
        },
        not_any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Not Any',
            description: 'A list of artifact types to exclude'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactCollectionFilterType',
    description: 'Filter by `ArtifactCollection.type`.'
} as const;

export const $ArtifactCollectionSort = {
    type: 'string',
    enum: ['CREATED_DESC', 'UPDATED_DESC', 'ID_DESC', 'KEY_DESC', 'KEY_ASC'],
    title: 'ArtifactCollectionSort',
    description: 'Defines artifact collection sorting options.'
} as const;

export const $ArtifactCreate = {
    properties: {
        key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Key',
            description: 'An optional unique reference key for this artifact.'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type',
            description: "An identifier that describes the shape of the data field. e.g. 'result', 'table', 'markdown'"
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'A markdown-enabled description of the artifact.'
        },
        data: {
            anyOf: [
                {
                    type: 'object'
                },
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Data',
            description: 'Data associated with the artifact, e.g. a result.; structure depends on the artifact type.'
        },
        metadata_: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Metadata',
            description: 'User-defined artifact metadata. Content must be string key and value pairs.'
        },
        flow_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Run Id',
            description: 'The flow run associated with the artifact.'
        },
        task_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Task Run Id',
            description: 'The task run associated with the artifact.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactCreate',
    description: 'Data used by the Prefect REST API to create an artifact.'
} as const;

export const $ArtifactFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtifactFilterId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Artifact.id`'
        },
        key: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtifactFilterKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Artifact.key`'
        },
        flow_run_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtifactFilterFlowRunId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Artifact.flow_run_id`'
        },
        task_run_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtifactFilterTaskRunId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Artifact.task_run_id`'
        },
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ArtifactFilterType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Artifact.type`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactFilter',
    description: 'Filter artifacts. Only artifacts matching all criteria will be returned'
} as const;

export const $ArtifactFilterFlowRunId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run IDs to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactFilterFlowRunId',
    description: 'Filter by `Artifact.flow_run_id`.'
} as const;

export const $ArtifactFilterId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of artifact ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactFilterId',
    description: 'Filter by `Artifact.id`.'
} as const;

export const $ArtifactFilterKey = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of artifact keys to include'
        },
        like_: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Like',
            description: 'A string to match artifact keys against. This can include SQL wildcard characters like `%` and `_`.',
            examples: ['my-artifact-%']
        },
        exists_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Exists',
            description: 'If `true`, only include artifacts with a non-null key. If `false`, only include artifacts with a null key.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactFilterKey',
    description: 'Filter by `Artifact.key`.'
} as const;

export const $ArtifactFilterTaskRunId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of task run IDs to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactFilterTaskRunId',
    description: 'Filter by `Artifact.task_run_id`.'
} as const;

export const $ArtifactFilterType = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of artifact types to include'
        },
        not_any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Not Any',
            description: 'A list of artifact types to exclude'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactFilterType',
    description: 'Filter by `Artifact.type`.'
} as const;

export const $ArtifactSort = {
    type: 'string',
    enum: ['CREATED_DESC', 'UPDATED_DESC', 'ID_DESC', 'KEY_DESC', 'KEY_ASC'],
    title: 'ArtifactSort',
    description: 'Defines artifact sorting options.'
} as const;

export const $ArtifactUpdate = {
    properties: {
        data: {
            anyOf: [
                {
                    type: 'object'
                },
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        metadata_: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Metadata'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ArtifactUpdate',
    description: 'Data used by the Prefect REST API to update an artifact.'
} as const;

export const $Automation = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of this automation'
        },
        description: {
            type: 'string',
            title: 'Description',
            description: 'A longer description of this automation',
            default: ''
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            description: 'Whether this automation will be evaluated',
            default: true
        },
        trigger: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventTrigger'
                },
                {
                    '$ref': '#/components/schemas/CompoundTrigger-Output'
                },
                {
                    '$ref': '#/components/schemas/SequenceTrigger-Output'
                }
            ],
            title: 'Trigger',
            description: 'The criteria for which events this Automation covers and how it will respond to the presence or absence of those events'
        },
        actions: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/DoNothing'
                    },
                    {
                        '$ref': '#/components/schemas/RunDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/PauseDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/CancelFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ChangeFlowRunState'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/SendNotification'
                    },
                    {
                        '$ref': '#/components/schemas/CallWebhook'
                    },
                    {
                        '$ref': '#/components/schemas/PauseAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/SuspendFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkPool'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkPool'
                    }
                ]
            },
            type: 'array',
            title: 'Actions',
            description: 'The actions to perform when this Automation triggers'
        },
        actions_on_trigger: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/DoNothing'
                    },
                    {
                        '$ref': '#/components/schemas/RunDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/PauseDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/CancelFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ChangeFlowRunState'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/SendNotification'
                    },
                    {
                        '$ref': '#/components/schemas/CallWebhook'
                    },
                    {
                        '$ref': '#/components/schemas/PauseAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/SuspendFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkPool'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkPool'
                    }
                ]
            },
            type: 'array',
            title: 'Actions On Trigger',
            description: 'The actions to perform when an Automation goes into a triggered state'
        },
        actions_on_resolve: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/DoNothing'
                    },
                    {
                        '$ref': '#/components/schemas/RunDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/PauseDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/CancelFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ChangeFlowRunState'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/SendNotification'
                    },
                    {
                        '$ref': '#/components/schemas/CallWebhook'
                    },
                    {
                        '$ref': '#/components/schemas/PauseAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/SuspendFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkPool'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkPool'
                    }
                ]
            },
            type: 'array',
            title: 'Actions On Resolve',
            description: 'The actions to perform when an Automation goes into a resolving state'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        }
    },
    type: 'object',
    required: ['name', 'trigger', 'actions', 'id', 'created', 'updated'],
    title: 'Automation'
} as const;

export const $AutomationCreate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of this automation'
        },
        description: {
            type: 'string',
            title: 'Description',
            description: 'A longer description of this automation',
            default: ''
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            description: 'Whether this automation will be evaluated',
            default: true
        },
        trigger: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventTrigger'
                },
                {
                    '$ref': '#/components/schemas/CompoundTrigger-Input'
                },
                {
                    '$ref': '#/components/schemas/SequenceTrigger-Input'
                }
            ],
            title: 'Trigger',
            description: 'The criteria for which events this Automation covers and how it will respond to the presence or absence of those events'
        },
        actions: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/DoNothing'
                    },
                    {
                        '$ref': '#/components/schemas/RunDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/PauseDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/CancelFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ChangeFlowRunState'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/SendNotification'
                    },
                    {
                        '$ref': '#/components/schemas/CallWebhook'
                    },
                    {
                        '$ref': '#/components/schemas/PauseAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/SuspendFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkPool'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkPool'
                    }
                ]
            },
            type: 'array',
            title: 'Actions',
            description: 'The actions to perform when this Automation triggers'
        },
        actions_on_trigger: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/DoNothing'
                    },
                    {
                        '$ref': '#/components/schemas/RunDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/PauseDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/CancelFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ChangeFlowRunState'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/SendNotification'
                    },
                    {
                        '$ref': '#/components/schemas/CallWebhook'
                    },
                    {
                        '$ref': '#/components/schemas/PauseAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/SuspendFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkPool'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkPool'
                    }
                ]
            },
            type: 'array',
            title: 'Actions On Trigger',
            description: 'The actions to perform when an Automation goes into a triggered state'
        },
        actions_on_resolve: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/DoNothing'
                    },
                    {
                        '$ref': '#/components/schemas/RunDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/PauseDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/CancelFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ChangeFlowRunState'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/SendNotification'
                    },
                    {
                        '$ref': '#/components/schemas/CallWebhook'
                    },
                    {
                        '$ref': '#/components/schemas/PauseAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/SuspendFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkPool'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkPool'
                    }
                ]
            },
            type: 'array',
            title: 'Actions On Resolve',
            description: 'The actions to perform when an Automation goes into a resolving state'
        },
        owner_resource: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Owner Resource',
            description: 'The resource to which this automation belongs'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name', 'trigger', 'actions'],
    title: 'AutomationCreate'
} as const;

export const $AutomationFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AutomationFilterName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Automation.name`'
        },
        created: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AutomationFilterCreated'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Automation.created`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'AutomationFilter'
} as const;

export const $AutomationFilterCreated = {
    properties: {
        before_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Before',
            description: 'Only include automations created before this datetime'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'AutomationFilterCreated',
    description: 'Filter by `Automation.created`.'
} as const;

export const $AutomationFilterName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'Only include automations with names that match any of these strings'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'AutomationFilterName',
    description: 'Filter by `Automation.created`.'
} as const;

export const $AutomationPartialUpdate = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            description: 'Whether this automation will be evaluated',
            default: true
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'AutomationPartialUpdate'
} as const;

export const $AutomationSort = {
    type: 'string',
    enum: ['CREATED_DESC', 'UPDATED_DESC', 'NAME_ASC', 'NAME_DESC'],
    title: 'AutomationSort',
    description: 'Defines automations sorting options.'
} as const;

export const $AutomationUpdate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of this automation'
        },
        description: {
            type: 'string',
            title: 'Description',
            description: 'A longer description of this automation',
            default: ''
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            description: 'Whether this automation will be evaluated',
            default: true
        },
        trigger: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventTrigger'
                },
                {
                    '$ref': '#/components/schemas/CompoundTrigger-Input'
                },
                {
                    '$ref': '#/components/schemas/SequenceTrigger-Input'
                }
            ],
            title: 'Trigger',
            description: 'The criteria for which events this Automation covers and how it will respond to the presence or absence of those events'
        },
        actions: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/DoNothing'
                    },
                    {
                        '$ref': '#/components/schemas/RunDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/PauseDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/CancelFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ChangeFlowRunState'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/SendNotification'
                    },
                    {
                        '$ref': '#/components/schemas/CallWebhook'
                    },
                    {
                        '$ref': '#/components/schemas/PauseAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/SuspendFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkPool'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkPool'
                    }
                ]
            },
            type: 'array',
            title: 'Actions',
            description: 'The actions to perform when this Automation triggers'
        },
        actions_on_trigger: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/DoNothing'
                    },
                    {
                        '$ref': '#/components/schemas/RunDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/PauseDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/CancelFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ChangeFlowRunState'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/SendNotification'
                    },
                    {
                        '$ref': '#/components/schemas/CallWebhook'
                    },
                    {
                        '$ref': '#/components/schemas/PauseAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/SuspendFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkPool'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkPool'
                    }
                ]
            },
            type: 'array',
            title: 'Actions On Trigger',
            description: 'The actions to perform when an Automation goes into a triggered state'
        },
        actions_on_resolve: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/DoNothing'
                    },
                    {
                        '$ref': '#/components/schemas/RunDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/PauseDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeDeployment'
                    },
                    {
                        '$ref': '#/components/schemas/CancelFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ChangeFlowRunState'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkQueue'
                    },
                    {
                        '$ref': '#/components/schemas/SendNotification'
                    },
                    {
                        '$ref': '#/components/schemas/CallWebhook'
                    },
                    {
                        '$ref': '#/components/schemas/PauseAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeAutomation'
                    },
                    {
                        '$ref': '#/components/schemas/SuspendFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeFlowRun'
                    },
                    {
                        '$ref': '#/components/schemas/PauseWorkPool'
                    },
                    {
                        '$ref': '#/components/schemas/ResumeWorkPool'
                    }
                ]
            },
            type: 'array',
            title: 'Actions On Resolve',
            description: 'The actions to perform when an Automation goes into a resolving state'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name', 'trigger', 'actions'],
    title: 'AutomationUpdate'
} as const;

export const $BlockDocument = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    pattern: '^[^/%&><]+$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            description: "The block document's name. Not required for anonymous block documents."
        },
        data: {
            type: 'object',
            title: 'Data',
            description: "The block document's data"
        },
        block_schema_id: {
            type: 'string',
            format: 'uuid',
            title: 'Block Schema Id',
            description: 'A block schema ID'
        },
        block_schema: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockSchema'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The associated block schema'
        },
        block_type_id: {
            type: 'string',
            format: 'uuid',
            title: 'Block Type Id',
            description: 'A block type ID'
        },
        block_type_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Block Type Name',
            description: "The associated block type's name"
        },
        block_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The associated block type'
        },
        block_document_references: {
            additionalProperties: {
                type: 'object'
            },
            type: 'object',
            title: 'Block Document References',
            description: "Record of the block document's references"
        },
        is_anonymous: {
            type: 'boolean',
            title: 'Is Anonymous',
            description: 'Whether the block is anonymous (anonymous blocks are usually created by Prefect automatically)',
            default: false
        }
    },
    type: 'object',
    required: ['block_schema_id', 'block_type_id', 'id', 'created', 'updated'],
    title: 'BlockDocument',
    description: 'An ORM representation of a block document.'
} as const;

export const $BlockDocumentCreate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            description: "The block document's name. Not required for anonymous block documents."
        },
        data: {
            type: 'object',
            title: 'Data',
            description: "The block document's data"
        },
        block_schema_id: {
            type: 'string',
            format: 'uuid',
            title: 'Block Schema Id',
            description: 'A block schema ID'
        },
        block_type_id: {
            type: 'string',
            format: 'uuid',
            title: 'Block Type Id',
            description: 'A block type ID'
        },
        is_anonymous: {
            type: 'boolean',
            title: 'Is Anonymous',
            description: 'Whether the block is anonymous (anonymous blocks are usually created by Prefect automatically)',
            default: false
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['block_schema_id', 'block_type_id'],
    title: 'BlockDocumentCreate',
    description: 'Data used by the Prefect REST API to create a block document.'
} as const;

export const $BlockDocumentFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockDocumentFilterId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `BlockDocument.id`'
        },
        is_anonymous: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockDocumentFilterIsAnonymous'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `BlockDocument.is_anonymous`. Defaults to excluding anonymous blocks.',
            default: {
                eq_: false
            }
        },
        block_type_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockDocumentFilterBlockTypeId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `BlockDocument.block_type_id`'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockDocumentFilterName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `BlockDocument.name`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockDocumentFilter',
    description: 'Filter BlockDocuments. Only BlockDocuments matching all criteria will be returned'
} as const;

export const $BlockDocumentFilterBlockTypeId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of block type ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockDocumentFilterBlockTypeId',
    description: 'Filter by `BlockDocument.block_type_id`.'
} as const;

export const $BlockDocumentFilterId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of block ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockDocumentFilterId',
    description: 'Filter by `BlockDocument.id`.'
} as const;

export const $BlockDocumentFilterIsAnonymous = {
    properties: {
        eq_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eq',
            description: 'Filter block documents for only those that are or are not anonymous.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockDocumentFilterIsAnonymous',
    description: 'Filter by `BlockDocument.is_anonymous`.'
} as const;

export const $BlockDocumentFilterName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of block names to include'
        },
        like_: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Like',
            description: 'A string to match block names against. This can include SQL wildcard characters like `%` and `_`.',
            examples: ['my-block%']
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockDocumentFilterName',
    description: 'Filter by `BlockDocument.name`.'
} as const;

export const $BlockDocumentSort = {
    type: 'string',
    enum: ['NAME_DESC', 'NAME_ASC', 'BLOCK_TYPE_AND_NAME_ASC'],
    title: 'BlockDocumentSort',
    description: 'Defines block document sorting options.'
} as const;

export const $BlockDocumentUpdate = {
    properties: {
        block_schema_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Block Schema Id',
            description: 'A block schema ID'
        },
        data: {
            type: 'object',
            title: 'Data',
            description: "The block document's data"
        },
        merge_existing_data: {
            type: 'boolean',
            title: 'Merge Existing Data',
            default: true
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockDocumentUpdate',
    description: 'Data used by the Prefect REST API to update a block document.'
} as const;

export const $BlockSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        checksum: {
            type: 'string',
            title: 'Checksum',
            description: "The block schema's unique checksum"
        },
        fields: {
            type: 'object',
            title: 'Fields',
            description: "The block schema's field schema"
        },
        block_type_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Block Type Id',
            description: 'A block type ID'
        },
        block_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The associated block type'
        },
        capabilities: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Capabilities',
            description: 'A list of Block capabilities'
        },
        version: {
            type: 'string',
            title: 'Version',
            description: 'Human readable identifier for the block schema',
            default: 'non-versioned'
        }
    },
    type: 'object',
    required: ['checksum', 'block_type_id', 'id', 'created', 'updated'],
    title: 'BlockSchema',
    description: 'An ORM representation of a block schema.'
} as const;

export const $BlockSchemaCreate = {
    properties: {
        fields: {
            type: 'object',
            title: 'Fields',
            description: "The block schema's field schema"
        },
        block_type_id: {
            type: 'string',
            format: 'uuid',
            title: 'Block Type Id',
            description: 'A block type ID'
        },
        capabilities: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Capabilities',
            description: 'A list of Block capabilities'
        },
        version: {
            type: 'string',
            title: 'Version',
            description: 'Human readable identifier for the block schema',
            default: 'non-versioned'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['block_type_id'],
    title: 'BlockSchemaCreate',
    description: 'Data used by the Prefect REST API to create a block schema.'
} as const;

export const $BlockSchemaFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        block_type_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockSchemaFilterBlockTypeId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `BlockSchema.block_type_id`'
        },
        block_capabilities: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockSchemaFilterCapabilities'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `BlockSchema.capabilities`'
        },
        id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockSchemaFilterId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `BlockSchema.id`'
        },
        version: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockSchemaFilterVersion'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `BlockSchema.version`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockSchemaFilter',
    description: 'Filter BlockSchemas'
} as const;

export const $BlockSchemaFilterBlockTypeId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of block type ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockSchemaFilterBlockTypeId',
    description: 'Filter by `BlockSchema.block_type_id`.'
} as const;

export const $BlockSchemaFilterCapabilities = {
    properties: {
        all_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'All',
            description: 'A list of block capabilities. Block entities will be returned only if an associated block schema has a superset of the defined capabilities.',
            examples: [['write-storage', 'read-storage']]
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockSchemaFilterCapabilities',
    description: 'Filter by `BlockSchema.capabilities`'
} as const;

export const $BlockSchemaFilterId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of IDs to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockSchemaFilterId',
    description: 'Filter by BlockSchema.id'
} as const;

export const $BlockSchemaFilterVersion = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of block schema versions.',
            examples: [['2.0.0', '2.1.0']]
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockSchemaFilterVersion',
    description: 'Filter by `BlockSchema.capabilities`'
} as const;

export const $BlockType = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: "A block type's name"
        },
        slug: {
            type: 'string',
            title: 'Slug',
            description: "A block type's slug"
        },
        logo_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Logo Url',
            description: "Web URL for the block type's logo"
        },
        documentation_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Documentation Url',
            description: "Web URL for the block type's documentation"
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: "A short blurb about the corresponding block's intended use"
        },
        code_example: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code Example',
            description: 'A code snippet demonstrating use of the corresponding block'
        },
        is_protected: {
            type: 'boolean',
            title: 'Is Protected',
            description: 'Protected block types cannot be modified via API.',
            default: false
        }
    },
    type: 'object',
    required: ['name', 'slug', 'id', 'created', 'updated'],
    title: 'BlockType',
    description: 'An ORM representation of a block type'
} as const;

export const $BlockTypeCreate = {
    properties: {
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: "A block type's name"
        },
        slug: {
            type: 'string',
            title: 'Slug',
            description: "A block type's slug"
        },
        logo_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Logo Url',
            description: "Web URL for the block type's logo"
        },
        documentation_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Documentation Url',
            description: "Web URL for the block type's documentation"
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: "A short blurb about the corresponding block's intended use"
        },
        code_example: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code Example',
            description: 'A code snippet demonstrating use of the corresponding block'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name', 'slug'],
    title: 'BlockTypeCreate',
    description: 'Data used by the Prefect REST API to create a block type.'
} as const;

export const $BlockTypeFilter = {
    properties: {
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockTypeFilterName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `BlockType.name`'
        },
        slug: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockTypeFilterSlug'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `BlockType.slug`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockTypeFilter',
    description: 'Filter BlockTypes'
} as const;

export const $BlockTypeFilterName = {
    properties: {
        like_: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Like',
            description: "A case-insensitive partial match. For example,  passing 'marvin' will match 'marvin', 'sad-Marvin', and 'marvin-robot'.",
            examples: ['marvin']
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockTypeFilterName',
    description: 'Filter by `BlockType.name`'
} as const;

export const $BlockTypeFilterSlug = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of slugs to match'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockTypeFilterSlug',
    description: 'Filter by `BlockType.slug`'
} as const;

export const $BlockTypeUpdate = {
    properties: {
        logo_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Logo Url'
        },
        documentation_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Documentation Url'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        code_example: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code Example'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'BlockTypeUpdate',
    description: 'Data used by the Prefect REST API to update a block type.'
} as const;

export const $Body_average_flow_run_lateness_flow_runs_lateness_post = {
    properties: {
        flows: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        flow_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        task_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        deployments: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        work_pools: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        work_pool_queues: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkQueueFilter'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'Body_average_flow_run_lateness_flow_runs_lateness_post'
} as const;

export const $Body_bulk_decrement_active_slots_v2_concurrency_limits_decrement_post = {
    properties: {
        slots: {
            type: 'integer',
            exclusiveMinimum: 0,
            title: 'Slots'
        },
        names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Names',
            min_items: 1
        },
        occupancy_seconds: {
            anyOf: [
                {
                    type: 'number',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Occupancy Seconds'
        },
        create_if_missing: {
            type: 'boolean',
            title: 'Create If Missing',
            default: true
        }
    },
    type: 'object',
    required: ['slots', 'names'],
    title: 'Body_bulk_decrement_active_slots_v2_concurrency_limits_decrement_post'
} as const;

export const $Body_bulk_increment_active_slots_v2_concurrency_limits_increment_post = {
    properties: {
        slots: {
            type: 'integer',
            exclusiveMinimum: 0,
            title: 'Slots'
        },
        names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Names',
            min_items: 1
        },
        mode: {
            type: 'string',
            enum: ['concurrency', 'rate_limit'],
            title: 'Mode',
            default: 'concurrency'
        },
        create_if_missing: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Create If Missing'
        }
    },
    type: 'object',
    required: ['slots', 'names'],
    title: 'Body_bulk_increment_active_slots_v2_concurrency_limits_increment_post'
} as const;

export const $Body_clear_database_admin_database_clear_post = {
    properties: {
        confirm: {
            type: 'boolean',
            title: 'Confirm',
            description: 'Pass confirm=True to confirm you want to modify the database.',
            default: false
        }
    },
    type: 'object',
    title: 'Body_clear_database_admin_database_clear_post'
} as const;

export const $Body_count_account_events_events_count_by__countable__post = {
    properties: {
        filter: {
            '$ref': '#/components/schemas/EventFilter'
        },
        time_unit: {
            '$ref': '#/components/schemas/TimeUnit',
            default: 'day'
        },
        time_interval: {
            type: 'number',
            minimum: 0.01,
            title: 'Time Interval',
            default: 1
        }
    },
    type: 'object',
    required: ['filter'],
    title: 'Body_count_account_events_events_count_by__countable__post'
} as const;

export const $Body_count_artifacts_artifacts_count_post = {
    properties: {
        artifacts: {
            '$ref': '#/components/schemas/ArtifactFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        }
    },
    type: 'object',
    title: 'Body_count_artifacts_artifacts_count_post'
} as const;

export const $Body_count_block_documents_block_documents_count_post = {
    properties: {
        block_documents: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockDocumentFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        block_types: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockTypeFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        block_schemas: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockSchemaFilter'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'Body_count_block_documents_block_documents_count_post'
} as const;

export const $Body_count_deployments_by_flow_ui_flows_count_deployments_post = {
    properties: {
        flow_ids: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Flow Ids',
            max_items: 200
        }
    },
    type: 'object',
    required: ['flow_ids'],
    title: 'Body_count_deployments_by_flow_ui_flows_count_deployments_post'
} as const;

export const $Body_count_deployments_deployments_count_post = {
    properties: {
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        },
        work_pools: {
            '$ref': '#/components/schemas/WorkPoolFilter'
        },
        work_pool_queues: {
            '$ref': '#/components/schemas/WorkQueueFilter'
        }
    },
    type: 'object',
    title: 'Body_count_deployments_deployments_count_post'
} as const;

export const $Body_count_flow_runs_flow_runs_count_post = {
    properties: {
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        },
        work_pools: {
            '$ref': '#/components/schemas/WorkPoolFilter'
        },
        work_pool_queues: {
            '$ref': '#/components/schemas/WorkQueueFilter'
        }
    },
    type: 'object',
    title: 'Body_count_flow_runs_flow_runs_count_post'
} as const;

export const $Body_count_flows_flows_count_post = {
    properties: {
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        },
        work_pools: {
            '$ref': '#/components/schemas/WorkPoolFilter'
        }
    },
    type: 'object',
    title: 'Body_count_flows_flows_count_post'
} as const;

export const $Body_count_latest_artifacts_artifacts_latest_count_post = {
    properties: {
        artifacts: {
            '$ref': '#/components/schemas/ArtifactCollectionFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        }
    },
    type: 'object',
    title: 'Body_count_latest_artifacts_artifacts_latest_count_post'
} as const;

export const $Body_count_task_runs_by_flow_run_ui_flow_runs_count_task_runs_post = {
    properties: {
        flow_run_ids: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Flow Run Ids',
            max_items: 200
        }
    },
    type: 'object',
    required: ['flow_run_ids'],
    title: 'Body_count_task_runs_by_flow_run_ui_flow_runs_count_task_runs_post'
} as const;

export const $Body_count_task_runs_task_runs_count_post = {
    properties: {
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        }
    },
    type: 'object',
    title: 'Body_count_task_runs_task_runs_count_post'
} as const;

export const $Body_count_variables_variables_count_post = {
    properties: {
        variables: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VariableFilter'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'Body_count_variables_variables_count_post'
} as const;

export const $Body_count_work_pools_work_pools_count_post = {
    properties: {
        work_pools: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolFilter'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'Body_count_work_pools_work_pools_count_post'
} as const;

export const $Body_create_database_admin_database_create_post = {
    properties: {
        confirm: {
            type: 'boolean',
            title: 'Confirm',
            description: 'Pass confirm=True to confirm you want to modify the database.',
            default: false
        }
    },
    type: 'object',
    title: 'Body_create_database_admin_database_create_post'
} as const;

export const $Body_create_flow_run_input_flow_runs__id__input_post = {
    properties: {
        key: {
            type: 'string',
            title: 'Key',
            description: 'The input key'
        },
        value: {
            type: 'string',
            format: 'binary',
            title: 'Value',
            description: 'The value of the input'
        },
        sender: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sender',
            description: 'The sender of the input'
        }
    },
    type: 'object',
    required: ['key', 'value'],
    title: 'Body_create_flow_run_input_flow_runs__id__input_post'
} as const;

export const $Body_decrement_concurrency_limits_v1_concurrency_limits_decrement_post = {
    properties: {
        names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Names',
            description: 'The tags to release a slot for'
        },
        task_run_id: {
            type: 'string',
            format: 'uuid',
            title: 'Task Run Id',
            description: 'The ID of the task run releasing the slot'
        }
    },
    type: 'object',
    required: ['names', 'task_run_id'],
    title: 'Body_decrement_concurrency_limits_v1_concurrency_limits_decrement_post'
} as const;

export const $Body_drop_database_admin_database_drop_post = {
    properties: {
        confirm: {
            type: 'boolean',
            title: 'Confirm',
            description: 'Pass confirm=True to confirm you want to modify the database.',
            default: false
        }
    },
    type: 'object',
    title: 'Body_drop_database_admin_database_drop_post'
} as const;

export const $Body_filter_flow_run_input_flow_runs__id__input_filter_post = {
    properties: {
        prefix: {
            type: 'string',
            title: 'Prefix',
            description: 'The input key prefix'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'The maximum number of results to return',
            default: 1
        },
        exclude_keys: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Exclude Keys',
            description: 'Exclude inputs with these keys',
            default: []
        }
    },
    type: 'object',
    required: ['prefix'],
    title: 'Body_filter_flow_run_input_flow_runs__id__input_filter_post'
} as const;

export const $Body_flow_run_history_flow_runs_history_post = {
    properties: {
        history_start: {
            type: 'string',
            format: 'date-time',
            title: 'History Start',
            description: "The history's start time."
        },
        history_end: {
            type: 'string',
            format: 'date-time',
            title: 'History End',
            description: "The history's end time."
        },
        history_interval: {
            type: 'number',
            format: 'time-delta',
            title: 'History Interval',
            description: 'The size of each history interval, in seconds. Must be at least 1 second.'
        },
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        },
        work_pools: {
            '$ref': '#/components/schemas/WorkPoolFilter'
        },
        work_queues: {
            '$ref': '#/components/schemas/WorkQueueFilter'
        }
    },
    type: 'object',
    required: ['history_start', 'history_end', 'history_interval'],
    title: 'Body_flow_run_history_flow_runs_history_post'
} as const;

export const $Body_get_scheduled_flow_runs_for_deployments_deployments_get_scheduled_flow_runs_post = {
    properties: {
        deployment_ids: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Deployment Ids',
            description: 'The deployment IDs to get scheduled runs for'
        },
        scheduled_before: {
            type: 'string',
            format: 'date-time',
            title: 'Scheduled Before',
            description: 'The maximum time to look for scheduled flow runs'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    required: ['deployment_ids'],
    title: 'Body_get_scheduled_flow_runs_for_deployments_deployments_get_scheduled_flow_runs_post'
} as const;

export const $Body_get_scheduled_flow_runs_work_pools__name__get_scheduled_flow_runs_post = {
    properties: {
        work_queue_names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Work Queue Names',
            description: 'The names of work pool queues'
        },
        scheduled_before: {
            type: 'string',
            format: 'date-time',
            title: 'Scheduled Before',
            description: 'The maximum time to look for scheduled flow runs'
        },
        scheduled_after: {
            type: 'string',
            format: 'date-time',
            title: 'Scheduled After',
            description: 'The minimum time to look for scheduled flow runs'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_get_scheduled_flow_runs_work_pools__name__get_scheduled_flow_runs_post'
} as const;

export const $Body_increment_concurrency_limits_v1_concurrency_limits_increment_post = {
    properties: {
        names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Names',
            description: 'The tags to acquire a slot for'
        },
        task_run_id: {
            type: 'string',
            format: 'uuid',
            title: 'Task Run Id',
            description: 'The ID of the task run acquiring the slot'
        }
    },
    type: 'object',
    required: ['names', 'task_run_id'],
    title: 'Body_increment_concurrency_limits_v1_concurrency_limits_increment_post'
} as const;

export const $Body_next_runs_by_flow_ui_flows_next_runs_post = {
    properties: {
        flow_ids: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Flow Ids',
            max_items: 200
        }
    },
    type: 'object',
    required: ['flow_ids'],
    title: 'Body_next_runs_by_flow_ui_flows_next_runs_post'
} as const;

export const $Body_paginate_deployments_deployments_paginate_post = {
    properties: {
        page: {
            type: 'integer',
            minimum: 1,
            title: 'Page',
            default: 1
        },
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        },
        work_pools: {
            '$ref': '#/components/schemas/WorkPoolFilter'
        },
        work_pool_queues: {
            '$ref': '#/components/schemas/WorkQueueFilter'
        },
        sort: {
            '$ref': '#/components/schemas/DeploymentSort',
            default: 'NAME_ASC'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_paginate_deployments_deployments_paginate_post'
} as const;

export const $Body_paginate_flow_runs_flow_runs_paginate_post = {
    properties: {
        sort: {
            '$ref': '#/components/schemas/FlowRunSort',
            default: 'ID_DESC'
        },
        page: {
            type: 'integer',
            minimum: 1,
            title: 'Page',
            default: 1
        },
        flows: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        flow_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        task_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        deployments: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        work_pools: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        work_pool_queues: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkQueueFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_paginate_flow_runs_flow_runs_paginate_post'
} as const;

export const $Body_paginate_flows_flows_paginate_post = {
    properties: {
        page: {
            type: 'integer',
            minimum: 1,
            title: 'Page',
            default: 1
        },
        flows: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        flow_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        task_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        deployments: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        work_pools: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        sort: {
            '$ref': '#/components/schemas/FlowSort',
            default: 'NAME_ASC'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_paginate_flows_flows_paginate_post'
} as const;

export const $Body_read_all_concurrency_limits_v2_v2_concurrency_limits_filter_post = {
    properties: {
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_all_concurrency_limits_v2_v2_concurrency_limits_filter_post'
} as const;

export const $Body_read_artifacts_artifacts_filter_post = {
    properties: {
        sort: {
            '$ref': '#/components/schemas/ArtifactSort',
            default: 'ID_DESC'
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        artifacts: {
            '$ref': '#/components/schemas/ArtifactFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_artifacts_artifacts_filter_post'
} as const;

export const $Body_read_automations_automations_filter_post = {
    properties: {
        sort: {
            '$ref': '#/components/schemas/AutomationSort',
            default: 'NAME_ASC'
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        automations: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AutomationFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_automations_automations_filter_post'
} as const;

export const $Body_read_block_documents_block_documents_filter_post = {
    properties: {
        block_documents: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockDocumentFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        block_types: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockTypeFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        block_schemas: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockSchemaFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        include_secrets: {
            type: 'boolean',
            title: 'Include Secrets',
            description: 'Whether to include sensitive values in the block document.',
            default: false
        },
        sort: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockDocumentSort'
                },
                {
                    type: 'null'
                }
            ],
            default: 'NAME_ASC'
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_block_documents_block_documents_filter_post'
} as const;

export const $Body_read_block_schemas_block_schemas_filter_post = {
    properties: {
        block_schemas: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockSchemaFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_block_schemas_block_schemas_filter_post'
} as const;

export const $Body_read_block_types_block_types_filter_post = {
    properties: {
        block_types: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockTypeFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        block_schemas: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BlockSchemaFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_block_types_block_types_filter_post'
} as const;

export const $Body_read_concurrency_limits_concurrency_limits_filter_post = {
    properties: {
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_concurrency_limits_concurrency_limits_filter_post'
} as const;

export const $Body_read_dashboard_task_run_counts_ui_task_runs_dashboard_counts_post = {
    properties: {
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        flows: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        flow_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        deployments: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        work_pools: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        work_queues: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkQueueFilter'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['task_runs'],
    title: 'Body_read_dashboard_task_run_counts_ui_task_runs_dashboard_counts_post'
} as const;

export const $Body_read_deployments_deployments_filter_post = {
    properties: {
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        },
        work_pools: {
            '$ref': '#/components/schemas/WorkPoolFilter'
        },
        work_pool_queues: {
            '$ref': '#/components/schemas/WorkQueueFilter'
        },
        sort: {
            '$ref': '#/components/schemas/DeploymentSort',
            default: 'NAME_ASC'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_deployments_deployments_filter_post'
} as const;

export const $Body_read_events_events_filter_post = {
    properties: {
        filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Additional optional filter criteria to narrow down the set of Events'
        },
        limit: {
            type: 'integer',
            maximum: 50,
            minimum: 0,
            title: 'Limit',
            description: 'The number of events to return with each page',
            default: 50
        }
    },
    type: 'object',
    title: 'Body_read_events_events_filter_post'
} as const;

export const $Body_read_flow_run_history_ui_flow_runs_history_post = {
    properties: {
        sort: {
            '$ref': '#/components/schemas/FlowRunSort',
            default: 'EXPECTED_START_TIME_DESC'
        },
        limit: {
            type: 'integer',
            maximum: 1000,
            title: 'Limit',
            default: 1000
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        },
        work_pools: {
            '$ref': '#/components/schemas/WorkPoolFilter'
        }
    },
    type: 'object',
    title: 'Body_read_flow_run_history_ui_flow_runs_history_post'
} as const;

export const $Body_read_flow_run_notification_policies_flow_run_notification_policies_filter_post = {
    properties: {
        flow_run_notification_policy_filter: {
            '$ref': '#/components/schemas/FlowRunNotificationPolicyFilter'
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_flow_run_notification_policies_flow_run_notification_policies_filter_post'
} as const;

export const $Body_read_flow_runs_flow_runs_filter_post = {
    properties: {
        sort: {
            '$ref': '#/components/schemas/FlowRunSort',
            default: 'ID_DESC'
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        flows: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        flow_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        task_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        deployments: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        work_pools: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        work_pool_queues: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkQueueFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_flow_runs_flow_runs_filter_post'
} as const;

export const $Body_read_flows_flows_filter_post = {
    properties: {
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        },
        work_pools: {
            '$ref': '#/components/schemas/WorkPoolFilter'
        },
        sort: {
            '$ref': '#/components/schemas/FlowSort',
            default: 'NAME_ASC'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_flows_flows_filter_post'
} as const;

export const $Body_read_latest_artifacts_artifacts_latest_filter_post = {
    properties: {
        sort: {
            '$ref': '#/components/schemas/ArtifactCollectionSort',
            default: 'ID_DESC'
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        artifacts: {
            '$ref': '#/components/schemas/ArtifactCollectionFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_latest_artifacts_artifacts_latest_filter_post'
} as const;

export const $Body_read_logs_logs_filter_post = {
    properties: {
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        logs: {
            '$ref': '#/components/schemas/LogFilter'
        },
        sort: {
            '$ref': '#/components/schemas/LogSort',
            default: 'TIMESTAMP_ASC'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_logs_logs_filter_post'
} as const;

export const $Body_read_saved_searches_saved_searches_filter_post = {
    properties: {
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_saved_searches_saved_searches_filter_post'
} as const;

export const $Body_read_task_run_counts_by_state_ui_task_runs_count_post = {
    properties: {
        flows: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        flow_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        task_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        deployments: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilter'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'Body_read_task_run_counts_by_state_ui_task_runs_count_post'
} as const;

export const $Body_read_task_runs_task_runs_filter_post = {
    properties: {
        sort: {
            '$ref': '#/components/schemas/TaskRunSort',
            default: 'ID_DESC'
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        flows: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        flow_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        task_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        deployments: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_task_runs_task_runs_filter_post'
} as const;

export const $Body_read_task_workers_task_workers_filter_post = {
    properties: {
        task_worker_filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskWorkerFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The task worker filter'
        }
    },
    type: 'object',
    title: 'Body_read_task_workers_task_workers_filter_post'
} as const;

export const $Body_read_variables_variables_filter_post = {
    properties: {
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        variables: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VariableFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        sort: {
            '$ref': '#/components/schemas/VariableSort',
            default: 'NAME_ASC'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_variables_variables_filter_post'
} as const;

export const $Body_read_work_pools_work_pools_filter_post = {
    properties: {
        work_pools: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_work_pools_work_pools_filter_post'
} as const;

export const $Body_read_work_queue_runs_work_queues__id__get_runs_post = {
    properties: {
        scheduled_before: {
            type: 'string',
            format: 'date-time',
            title: 'Scheduled Before',
            description: 'Only flow runs scheduled to start before this time will be returned.'
        },
        agent_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agent Id',
            description: 'An optional unique identifier for the agent making this query. If provided, the Prefect REST API will track the last time this agent polled the work queue.'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_work_queue_runs_work_queues__id__get_runs_post'
} as const;

export const $Body_read_work_queues_work_pools__work_pool_name__queues_filter_post = {
    properties: {
        work_queues: {
            '$ref': '#/components/schemas/WorkQueueFilter'
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_work_queues_work_pools__work_pool_name__queues_filter_post'
} as const;

export const $Body_read_work_queues_work_queues_filter_post = {
    properties: {
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        work_queues: {
            '$ref': '#/components/schemas/WorkQueueFilter'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_work_queues_work_queues_filter_post'
} as const;

export const $Body_read_workers_work_pools__work_pool_name__workers_filter_post = {
    properties: {
        workers: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkerFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        offset: {
            type: 'integer',
            minimum: 0,
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.'
        }
    },
    type: 'object',
    title: 'Body_read_workers_work_pools__work_pool_name__workers_filter_post'
} as const;

export const $Body_reset_concurrency_limit_by_tag_concurrency_limits_tag__tag__reset_post = {
    properties: {
        slot_override: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Slot Override',
            description: 'Manual override for active concurrency limit slots.'
        }
    },
    type: 'object',
    title: 'Body_reset_concurrency_limit_by_tag_concurrency_limits_tag__tag__reset_post'
} as const;

export const $Body_resume_flow_run_flow_runs__id__resume_post = {
    properties: {
        run_input: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Run Input'
        }
    },
    type: 'object',
    title: 'Body_resume_flow_run_flow_runs__id__resume_post'
} as const;

export const $Body_schedule_deployment_deployments__id__schedule_post = {
    properties: {
        start_time: {
            type: 'string',
            format: 'date-time',
            title: 'Start Time',
            description: 'The earliest date to schedule'
        },
        end_time: {
            type: 'string',
            format: 'date-time',
            title: 'End Time',
            description: 'The latest date to schedule'
        },
        min_time: {
            type: 'number',
            format: 'time-delta',
            title: 'Min Time',
            description: 'Runs will be scheduled until at least this long after the `start_time`'
        },
        min_runs: {
            type: 'integer',
            title: 'Min Runs',
            description: 'The minimum number of runs to schedule'
        },
        max_runs: {
            type: 'integer',
            title: 'Max Runs',
            description: 'The maximum number of runs to schedule'
        }
    },
    type: 'object',
    title: 'Body_schedule_deployment_deployments__id__schedule_post'
} as const;

export const $Body_set_flow_run_state_flow_runs__id__set_state_post = {
    properties: {
        state: {
            '$ref': '#/components/schemas/StateCreate',
            description: 'The intended state.'
        },
        force: {
            type: 'boolean',
            title: 'Force',
            description: 'If false, orchestration rules will be applied that may alter or prevent the state transition. If True, orchestration rules are not applied.',
            default: false
        }
    },
    type: 'object',
    required: ['state'],
    title: 'Body_set_flow_run_state_flow_runs__id__set_state_post'
} as const;

export const $Body_set_task_run_state_task_runs__id__set_state_post = {
    properties: {
        state: {
            '$ref': '#/components/schemas/StateCreate',
            description: 'The intended state.'
        },
        force: {
            type: 'boolean',
            title: 'Force',
            description: 'If false, orchestration rules will be applied that may alter or prevent the state transition. If True, orchestration rules are not applied.',
            default: false
        }
    },
    type: 'object',
    required: ['state'],
    title: 'Body_set_task_run_state_task_runs__id__set_state_post'
} as const;

export const $Body_task_run_history_task_runs_history_post = {
    properties: {
        history_start: {
            type: 'string',
            format: 'date-time',
            title: 'History Start',
            description: "The history's start time."
        },
        history_end: {
            type: 'string',
            format: 'date-time',
            title: 'History End',
            description: "The history's end time."
        },
        history_interval: {
            type: 'number',
            format: 'time-delta',
            title: 'History Interval',
            description: 'The size of each history interval, in seconds. Must be at least 1 second.'
        },
        flows: {
            '$ref': '#/components/schemas/FlowFilter'
        },
        flow_runs: {
            '$ref': '#/components/schemas/FlowRunFilter'
        },
        task_runs: {
            '$ref': '#/components/schemas/TaskRunFilter'
        },
        deployments: {
            '$ref': '#/components/schemas/DeploymentFilter'
        }
    },
    type: 'object',
    required: ['history_start', 'history_end', 'history_interval'],
    title: 'Body_task_run_history_task_runs_history_post'
} as const;

export const $Body_validate_obj_ui_schemas_validate_post = {
    properties: {
        json_schema: {
            type: 'object',
            title: 'Json Schema'
        },
        values: {
            type: 'object',
            title: 'Values'
        }
    },
    type: 'object',
    required: ['json_schema', 'values'],
    title: 'Body_validate_obj_ui_schemas_validate_post'
} as const;

export const $Body_worker_heartbeat_work_pools__work_pool_name__workers_heartbeat_post = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'The worker process name'
        },
        heartbeat_interval_seconds: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Heartbeat Interval Seconds',
            description: "The worker's heartbeat interval in seconds"
        }
    },
    type: 'object',
    required: ['name'],
    title: 'Body_worker_heartbeat_work_pools__work_pool_name__workers_heartbeat_post'
} as const;

export const $CallWebhook = {
    properties: {
        type: {
            type: 'string',
            const: 'call-webhook',
            title: 'Type',
            default: 'call-webhook'
        },
        block_document_id: {
            type: 'string',
            format: 'uuid',
            title: 'Block Document Id',
            description: 'The identifier of the webhook block to use'
        },
        payload: {
            type: 'string',
            title: 'Payload',
            description: 'An optional templatable payload to send when calling the webhook.',
            default: ''
        }
    },
    type: 'object',
    required: ['block_document_id'],
    title: 'CallWebhook',
    description: 'Call a webhook when an Automation is triggered.'
} as const;

export const $CancelFlowRun = {
    properties: {
        type: {
            type: 'string',
            const: 'cancel-flow-run',
            title: 'Type',
            default: 'cancel-flow-run'
        }
    },
    type: 'object',
    title: 'CancelFlowRun',
    description: 'Cancels a flow run associated with the trigger'
} as const;

export const $ChangeFlowRunState = {
    properties: {
        type: {
            type: 'string',
            const: 'change-flow-run-state',
            title: 'Type',
            default: 'change-flow-run-state'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            description: 'The name of the state to change the flow run to'
        },
        state: {
            '$ref': '#/components/schemas/StateType',
            description: 'The type of the state to change the flow run to'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message',
            description: 'An optional message to associate with the state change'
        }
    },
    type: 'object',
    required: ['state'],
    title: 'ChangeFlowRunState',
    description: 'Changes the state of a flow run associated with the trigger'
} as const;

export const $CompoundTrigger_Input = {
    properties: {
        type: {
            type: 'string',
            const: 'compound',
            title: 'Type',
            default: 'compound'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: 'The unique ID of this trigger'
        },
        triggers: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/EventTrigger'
                    },
                    {
                        '$ref': '#/components/schemas/CompoundTrigger-Input'
                    },
                    {
                        '$ref': '#/components/schemas/SequenceTrigger-Input'
                    }
                ]
            },
            type: 'array',
            title: 'Triggers'
        },
        within: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Within'
        },
        require: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'string',
                    enum: ['any', 'all']
                }
            ],
            title: 'Require'
        }
    },
    type: 'object',
    required: ['triggers', 'within', 'require'],
    title: 'CompoundTrigger',
    description: `A composite trigger that requires some number of triggers to have
fired within the given time period`
} as const;

export const $CompoundTrigger_Output = {
    properties: {
        type: {
            type: 'string',
            const: 'compound',
            title: 'Type',
            default: 'compound'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: 'The unique ID of this trigger'
        },
        triggers: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/EventTrigger'
                    },
                    {
                        '$ref': '#/components/schemas/CompoundTrigger-Output'
                    },
                    {
                        '$ref': '#/components/schemas/SequenceTrigger-Output'
                    }
                ]
            },
            type: 'array',
            title: 'Triggers'
        },
        within: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Within'
        },
        require: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'string',
                    enum: ['any', 'all']
                }
            ],
            title: 'Require'
        }
    },
    type: 'object',
    required: ['triggers', 'within', 'require'],
    title: 'CompoundTrigger',
    description: `A composite trigger that requires some number of triggers to have
fired within the given time period`
} as const;

export const $ConcurrencyLimit = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        tag: {
            type: 'string',
            title: 'Tag',
            description: 'A tag the concurrency limit is applied to.'
        },
        concurrency_limit: {
            type: 'integer',
            title: 'Concurrency Limit',
            description: 'The concurrency limit.'
        },
        active_slots: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Active Slots',
            description: 'A list of active run ids using a concurrency slot'
        }
    },
    type: 'object',
    required: ['tag', 'concurrency_limit', 'id', 'created', 'updated'],
    title: 'ConcurrencyLimit',
    description: 'An ORM representation of a concurrency limit.'
} as const;

export const $ConcurrencyLimitCreate = {
    properties: {
        tag: {
            type: 'string',
            title: 'Tag',
            description: 'A tag the concurrency limit is applied to.'
        },
        concurrency_limit: {
            type: 'integer',
            title: 'Concurrency Limit',
            description: 'The concurrency limit.'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['tag', 'concurrency_limit'],
    title: 'ConcurrencyLimitCreate',
    description: 'Data used by the Prefect REST API to create a concurrency limit.'
} as const;

export const $ConcurrencyLimitStrategy = {
    type: 'string',
    enum: ['ENQUEUE', 'CANCEL_NEW'],
    title: 'ConcurrencyLimitStrategy',
    description: 'Enumeration of concurrency collision strategies.'
} as const;

export const $ConcurrencyLimitV2 = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            description: 'Whether the concurrency limit is active.',
            default: true
        },
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: 'The name of the concurrency limit.'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'The concurrency limit.'
        },
        active_slots: {
            type: 'integer',
            title: 'Active Slots',
            description: 'The number of active slots.',
            default: 0
        },
        denied_slots: {
            type: 'integer',
            title: 'Denied Slots',
            description: 'The number of denied slots.',
            default: 0
        },
        slot_decay_per_second: {
            type: 'number',
            title: 'Slot Decay Per Second',
            description: 'The decay rate for active slots when used as a rate limit.',
            default: 0
        },
        avg_slot_occupancy_seconds: {
            type: 'number',
            title: 'Avg Slot Occupancy Seconds',
            description: 'The average amount of time a slot is occupied.',
            default: 2
        }
    },
    type: 'object',
    required: ['name', 'limit', 'id', 'created', 'updated'],
    title: 'ConcurrencyLimitV2',
    description: 'An ORM representation of a v2 concurrency limit.'
} as const;

export const $ConcurrencyLimitV2Create = {
    properties: {
        active: {
            type: 'boolean',
            title: 'Active',
            description: 'Whether the concurrency limit is active.',
            default: true
        },
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: 'The name of the concurrency limit.'
        },
        limit: {
            type: 'integer',
            minimum: 0,
            title: 'Limit',
            description: 'The concurrency limit.'
        },
        active_slots: {
            type: 'integer',
            minimum: 0,
            title: 'Active Slots',
            description: 'The number of active slots.',
            default: 0
        },
        denied_slots: {
            type: 'integer',
            minimum: 0,
            title: 'Denied Slots',
            description: 'The number of denied slots.',
            default: 0
        },
        slot_decay_per_second: {
            type: 'number',
            minimum: 0,
            title: 'Slot Decay Per Second',
            description: 'The decay rate for active slots when used as a rate limit.',
            default: 0
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name', 'limit'],
    title: 'ConcurrencyLimitV2Create',
    description: 'Data used by the Prefect REST API to create a v2 concurrency limit.'
} as const;

export const $ConcurrencyLimitV2Update = {
    properties: {
        active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Active'
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    pattern: '^[^/%&><]+$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        limit: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Limit'
        },
        active_slots: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Active Slots'
        },
        denied_slots: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Denied Slots'
        },
        slot_decay_per_second: {
            anyOf: [
                {
                    type: 'number',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Slot Decay Per Second'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'ConcurrencyLimitV2Update',
    description: 'Data used by the Prefect REST API to update a v2 concurrency limit.'
} as const;

export const $ConcurrencyOptions = {
    properties: {
        collision_strategy: {
            '$ref': '#/components/schemas/ConcurrencyLimitStrategy'
        }
    },
    type: 'object',
    required: ['collision_strategy'],
    title: 'ConcurrencyOptions',
    description: 'Class for storing the concurrency config in database.'
} as const;

export const $Constant = {
    properties: {
        input_type: {
            type: 'string',
            const: 'constant',
            title: 'Input Type',
            default: 'constant'
        },
        type: {
            type: 'string',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['type'],
    title: 'Constant',
    description: 'Represents constant input value to a task run.'
} as const;

export const $CountByState = {
    properties: {
        COMPLETED: {
            type: 'integer',
            title: 'Completed',
            default: 0
        },
        PENDING: {
            type: 'integer',
            title: 'Pending',
            default: 0
        },
        RUNNING: {
            type: 'integer',
            title: 'Running',
            default: 0
        },
        FAILED: {
            type: 'integer',
            title: 'Failed',
            default: 0
        },
        CANCELLED: {
            type: 'integer',
            title: 'Cancelled',
            default: 0
        },
        CRASHED: {
            type: 'integer',
            title: 'Crashed',
            default: 0
        },
        PAUSED: {
            type: 'integer',
            title: 'Paused',
            default: 0
        },
        CANCELLING: {
            type: 'integer',
            title: 'Cancelling',
            default: 0
        },
        SCHEDULED: {
            type: 'integer',
            title: 'Scheduled',
            default: 0
        }
    },
    type: 'object',
    title: 'CountByState'
} as const;

export const $Countable = {
    type: 'string',
    enum: ['day', 'time', 'event', 'resource'],
    title: 'Countable'
} as const;

export const $CreatedBy = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id',
            description: 'The id of the creator of the object.'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type',
            description: 'The type of the creator of the object.'
        },
        display_value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Display Value',
            description: 'The display value for the creator.'
        }
    },
    type: 'object',
    title: 'CreatedBy'
} as const;

export const $CronSchedule = {
    properties: {
        cron: {
            type: 'string',
            title: 'Cron',
            examples: ['0 0 * * *']
        },
        timezone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Timezone',
            examples: ['America/New_York']
        },
        day_or: {
            type: 'boolean',
            title: 'Day Or',
            description: 'Control croniter behavior for handling day and day_of_week entries.',
            default: true
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['cron'],
    title: 'CronSchedule',
    description: `Cron schedule

NOTE: If the timezone is a DST-observing one, then the schedule will adjust
itself appropriately. Cron's rules for DST are based on schedule times, not
intervals. This means that an hourly cron schedule will fire on every new
schedule hour, not every elapsed hour; for example, when clocks are set back
this will result in a two-hour pause as the schedule will fire *the first
time* 1am is reached and *the first time* 2am is reached, 120 minutes later.
Longer schedules, such as one that fires at 9am every morning, will
automatically adjust for DST.

Args:
    cron (str): a valid cron string
    timezone (str): a valid timezone string in IANA tzdata format (for example,
        America/New_York).
    day_or (bool, optional): Control how croniter handles \`day\` and \`day_of_week\`
        entries. Defaults to True, matching cron which connects those values using
        OR. If the switch is set to False, the values are connected using AND. This
        behaves like fcron and enables you to e.g. define a job that executes each
        2nd friday of a month by setting the days of month and the weekday.`
} as const;

export const $CsrfToken = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        token: {
            type: 'string',
            title: 'Token',
            description: 'The CSRF token'
        },
        client: {
            type: 'string',
            title: 'Client',
            description: 'The client id associated with the CSRF token'
        },
        expiration: {
            type: 'string',
            format: 'date-time',
            title: 'Expiration',
            description: 'The expiration time of the CSRF token'
        }
    },
    type: 'object',
    required: ['token', 'client', 'expiration', 'id', 'created', 'updated'],
    title: 'CsrfToken'
} as const;

export const $DependencyResult = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        upstream_dependencies: {
            items: {
                '$ref': '#/components/schemas/TaskRunResult'
            },
            type: 'array',
            title: 'Upstream Dependencies'
        },
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/State'
                },
                {
                    type: 'null'
                }
            ]
        },
        expected_start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expected Start Time'
        },
        start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Time'
        },
        end_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Time'
        },
        total_run_time: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Run Time'
        },
        estimated_run_time: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Estimated Run Time'
        },
        untrackable_result: {
            type: 'boolean',
            title: 'Untrackable Result'
        }
    },
    type: 'object',
    required: ['id', 'name', 'upstream_dependencies', 'state', 'expected_start_time', 'start_time', 'end_time', 'total_run_time', 'estimated_run_time', 'untrackable_result'],
    title: 'DependencyResult'
} as const;

export const $DeploymentCreate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the deployment.',
            examples: ['my-deployment']
        },
        flow_id: {
            type: 'string',
            format: 'uuid',
            title: 'Flow Id',
            description: 'The ID of the flow associated with the deployment.'
        },
        paused: {
            type: 'boolean',
            title: 'Paused',
            description: 'Whether or not the deployment is paused.',
            default: false
        },
        schedules: {
            items: {
                '$ref': '#/components/schemas/DeploymentScheduleCreate'
            },
            type: 'array',
            title: 'Schedules',
            description: 'A list of schedules for the deployment.'
        },
        concurrency_limit: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Concurrency Limit',
            description: "The deployment's concurrency limit."
        },
        concurrency_options: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ConcurrencyOptions'
                },
                {
                    type: 'null'
                }
            ],
            description: "The deployment's concurrency options."
        },
        enforce_parameter_schema: {
            type: 'boolean',
            title: 'Enforce Parameter Schema',
            description: 'Whether or not the deployment should enforce the parameter schema.',
            default: true
        },
        parameter_openapi_schema: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parameter Openapi Schema',
            description: 'The parameter schema of the flow, including defaults.'
        },
        parameters: {
            type: 'object',
            title: 'Parameters',
            description: 'Parameters for flow runs scheduled by the deployment.'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of deployment tags.',
            examples: [['tag-1', 'tag-2']]
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'boolean'
                            },
                            {
                                type: 'integer'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'string'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels',
            description: 'A dictionary of key-value labels. Values can be strings, numbers, or booleans.',
            examples: [
                {
                    key: 'value1',
                    key2: 42
                }
            ]
        },
        pull_steps: {
            anyOf: [
                {
                    items: {
                        type: 'object'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pull Steps'
        },
        work_queue_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Queue Name'
        },
        work_pool_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Pool Name',
            description: "The name of the deployment's work pool.",
            examples: ['my-work-pool']
        },
        storage_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Storage Document Id'
        },
        infrastructure_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Infrastructure Document Id'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Path'
        },
        version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        entrypoint: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entrypoint'
        },
        job_variables: {
            type: 'object',
            title: 'Job Variables',
            description: "Overrides for the flow's infrastructure configuration."
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name', 'flow_id'],
    title: 'DeploymentCreate',
    description: 'Data used by the Prefect REST API to create a deployment.'
} as const;

export const $DeploymentFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilterId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Deployment.id`'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilterName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Deployment.name`'
        },
        flow_or_deployment_name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentOrFlowNameFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Deployment.name` or `Flow.name`'
        },
        paused: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilterPaused'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Deployment.paused`'
        },
        tags: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilterTags'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Deployment.tags`'
        },
        work_queue_name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilterWorkQueueName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Deployment.work_queue_name`'
        },
        concurrency_limit: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentFilterConcurrencyLimit'
                },
                {
                    type: 'null'
                }
            ],
            description: 'DEPRECATED: Prefer `Deployment.concurrency_limit_id` over `Deployment.concurrency_limit`. If provided, will be ignored for backwards-compatibility. Will be removed after December 2024.',
            deprecated: true
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentFilter',
    description: 'Filter for deployments. Only deployments matching all criteria will be returned.'
} as const;

export const $DeploymentFilterConcurrencyLimit = {
    properties: {
        ge_: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ge',
            description: 'Only include deployments with a concurrency limit greater than or equal to this value'
        },
        le_: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Le',
            description: 'Only include deployments with a concurrency limit less than or equal to this value'
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include deployments without a concurrency limit'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentFilterConcurrencyLimit',
    description: 'DEPRECATED: Prefer `Deployment.concurrency_limit_id` over `Deployment.concurrency_limit`.'
} as const;

export const $DeploymentFilterId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of deployment ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentFilterId',
    description: 'Filter by `Deployment.id`.'
} as const;

export const $DeploymentFilterName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of deployment names to include',
            examples: [['my-deployment-1', 'my-deployment-2']]
        },
        like_: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Like',
            description: "A case-insensitive partial match. For example,  passing 'marvin' will match 'marvin', 'sad-Marvin', and 'marvin-robot'.",
            examples: ['marvin']
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentFilterName',
    description: 'Filter by `Deployment.name`.'
} as const;

export const $DeploymentFilterPaused = {
    properties: {
        eq_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eq',
            description: 'Only returns where deployment is/is not paused'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentFilterPaused',
    description: 'Filter by `Deployment.paused`.'
} as const;

export const $DeploymentFilterTags = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        all_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'All',
            description: 'A list of tags. Deployments will be returned only if their tags are a superset of the list',
            examples: [['tag-1', 'tag-2']]
        },
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of tags to include',
            examples: [['tag-1', 'tag-2']]
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include deployments without tags'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentFilterTags',
    description: 'Filter by `Deployment.tags`.'
} as const;

export const $DeploymentFilterWorkQueueName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of work queue names to include',
            examples: [['work_queue_1', 'work_queue_2']]
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentFilterWorkQueueName',
    description: 'Filter by `Deployment.work_queue_name`.'
} as const;

export const $DeploymentFlowRunCreate = {
    properties: {
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StateCreate'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The state of the flow run to create'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the flow run. Defaults to a random slug if not specified.',
            examples: ['my-flow-run']
        },
        parameters: {
            type: 'object',
            title: 'Parameters'
        },
        enforce_parameter_schema: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Enforce Parameter Schema',
            description: 'Whether or not to enforce the parameter schema on this run.'
        },
        context: {
            type: 'object',
            title: 'Context'
        },
        infrastructure_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Infrastructure Document Id'
        },
        empirical_policy: {
            '$ref': '#/components/schemas/FlowRunPolicy',
            description: 'The empirical policy for the flow run.'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of tags for the flow run.',
            examples: [['tag-1', 'tag-2']]
        },
        idempotency_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Idempotency Key',
            description: 'An optional idempotency key. If a flow run with the same idempotency key has already been created, the existing flow run will be returned.'
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'boolean'
                            },
                            {
                                type: 'integer'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'string'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels',
            description: 'A dictionary of key-value labels. Values can be strings, numbers, or booleans.',
            examples: [
                {
                    key: 'value1',
                    key2: 42
                }
            ]
        },
        parent_task_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parent Task Run Id'
        },
        work_queue_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Queue Name'
        },
        job_variables: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Variables'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentFlowRunCreate',
    description: 'Data used by the Prefect REST API to create a flow run from a deployment.'
} as const;

export const $DeploymentOrFlowNameFilter = {
    properties: {
        like_: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Like',
            description: "A case-insensitive partial match on deployment or flow names. For example, passing 'example' might match deployments or flows with 'example' in their names."
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentOrFlowNameFilter',
    description: 'Filter by `Deployment.name` or `Flow.name` with a single input string for ilike filtering.'
} as const;

export const $DeploymentPaginationResponse = {
    properties: {
        results: {
            items: {
                '$ref': '#/components/schemas/DeploymentResponse'
            },
            type: 'array',
            title: 'Results'
        },
        count: {
            type: 'integer',
            title: 'Count'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        pages: {
            type: 'integer',
            title: 'Pages'
        },
        page: {
            type: 'integer',
            title: 'Page'
        }
    },
    type: 'object',
    required: ['results', 'count', 'limit', 'pages', 'page'],
    title: 'DeploymentPaginationResponse'
} as const;

export const $DeploymentResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the deployment.'
        },
        version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version',
            description: 'An optional version for the deployment.'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'A description for the deployment.'
        },
        flow_id: {
            type: 'string',
            format: 'uuid',
            title: 'Flow Id',
            description: 'The flow id associated with the deployment.'
        },
        paused: {
            type: 'boolean',
            title: 'Paused',
            description: 'Whether or not the deployment is paused.',
            default: false
        },
        schedules: {
            items: {
                '$ref': '#/components/schemas/DeploymentSchedule'
            },
            type: 'array',
            title: 'Schedules',
            description: 'A list of schedules for the deployment.'
        },
        concurrency_limit: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Concurrency Limit',
            description: 'DEPRECATED: Prefer `global_concurrency_limit`. Will always be None for backwards compatibility. Will be removed after December 2024.',
            deprecated: true
        },
        global_concurrency_limit: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/GlobalConcurrencyLimitResponse'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The global concurrency limit object for enforcing the maximum number of flow runs that can be active at once.'
        },
        concurrency_options: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ConcurrencyOptions'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The concurrency options for the deployment.'
        },
        job_variables: {
            type: 'object',
            title: 'Job Variables',
            description: 'Overrides to apply to the base infrastructure block at runtime.'
        },
        parameters: {
            type: 'object',
            title: 'Parameters',
            description: 'Parameters for flow runs scheduled by the deployment.'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of tags for the deployment',
            examples: [['tag-1', 'tag-2']]
        },
        labels: {
            additionalProperties: {
                anyOf: [
                    {
                        type: 'boolean'
                    },
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number'
                    },
                    {
                        type: 'string'
                    }
                ]
            },
            type: 'object',
            title: 'Labels',
            description: 'A dictionary of key-value labels. Values can be strings, numbers, or booleans.',
            examples: [
                {
                    key: 'value1',
                    key2: 42
                }
            ]
        },
        work_queue_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Queue Name',
            description: 'The work queue for the deployment. If no work queue is set, work will not be scheduled.'
        },
        last_polled: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Polled',
            description: 'The last time the deployment was polled for status updates.'
        },
        parameter_openapi_schema: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parameter Openapi Schema',
            description: 'The parameter schema of the flow, including defaults.'
        },
        path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Path',
            description: 'The path to the working directory for the workflow, relative to remote storage or an absolute path.'
        },
        pull_steps: {
            anyOf: [
                {
                    items: {
                        type: 'object'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pull Steps',
            description: 'Pull steps for cloning and running this deployment.'
        },
        entrypoint: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entrypoint',
            description: 'The path to the entrypoint for the workflow, relative to the `path`.'
        },
        storage_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Storage Document Id',
            description: 'The block document defining storage used for this flow.'
        },
        infrastructure_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Infrastructure Document Id',
            description: 'The block document defining infrastructure to use for flow runs.'
        },
        created_by: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CreatedBy'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional information about the creator of this deployment.'
        },
        updated_by: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/UpdatedBy'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional information about the updater of this deployment.'
        },
        work_pool_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Pool Name',
            description: "The name of the deployment's work pool."
        },
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DeploymentStatus'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Whether the deployment is ready to run flows.',
            default: 'NOT_READY'
        },
        enforce_parameter_schema: {
            type: 'boolean',
            title: 'Enforce Parameter Schema',
            description: 'Whether or not the deployment should enforce the parameter schema.',
            default: true
        }
    },
    type: 'object',
    required: ['name', 'flow_id', 'id', 'created', 'updated'],
    title: 'DeploymentResponse'
} as const;

export const $DeploymentSchedule = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        deployment_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deployment Id',
            description: 'The deployment id associated with this schedule.'
        },
        schedule: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/IntervalSchedule'
                },
                {
                    '$ref': '#/components/schemas/CronSchedule'
                },
                {
                    '$ref': '#/components/schemas/RRuleSchedule'
                }
            ],
            title: 'Schedule',
            description: 'The schedule for the deployment.'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            description: 'Whether or not the schedule is active.',
            default: true
        },
        max_scheduled_runs: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Scheduled Runs',
            description: 'The maximum number of scheduled runs for the schedule.'
        }
    },
    type: 'object',
    required: ['schedule', 'id', 'created', 'updated'],
    title: 'DeploymentSchedule'
} as const;

export const $DeploymentScheduleCreate = {
    properties: {
        active: {
            type: 'boolean',
            title: 'Active',
            description: 'Whether or not the schedule is active.',
            default: true
        },
        schedule: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/IntervalSchedule'
                },
                {
                    '$ref': '#/components/schemas/CronSchedule'
                },
                {
                    '$ref': '#/components/schemas/RRuleSchedule'
                }
            ],
            title: 'Schedule',
            description: 'The schedule for the deployment.'
        },
        max_scheduled_runs: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Scheduled Runs',
            description: 'The maximum number of scheduled runs for the schedule.'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['schedule'],
    title: 'DeploymentScheduleCreate'
} as const;

export const $DeploymentScheduleUpdate = {
    properties: {
        active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Active',
            description: 'Whether or not the schedule is active.'
        },
        schedule: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/IntervalSchedule'
                },
                {
                    '$ref': '#/components/schemas/CronSchedule'
                },
                {
                    '$ref': '#/components/schemas/RRuleSchedule'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Schedule',
            description: 'The schedule for the deployment.'
        },
        max_scheduled_runs: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Scheduled Runs',
            description: 'The maximum number of scheduled runs for the schedule.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentScheduleUpdate'
} as const;

export const $DeploymentSort = {
    type: 'string',
    enum: ['CREATED_DESC', 'UPDATED_DESC', 'NAME_ASC', 'NAME_DESC'],
    title: 'DeploymentSort',
    description: 'Defines deployment sorting options.'
} as const;

export const $DeploymentStatus = {
    type: 'string',
    enum: ['READY', 'NOT_READY'],
    title: 'DeploymentStatus',
    description: 'Enumeration of deployment statuses.'
} as const;

export const $DeploymentUpdate = {
    properties: {
        version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        paused: {
            type: 'boolean',
            title: 'Paused',
            description: 'Whether or not the deployment is paused.',
            default: false
        },
        schedules: {
            items: {
                '$ref': '#/components/schemas/DeploymentScheduleCreate'
            },
            type: 'array',
            title: 'Schedules',
            description: 'A list of schedules for the deployment.'
        },
        concurrency_limit: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Concurrency Limit',
            description: "The deployment's concurrency limit."
        },
        concurrency_options: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ConcurrencyOptions'
                },
                {
                    type: 'null'
                }
            ],
            description: "The deployment's concurrency options."
        },
        parameters: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parameters',
            description: 'Parameters for flow runs scheduled by the deployment.'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of deployment tags.',
            examples: [['tag-1', 'tag-2']]
        },
        work_queue_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Queue Name'
        },
        work_pool_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Pool Name',
            description: "The name of the deployment's work pool.",
            examples: ['my-work-pool']
        },
        path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Path'
        },
        job_variables: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Variables',
            description: "Overrides for the flow's infrastructure configuration."
        },
        entrypoint: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entrypoint'
        },
        storage_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Storage Document Id'
        },
        infrastructure_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Infrastructure Document Id'
        },
        enforce_parameter_schema: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Enforce Parameter Schema',
            description: 'Whether or not the deployment should enforce the parameter schema.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'DeploymentUpdate',
    description: 'Data used by the Prefect REST API to update a deployment.'
} as const;

export const $DoNothing = {
    properties: {
        type: {
            type: 'string',
            const: 'do-nothing',
            title: 'Type',
            default: 'do-nothing'
        }
    },
    type: 'object',
    title: 'DoNothing',
    description: 'Do nothing when an Automation is triggered'
} as const;

export const $Edge = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'Edge'
} as const;

export const $Event = {
    properties: {
        occurred: {
            type: 'string',
            format: 'date-time',
            title: 'Occurred',
            description: "When the event happened from the sender's perspective"
        },
        event: {
            type: 'string',
            title: 'Event',
            description: 'The name of the event that happened'
        },
        resource: {
            '$ref': '#/components/schemas/Resource',
            description: 'The primary Resource this event concerns'
        },
        related: {
            items: {
                '$ref': '#/components/schemas/RelatedResource'
            },
            type: 'array',
            title: 'Related',
            description: 'A list of additional Resources involved in this event'
        },
        payload: {
            type: 'object',
            title: 'Payload',
            description: 'An open-ended set of data describing what happened'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: 'The client-provided identifier of this event'
        },
        follows: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Follows',
            description: 'The ID of an event that is known to have occurred prior to this one. If set, this may be used to establish a more precise ordering of causally-related events when they occur close enough together in time that the system may receive them out-of-order.'
        }
    },
    type: 'object',
    required: ['occurred', 'event', 'resource', 'id'],
    title: 'Event',
    description: 'The client-side view of an event that has happened to a Resource'
} as const;

export const $EventAnyResourceFilter = {
    properties: {
        id: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id',
            description: 'Only include events for resources with these IDs'
        },
        id_prefix: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id Prefix',
            description: 'Only include events for resources with IDs starting with these prefixes'
        },
        labels: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ResourceSpecification'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Only include events for related resources with these labels'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'EventAnyResourceFilter'
} as const;

export const $EventCount = {
    properties: {
        value: {
            type: 'string',
            title: 'Value',
            description: 'The value to use for filtering'
        },
        label: {
            type: 'string',
            title: 'Label',
            description: 'The value to display for this count'
        },
        count: {
            type: 'integer',
            title: 'Count',
            description: 'The count of matching events'
        },
        start_time: {
            type: 'string',
            format: 'date-time',
            title: 'Start Time',
            description: 'The start time of this group of events'
        },
        end_time: {
            type: 'string',
            format: 'date-time',
            title: 'End Time',
            description: 'The end time of this group of events'
        }
    },
    type: 'object',
    required: ['value', 'label', 'count', 'start_time', 'end_time'],
    title: 'EventCount',
    description: 'The count of events with the given filter value'
} as const;

export const $EventFilter = {
    properties: {
        occurred: {
            '$ref': '#/components/schemas/EventOccurredFilter',
            description: 'Filter criteria for when the events occurred'
        },
        event: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventNameFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for the event name'
        },
        any_resource: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventAnyResourceFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for any resource involved in the event'
        },
        resource: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventResourceFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for the resource of the event'
        },
        related: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventRelatedFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for the related resources of the event'
        },
        id: {
            '$ref': '#/components/schemas/EventIDFilter',
            description: "Filter criteria for the events' ID"
        },
        order: {
            '$ref': '#/components/schemas/EventOrder',
            description: 'The order to return filtered events',
            default: 'DESC'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'EventFilter'
} as const;

export const $EventIDFilter = {
    properties: {
        id: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id',
            description: 'Only include events with one of these IDs'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'EventIDFilter'
} as const;

export const $EventNameFilter = {
    properties: {
        prefix: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Prefix',
            description: 'Only include events matching one of these prefixes'
        },
        exclude_prefix: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Exclude Prefix',
            description: 'Exclude events matching one of these prefixes'
        },
        name: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            description: 'Only include events matching one of these names exactly'
        },
        exclude_name: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Exclude Name',
            description: 'Exclude events matching one of these names exactly'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'EventNameFilter'
} as const;

export const $EventOccurredFilter = {
    properties: {
        since: {
            type: 'string',
            format: 'date-time',
            title: 'Since',
            description: 'Only include events after this time (inclusive)'
        },
        until: {
            type: 'string',
            format: 'date-time',
            title: 'Until',
            description: 'Only include events prior to this time (inclusive)'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'EventOccurredFilter'
} as const;

export const $EventOrder = {
    type: 'string',
    enum: ['ASC', 'DESC'],
    title: 'EventOrder'
} as const;

export const $EventPage = {
    properties: {
        events: {
            items: {
                '$ref': '#/components/schemas/ReceivedEvent'
            },
            type: 'array',
            title: 'Events',
            description: 'The Events matching the query'
        },
        total: {
            type: 'integer',
            title: 'Total',
            description: 'The total number of matching Events'
        },
        next_page: {
            anyOf: [
                {
                    type: 'string',
                    minLength: 1,
                    format: 'uri'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Page',
            description: 'The URL for the next page of results, if there are more'
        }
    },
    type: 'object',
    required: ['events', 'total', 'next_page'],
    title: 'EventPage',
    description: `A single page of events returned from the API, with an optional link to the
next page of results`
} as const;

export const $EventRelatedFilter = {
    properties: {
        id: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id',
            description: 'Only include events for related resources with these IDs'
        },
        role: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role',
            description: 'Only include events for related resources in these roles'
        },
        resources_in_roles: {
            anyOf: [
                {
                    items: {
                        prefixItems: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'string'
                            }
                        ],
                        type: 'array',
                        maxItems: 2,
                        minItems: 2
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Resources In Roles',
            description: 'Only include events with specific related resources in specific roles'
        },
        labels: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ResourceSpecification'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Only include events for related resources with these labels'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'EventRelatedFilter'
} as const;

export const $EventResourceFilter = {
    properties: {
        id: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id',
            description: 'Only include events for resources with these IDs'
        },
        id_prefix: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id Prefix',
            description: 'Only include events for resources with IDs starting with these prefixes.'
        },
        labels: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ResourceSpecification'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Only include events for resources with these labels'
        },
        distinct: {
            type: 'boolean',
            title: 'Distinct',
            description: 'Only include events for distinct resources',
            default: false
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'EventResourceFilter'
} as const;

export const $EventTrigger = {
    properties: {
        type: {
            type: 'string',
            const: 'event',
            title: 'Type',
            default: 'event'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: 'The unique ID of this trigger'
        },
        match: {
            '$ref': '#/components/schemas/ResourceSpecification',
            description: 'Labels for resources which this trigger will match.'
        },
        match_related: {
            '$ref': '#/components/schemas/ResourceSpecification',
            description: 'Labels for related resources which this trigger will match.'
        },
        after: {
            items: {
                type: 'string'
            },
            type: 'array',
            uniqueItems: true,
            title: 'After',
            description: 'The event(s) which must first been seen to fire this trigger.  If empty, then fire this trigger immediately.  Events may include trailing wildcards, like `prefect.flow-run.*`'
        },
        expect: {
            items: {
                type: 'string'
            },
            type: 'array',
            uniqueItems: true,
            title: 'Expect',
            description: 'The event(s) this trigger is expecting to see.  If empty, this trigger will match any event.  Events may include trailing wildcards, like `prefect.flow-run.*`'
        },
        for_each: {
            items: {
                type: 'string'
            },
            type: 'array',
            uniqueItems: true,
            title: 'For Each',
            description: 'Evaluate the trigger separately for each distinct value of these labels on the resource.  By default, labels refer to the primary resource of the triggering event.  You may also refer to labels from related resources by specifying `related:<role>:<label>`.  This will use the value of that label for the first related resource in that role.  For example, `"for_each": ["related:flow:prefect.resource.id"]` would evaluate the trigger for each flow.'
        },
        posture: {
            type: 'string',
            enum: ['Reactive', 'Proactive'],
            title: 'Posture',
            description: 'The posture of this trigger, either Reactive or Proactive.  Reactive triggers respond to the _presence_ of the expected events, while Proactive triggers respond to the _absence_ of those expected events.'
        },
        threshold: {
            type: 'integer',
            title: 'Threshold',
            description: 'The number of events required for this trigger to fire (for Reactive triggers), or the number of events expected (for Proactive triggers)',
            default: 1
        },
        within: {
            type: 'number',
            title: 'Within',
            description: 'The time period over which the events must occur.  For Reactive triggers, this may be as low as 0 seconds, but must be at least 10 seconds for Proactive triggers',
            default: 0
        }
    },
    type: 'object',
    required: ['posture'],
    title: 'EventTrigger',
    description: `A trigger that fires based on the presence or absence of events within a given
period of time.`
} as const;

export const $Flow = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: 'The name of the flow',
            examples: ['my-flow']
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of flow tags',
            examples: [['tag-1', 'tag-2']]
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'boolean'
                            },
                            {
                                type: 'integer'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'string'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels',
            description: 'A dictionary of key-value labels. Values can be strings, numbers, or booleans.',
            examples: [
                {
                    key: 'value1',
                    key2: 42
                }
            ]
        }
    },
    type: 'object',
    required: ['name', 'id', 'created', 'updated'],
    title: 'Flow',
    description: 'An ORM representation of flow data.'
} as const;

export const $FlowCreate = {
    properties: {
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: 'The name of the flow',
            examples: ['my-flow']
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of flow tags',
            examples: [['tag-1', 'tag-2']]
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'boolean'
                            },
                            {
                                type: 'integer'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'string'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels',
            description: 'A dictionary of key-value labels. Values can be strings, numbers, or booleans.',
            examples: [
                {
                    key: 'value1',
                    key2: 42
                }
            ]
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name'],
    title: 'FlowCreate',
    description: 'Data used by the Prefect REST API to create a flow.'
} as const;

export const $FlowFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilterId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Flow.id`'
        },
        deployment: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilterDeployment'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for Flow deployments'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilterName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Flow.name`'
        },
        tags: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowFilterTags'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Flow.tags`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowFilter',
    description: 'Filter for flows. Only flows matching all criteria will be returned.'
} as const;

export const $FlowFilterDeployment = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include flows without deployments'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowFilterDeployment',
    description: 'Filter by flows by deployment'
} as const;

export const $FlowFilterId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowFilterId',
    description: 'Filter by `Flow.id`.'
} as const;

export const $FlowFilterName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow names to include',
            examples: [['my-flow-1', 'my-flow-2']]
        },
        like_: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Like',
            description: "A case-insensitive partial match. For example,  passing 'marvin' will match 'marvin', 'sad-Marvin', and 'marvin-robot'.",
            examples: ['marvin']
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowFilterName',
    description: 'Filter by `Flow.name`.'
} as const;

export const $FlowFilterTags = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        all_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'All',
            description: 'A list of tags. Flows will be returned only if their tags are a superset of the list',
            examples: [['tag-1', 'tag-2']]
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include flows without tags'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowFilterTags',
    description: 'Filter by `Flow.tags`.'
} as const;

export const $FlowPaginationResponse = {
    properties: {
        results: {
            items: {
                '$ref': '#/components/schemas/Flow'
            },
            type: 'array',
            title: 'Results'
        },
        count: {
            type: 'integer',
            title: 'Count'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        pages: {
            type: 'integer',
            title: 'Pages'
        },
        page: {
            type: 'integer',
            title: 'Page'
        }
    },
    type: 'object',
    required: ['results', 'count', 'limit', 'pages', 'page'],
    title: 'FlowPaginationResponse'
} as const;

export const $FlowRun = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the flow run. Defaults to a random slug if not specified.',
            examples: ['my-flow-run']
        },
        flow_id: {
            type: 'string',
            format: 'uuid',
            title: 'Flow Id',
            description: 'The id of the flow being run.'
        },
        state_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State Id',
            description: "The id of the flow run's current state."
        },
        deployment_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deployment Id',
            description: 'The id of the deployment associated with this flow run, if available.'
        },
        deployment_version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deployment Version',
            description: 'The version of the deployment associated with this flow run.',
            examples: ['1.0']
        },
        work_queue_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Queue Name',
            description: 'The work queue that handled this flow run.'
        },
        flow_version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Version',
            description: 'The version of the flow executed in this flow run.',
            examples: ['1.0']
        },
        parameters: {
            type: 'object',
            title: 'Parameters',
            description: 'Parameters for the flow run.'
        },
        idempotency_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Idempotency Key',
            description: 'An optional idempotency key for the flow run. Used to ensure the same flow run is not created multiple times.'
        },
        context: {
            type: 'object',
            title: 'Context',
            description: 'Additional context for the flow run.',
            examples: [
                {
                    my_var: 'my_value'
                }
            ]
        },
        empirical_policy: {
            '$ref': '#/components/schemas/FlowRunPolicy'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of tags on the flow run',
            examples: [['tag-1', 'tag-2']]
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'boolean'
                            },
                            {
                                type: 'integer'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'string'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels',
            description: 'A dictionary of key-value labels. Values can be strings, numbers, or booleans.',
            examples: [
                {
                    key: 'value1',
                    key2: 42
                }
            ]
        },
        parent_task_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parent Task Run Id',
            description: "If the flow run is a subflow, the id of the 'dummy' task in the parent flow used to track subflow state."
        },
        state_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StateType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The type of the current flow run state.'
        },
        state_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State Name',
            description: 'The name of the current flow run state.'
        },
        run_count: {
            type: 'integer',
            title: 'Run Count',
            description: 'The number of times the flow run was executed.',
            default: 0
        },
        expected_start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expected Start Time',
            description: "The flow run's expected start time."
        },
        next_scheduled_start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Scheduled Start Time',
            description: 'The next time the flow run is scheduled to start.'
        },
        start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Time',
            description: 'The actual start time.'
        },
        end_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Time',
            description: 'The actual end time.'
        },
        total_run_time: {
            type: 'number',
            title: 'Total Run Time',
            description: 'Total run time. If the flow run was executed multiple times, the time of each run will be summed.',
            default: 0
        },
        estimated_run_time: {
            type: 'number',
            title: 'Estimated Run Time',
            description: 'A real-time estimate of the total run time.',
            default: 0
        },
        estimated_start_time_delta: {
            type: 'number',
            title: 'Estimated Start Time Delta',
            description: 'The difference between actual and expected start time.',
            default: 0
        },
        auto_scheduled: {
            type: 'boolean',
            title: 'Auto Scheduled',
            description: 'Whether or not the flow run was automatically scheduled.',
            default: false
        },
        infrastructure_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Infrastructure Document Id',
            description: 'The block document defining infrastructure to use this flow run.'
        },
        infrastructure_pid: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Infrastructure Pid',
            description: 'The id of the flow run as returned by an infrastructure block.'
        },
        created_by: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CreatedBy'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional information about the creator of this flow run.'
        },
        work_queue_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Queue Id',
            description: "The id of the run's work pool queue."
        },
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/State'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The current state of the flow run.'
        },
        job_variables: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Variables',
            description: 'Variables used as overrides in the base job template'
        }
    },
    type: 'object',
    required: ['flow_id', 'id', 'created', 'updated'],
    title: 'FlowRun',
    description: 'An ORM representation of flow run data.'
} as const;

export const $FlowRunCreate = {
    properties: {
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StateCreate'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The state of the flow run to create'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the flow run. Defaults to a random slug if not specified.',
            examples: ['my-flow-run']
        },
        flow_id: {
            type: 'string',
            format: 'uuid',
            title: 'Flow Id',
            description: 'The id of the flow being run.'
        },
        flow_version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Version',
            description: 'The version of the flow being run.'
        },
        parameters: {
            type: 'object',
            title: 'Parameters'
        },
        context: {
            type: 'object',
            title: 'Context',
            description: 'The context of the flow run.'
        },
        parent_task_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parent Task Run Id'
        },
        infrastructure_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Infrastructure Document Id'
        },
        empirical_policy: {
            '$ref': '#/components/schemas/FlowRunPolicy',
            description: 'The empirical policy for the flow run.'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of tags for the flow run.',
            examples: [['tag-1', 'tag-2']]
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'boolean'
                            },
                            {
                                type: 'integer'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'string'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels',
            description: 'A dictionary of key-value labels. Values can be strings, numbers, or booleans.',
            examples: [
                {
                    key: 'value1',
                    key2: 42
                }
            ]
        },
        idempotency_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Idempotency Key',
            description: 'An optional idempotency key. If a flow run with the same idempotency key has already been created, the existing flow run will be returned.'
        },
        deployment_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deployment Id',
            description: 'DEPRECATED: The id of the deployment associated with this flow run, if available.',
            deprecated: true
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['flow_id'],
    title: 'FlowRunCreate',
    description: 'Data used by the Prefect REST API to create a flow run.'
} as const;

export const $FlowRunFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.id`'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.name`'
        },
        tags: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterTags'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.tags`'
        },
        deployment_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterDeploymentId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.deployment_id`'
        },
        work_queue_name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterWorkQueueName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.work_queue_name'
        },
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterState'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.state`'
        },
        flow_version: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterFlowVersion'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.flow_version`'
        },
        start_time: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterStartTime'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.start_time`'
        },
        end_time: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterEndTime'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.end_time`'
        },
        expected_start_time: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterExpectedStartTime'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.expected_start_time`'
        },
        next_scheduled_start_time: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterNextScheduledStartTime'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.next_scheduled_start_time`'
        },
        parent_flow_run_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterParentFlowRunId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for subflows of the given flow runs'
        },
        parent_task_run_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterParentTaskRunId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.parent_task_run_id`'
        },
        idempotency_key: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterIdempotencyKey'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.idempotency_key`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilter',
    description: 'Filter flow runs. Only flow runs matching all criteria will be returned'
} as const;

export const $FlowRunFilterDeploymentId = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run deployment ids to include'
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include flow runs without deployment ids'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterDeploymentId',
    description: 'Filter by `FlowRun.deployment_id`.'
} as const;

export const $FlowRunFilterEndTime = {
    properties: {
        before_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Before',
            description: 'Only include flow runs ending at or before this time'
        },
        after_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'After',
            description: 'Only include flow runs ending at or after this time'
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only return flow runs without an end time'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterEndTime',
    description: 'Filter by `FlowRun.end_time`.'
} as const;

export const $FlowRunFilterExpectedStartTime = {
    properties: {
        before_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Before',
            description: 'Only include flow runs scheduled to start at or before this time'
        },
        after_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'After',
            description: 'Only include flow runs scheduled to start at or after this time'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterExpectedStartTime',
    description: 'Filter by `FlowRun.expected_start_time`.'
} as const;

export const $FlowRunFilterFlowVersion = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run flow_versions to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterFlowVersion',
    description: 'Filter by `FlowRun.flow_version`.'
} as const;

export const $FlowRunFilterId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run ids to include'
        },
        not_any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Not Any',
            description: 'A list of flow run ids to exclude'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterId',
    description: 'Filter by `FlowRun.id`.'
} as const;

export const $FlowRunFilterIdempotencyKey = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run idempotency keys to include'
        },
        not_any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Not Any',
            description: 'A list of flow run idempotency keys to exclude'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterIdempotencyKey',
    description: 'Filter by FlowRun.idempotency_key.'
} as const;

export const $FlowRunFilterName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run names to include',
            examples: [['my-flow-run-1', 'my-flow-run-2']]
        },
        like_: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Like',
            description: "A case-insensitive partial match. For example,  passing 'marvin' will match 'marvin', 'sad-Marvin', and 'marvin-robot'.",
            examples: ['marvin']
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterName',
    description: 'Filter by `FlowRun.name`.'
} as const;

export const $FlowRunFilterNextScheduledStartTime = {
    properties: {
        before_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Before',
            description: 'Only include flow runs with a next_scheduled_start_time or before this time'
        },
        after_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'After',
            description: 'Only include flow runs with a next_scheduled_start_time at or after this time'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterNextScheduledStartTime',
    description: 'Filter by `FlowRun.next_scheduled_start_time`.'
} as const;

export const $FlowRunFilterParentFlowRunId = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of parent flow run ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterParentFlowRunId',
    description: 'Filter for subflows of a given flow run'
} as const;

export const $FlowRunFilterParentTaskRunId = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run parent_task_run_ids to include'
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include flow runs without parent_task_run_id'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterParentTaskRunId',
    description: 'Filter by `FlowRun.parent_task_run_id`.'
} as const;

export const $FlowRunFilterStartTime = {
    properties: {
        before_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Before',
            description: 'Only include flow runs starting at or before this time'
        },
        after_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'After',
            description: 'Only include flow runs starting at or after this time'
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only return flow runs without a start time'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterStartTime',
    description: 'Filter by `FlowRun.start_time`.'
} as const;

export const $FlowRunFilterState = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterStateType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.state_type`'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunFilterStateName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRun.state_name`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterState',
    description: 'Filter by `FlowRun.state_type` and `FlowRun.state_name`.'
} as const;

export const $FlowRunFilterStateName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run state names to include'
        },
        not_any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Not Any',
            description: 'A list of flow run state names to exclude'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterStateName',
    description: 'Filter by `FlowRun.state_name`.'
} as const;

export const $FlowRunFilterStateType = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/StateType'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run state types to include'
        },
        not_any_: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/StateType'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Not Any',
            description: 'A list of flow run state types to exclude'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterStateType',
    description: 'Filter by `FlowRun.state_type`.'
} as const;

export const $FlowRunFilterTags = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        all_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'All',
            description: 'A list of tags. Flow runs will be returned only if their tags are a superset of the list',
            examples: [['tag-1', 'tag-2']]
        },
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of tags to include',
            examples: [['tag-1', 'tag-2']]
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include flow runs without tags'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterTags',
    description: 'Filter by `FlowRun.tags`.'
} as const;

export const $FlowRunFilterWorkQueueName = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of work queue names to include',
            examples: [['work_queue_1', 'work_queue_2']]
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include flow runs without work queue names'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunFilterWorkQueueName',
    description: 'Filter by `FlowRun.work_queue_name`.'
} as const;

export const $FlowRunInput = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        flow_run_id: {
            type: 'string',
            format: 'uuid',
            title: 'Flow Run Id',
            description: 'The flow run ID associated with the input.'
        },
        key: {
            type: 'string',
            title: 'Key',
            description: 'The key of the input.'
        },
        value: {
            type: 'string',
            title: 'Value',
            description: 'The value of the input.'
        },
        sender: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sender',
            description: 'The sender of the input.'
        }
    },
    type: 'object',
    required: ['flow_run_id', 'key', 'value', 'id', 'created', 'updated'],
    title: 'FlowRunInput'
} as const;

export const $FlowRunNotificationPolicy = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            description: 'Whether the policy is currently active',
            default: true
        },
        state_names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'State Names',
            description: 'The flow run states that trigger notifications'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'The flow run tags that trigger notifications (set [] to disable)'
        },
        block_document_id: {
            type: 'string',
            format: 'uuid',
            title: 'Block Document Id',
            description: 'The block document ID used for sending notifications'
        },
        message_template: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message Template',
            description: "A templatable notification message. Use {braces} to add variables. Valid variables include: 'flow_id', 'flow_name', 'flow_run_id', 'flow_run_name', 'flow_run_notification_policy_id', 'flow_run_parameters', 'flow_run_state_message', 'flow_run_state_name', 'flow_run_state_timestamp', 'flow_run_state_type', 'flow_run_url'",
            examples: ['Flow run {flow_run_name} with id {flow_run_id} entered state {flow_run_state_name}.']
        }
    },
    type: 'object',
    required: ['state_names', 'tags', 'block_document_id', 'id', 'created', 'updated'],
    title: 'FlowRunNotificationPolicy',
    description: 'An ORM representation of a flow run notification.'
} as const;

export const $FlowRunNotificationPolicyCreate = {
    properties: {
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            description: 'Whether the policy is currently active',
            default: true
        },
        state_names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'State Names',
            description: 'The flow run states that trigger notifications'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'The flow run tags that trigger notifications (set [] to disable)'
        },
        block_document_id: {
            type: 'string',
            format: 'uuid',
            title: 'Block Document Id',
            description: 'The block document ID used for sending notifications'
        },
        message_template: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message Template',
            description: "A templatable notification message. Use {braces} to add variables. Valid variables include: 'flow_id', 'flow_name', 'flow_run_id', 'flow_run_name', 'flow_run_notification_policy_id', 'flow_run_parameters', 'flow_run_state_message', 'flow_run_state_name', 'flow_run_state_timestamp', 'flow_run_state_type', 'flow_run_url'",
            examples: ['Flow run {flow_run_name} with id {flow_run_id} entered state {flow_run_state_name}.']
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['state_names', 'tags', 'block_document_id'],
    title: 'FlowRunNotificationPolicyCreate',
    description: 'Data used by the Prefect REST API to create a flow run notification policy.'
} as const;

export const $FlowRunNotificationPolicyFilter = {
    properties: {
        is_active: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FlowRunNotificationPolicyFilterIsActive'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `FlowRunNotificationPolicy.is_active`. ',
            default: {
                eq_: false
            }
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunNotificationPolicyFilter',
    description: 'Filter FlowRunNotificationPolicies.'
} as const;

export const $FlowRunNotificationPolicyFilterIsActive = {
    properties: {
        eq_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eq',
            description: 'Filter notification policies for only those that are or are not active.'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunNotificationPolicyFilterIsActive',
    description: 'Filter by `FlowRunNotificationPolicy.is_active`.'
} as const;

export const $FlowRunNotificationPolicyUpdate = {
    properties: {
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        state_names: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State Names'
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        block_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Block Document Id'
        },
        message_template: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message Template'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunNotificationPolicyUpdate',
    description: 'Data used by the Prefect REST API to update a flow run notification policy.'
} as const;

export const $FlowRunPaginationResponse = {
    properties: {
        results: {
            items: {
                '$ref': '#/components/schemas/FlowRunResponse'
            },
            type: 'array',
            title: 'Results'
        },
        count: {
            type: 'integer',
            title: 'Count'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        pages: {
            type: 'integer',
            title: 'Pages'
        },
        page: {
            type: 'integer',
            title: 'Page'
        }
    },
    type: 'object',
    required: ['results', 'count', 'limit', 'pages', 'page'],
    title: 'FlowRunPaginationResponse'
} as const;

export const $FlowRunPolicy = {
    properties: {
        max_retries: {
            type: 'integer',
            title: 'Max Retries',
            description: 'The maximum number of retries. Field is not used. Please use `retries` instead.',
            default: 0,
            deprecated: true
        },
        retry_delay_seconds: {
            type: 'number',
            title: 'Retry Delay Seconds',
            description: 'The delay between retries. Field is not used. Please use `retry_delay` instead.',
            default: 0,
            deprecated: true
        },
        retries: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Retries',
            description: 'The number of retries.'
        },
        retry_delay: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Retry Delay',
            description: 'The delay time between retries, in seconds.'
        },
        pause_keys: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array',
                    uniqueItems: true
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pause Keys',
            description: 'Tracks pauses this run has observed.'
        },
        resuming: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Resuming',
            description: 'Indicates if this run is resuming from a pause.',
            default: false
        },
        retry_type: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['in_process', 'reschedule']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Retry Type',
            description: 'The type of retry this run is undergoing.'
        }
    },
    type: 'object',
    title: 'FlowRunPolicy',
    description: 'Defines of how a flow run should retry.'
} as const;

export const $FlowRunResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the flow run. Defaults to a random slug if not specified.',
            examples: ['my-flow-run']
        },
        flow_id: {
            type: 'string',
            format: 'uuid',
            title: 'Flow Id',
            description: 'The id of the flow being run.'
        },
        state_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State Id',
            description: "The id of the flow run's current state."
        },
        deployment_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deployment Id',
            description: 'The id of the deployment associated with this flow run, if available.'
        },
        deployment_version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deployment Version',
            description: 'The version of the deployment associated with this flow run.',
            examples: ['1.0']
        },
        work_queue_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Queue Id',
            description: "The id of the run's work pool queue."
        },
        work_queue_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Queue Name',
            description: 'The work queue that handled this flow run.'
        },
        flow_version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Version',
            description: 'The version of the flow executed in this flow run.',
            examples: ['1.0']
        },
        parameters: {
            type: 'object',
            title: 'Parameters',
            description: 'Parameters for the flow run.'
        },
        idempotency_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Idempotency Key',
            description: 'An optional idempotency key for the flow run. Used to ensure the same flow run is not created multiple times.'
        },
        context: {
            type: 'object',
            title: 'Context',
            description: 'Additional context for the flow run.',
            examples: [
                {
                    my_var: 'my_val'
                }
            ]
        },
        empirical_policy: {
            '$ref': '#/components/schemas/FlowRunPolicy'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of tags on the flow run',
            examples: [['tag-1', 'tag-2']]
        },
        labels: {
            additionalProperties: {
                anyOf: [
                    {
                        type: 'boolean'
                    },
                    {
                        type: 'integer'
                    },
                    {
                        type: 'number'
                    },
                    {
                        type: 'string'
                    }
                ]
            },
            type: 'object',
            title: 'Labels',
            description: 'A dictionary of key-value labels. Values can be strings, numbers, or booleans.',
            examples: [
                {
                    key: 'value1',
                    key2: 42
                }
            ]
        },
        parent_task_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parent Task Run Id',
            description: "If the flow run is a subflow, the id of the 'dummy' task in the parent flow used to track subflow state."
        },
        state_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StateType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The type of the current flow run state.'
        },
        state_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State Name',
            description: 'The name of the current flow run state.'
        },
        run_count: {
            type: 'integer',
            title: 'Run Count',
            description: 'The number of times the flow run was executed.',
            default: 0
        },
        expected_start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expected Start Time',
            description: "The flow run's expected start time."
        },
        next_scheduled_start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Scheduled Start Time',
            description: 'The next time the flow run is scheduled to start.'
        },
        start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Time',
            description: 'The actual start time.'
        },
        end_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Time',
            description: 'The actual end time.'
        },
        total_run_time: {
            type: 'number',
            title: 'Total Run Time',
            description: 'Total run time. If the flow run was executed multiple times, the time of each run will be summed.',
            default: 0
        },
        estimated_run_time: {
            type: 'number',
            title: 'Estimated Run Time',
            description: 'A real-time estimate of the total run time.',
            default: 0
        },
        estimated_start_time_delta: {
            type: 'number',
            title: 'Estimated Start Time Delta',
            description: 'The difference between actual and expected start time.',
            default: 0
        },
        auto_scheduled: {
            type: 'boolean',
            title: 'Auto Scheduled',
            description: 'Whether or not the flow run was automatically scheduled.',
            default: false
        },
        infrastructure_document_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Infrastructure Document Id',
            description: 'The block document defining infrastructure to use this flow run.'
        },
        infrastructure_pid: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Infrastructure Pid',
            description: 'The id of the flow run as returned by an infrastructure block.'
        },
        created_by: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CreatedBy'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Optional information about the creator of this flow run.'
        },
        work_pool_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Pool Id',
            description: "The id of the flow run's work pool."
        },
        work_pool_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Pool Name',
            description: "The name of the flow run's work pool.",
            examples: ['my-work-pool']
        },
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/State'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The current state of the flow run.'
        },
        job_variables: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Variables',
            description: 'Variables used as overrides in the base job template'
        }
    },
    type: 'object',
    required: ['flow_id', 'id', 'created', 'updated'],
    title: 'FlowRunResponse'
} as const;

export const $FlowRunSort = {
    type: 'string',
    enum: ['ID_DESC', 'START_TIME_ASC', 'START_TIME_DESC', 'EXPECTED_START_TIME_ASC', 'EXPECTED_START_TIME_DESC', 'NAME_ASC', 'NAME_DESC', 'NEXT_SCHEDULED_START_TIME_ASC', 'END_TIME_DESC'],
    title: 'FlowRunSort',
    description: 'Defines flow run sorting options.'
} as const;

export const $FlowRunUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        flow_version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Version'
        },
        parameters: {
            type: 'object',
            title: 'Parameters'
        },
        empirical_policy: {
            '$ref': '#/components/schemas/FlowRunPolicy'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags'
        },
        infrastructure_pid: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Infrastructure Pid'
        },
        job_variables: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Variables'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowRunUpdate',
    description: 'Data used by the Prefect REST API to update a flow run.'
} as const;

export const $FlowSort = {
    type: 'string',
    enum: ['CREATED_DESC', 'UPDATED_DESC', 'NAME_ASC', 'NAME_DESC'],
    title: 'FlowSort',
    description: 'Defines flow sorting options.'
} as const;

export const $FlowUpdate = {
    properties: {
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of flow tags',
            examples: [['tag-1', 'tag-2']]
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'FlowUpdate',
    description: 'Data used by the Prefect REST API to update a flow.'
} as const;

export const $GlobalConcurrencyLimitResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            description: 'Whether the global concurrency limit is active.',
            default: true
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the global concurrency limit.'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            description: 'The concurrency limit.'
        },
        active_slots: {
            type: 'integer',
            title: 'Active Slots',
            description: 'The number of active slots.'
        },
        slot_decay_per_second: {
            type: 'number',
            title: 'Slot Decay Per Second',
            description: 'The decay rate for active slots when used as a rate limit.',
            default: 2
        }
    },
    type: 'object',
    required: ['name', 'limit', 'active_slots', 'id', 'created', 'updated'],
    title: 'GlobalConcurrencyLimitResponse',
    description: 'A response object for global concurrency limits.'
} as const;

export const $Graph = {
    properties: {
        start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Time'
        },
        end_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Time'
        },
        root_node_ids: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Root Node Ids'
        },
        nodes: {
            items: {
                prefixItems: [
                    {
                        type: 'string',
                        format: 'uuid'
                    },
                    {
                        '$ref': '#/components/schemas/Node'
                    }
                ],
                type: 'array',
                maxItems: 2,
                minItems: 2
            },
            type: 'array',
            title: 'Nodes'
        },
        artifacts: {
            items: {
                '$ref': '#/components/schemas/GraphArtifact'
            },
            type: 'array',
            title: 'Artifacts'
        },
        states: {
            items: {
                '$ref': '#/components/schemas/GraphState'
            },
            type: 'array',
            title: 'States'
        }
    },
    type: 'object',
    required: ['start_time', 'end_time', 'root_node_ids', 'nodes', 'artifacts', 'states'],
    title: 'Graph'
} as const;

export const $GraphArtifact = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            type: 'string',
            format: 'date-time',
            title: 'Created'
        },
        key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Key'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        is_latest: {
            type: 'boolean',
            title: 'Is Latest'
        },
        data: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        }
    },
    type: 'object',
    required: ['id', 'created', 'key', 'type', 'is_latest', 'data'],
    title: 'GraphArtifact'
} as const;

export const $GraphState = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Timestamp'
        },
        type: {
            '$ref': '#/components/schemas/StateType'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['id', 'timestamp', 'type', 'name'],
    title: 'GraphState'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $HistoryResponse = {
    properties: {
        interval_start: {
            type: 'string',
            format: 'date-time',
            title: 'Interval Start',
            description: 'The start date of the interval.'
        },
        interval_end: {
            type: 'string',
            format: 'date-time',
            title: 'Interval End',
            description: 'The end date of the interval.'
        },
        states: {
            items: {
                '$ref': '#/components/schemas/HistoryResponseState'
            },
            type: 'array',
            title: 'States',
            description: 'A list of state histories during the interval.'
        }
    },
    type: 'object',
    required: ['interval_start', 'interval_end', 'states'],
    title: 'HistoryResponse',
    description: 'Represents a history of aggregation states over an interval'
} as const;

export const $HistoryResponseState = {
    properties: {
        state_type: {
            '$ref': '#/components/schemas/StateType',
            description: 'The state type.'
        },
        state_name: {
            type: 'string',
            title: 'State Name',
            description: 'The state name.'
        },
        count_runs: {
            type: 'integer',
            title: 'Count Runs',
            description: 'The number of runs in the specified state during the interval.'
        },
        sum_estimated_run_time: {
            type: 'number',
            title: 'Sum Estimated Run Time',
            description: 'The total estimated run time of all runs during the interval.'
        },
        sum_estimated_lateness: {
            type: 'number',
            title: 'Sum Estimated Lateness',
            description: 'The sum of differences between actual and expected start time during the interval.'
        }
    },
    type: 'object',
    required: ['state_type', 'state_name', 'count_runs', 'sum_estimated_run_time', 'sum_estimated_lateness'],
    title: 'HistoryResponseState',
    description: "Represents a single state's history over an interval."
} as const;

export const $IntervalSchedule = {
    properties: {
        interval: {
            type: 'number',
            title: 'Interval'
        },
        anchor_date: {
            type: 'string',
            format: 'date-time',
            title: 'Anchor Date',
            examples: ['2020-01-01T00:00:00Z']
        },
        timezone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Timezone',
            examples: ['America/New_York']
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['interval'],
    title: 'IntervalSchedule',
    description: `A schedule formed by adding \`interval\` increments to an \`anchor_date\`. If no
\`anchor_date\` is supplied, the current UTC time is used.  If a
timezone-naive datetime is provided for \`anchor_date\`, it is assumed to be
in the schedule's timezone (or UTC). Even if supplied with an IANA timezone,
anchor dates are always stored as UTC offsets, so a \`timezone\` can be
provided to determine localization behaviors like DST boundary handling. If
none is provided it will be inferred from the anchor date.

NOTE: If the \`IntervalSchedule\` \`anchor_date\` or \`timezone\` is provided in a
DST-observing timezone, then the schedule will adjust itself appropriately.
Intervals greater than 24 hours will follow DST conventions, while intervals
of less than 24 hours will follow UTC intervals. For example, an hourly
schedule will fire every UTC hour, even across DST boundaries. When clocks
are set back, this will result in two runs that *appear* to both be
scheduled for 1am local time, even though they are an hour apart in UTC
time. For longer intervals, like a daily schedule, the interval schedule
will adjust for DST boundaries so that the clock-hour remains constant. This
means that a daily schedule that always fires at 9am will observe DST and
continue to fire at 9am in the local time zone.

Args:
    interval (datetime.timedelta): an interval to schedule on.
    anchor_date (DateTime, optional): an anchor date to schedule increments against;
        if not provided, the current timestamp will be used.
    timezone (str, optional): a valid timezone string.`
} as const;

export const $Log = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'The logger name.'
        },
        level: {
            type: 'integer',
            title: 'Level',
            description: 'The log level.'
        },
        message: {
            type: 'string',
            title: 'Message',
            description: 'The log message.'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Timestamp',
            description: 'The log timestamp.'
        },
        flow_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Run Id',
            description: 'The flow run ID associated with the log.'
        },
        task_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Task Run Id',
            description: 'The task run ID associated with the log.'
        }
    },
    type: 'object',
    required: ['name', 'level', 'message', 'timestamp', 'id', 'created', 'updated'],
    title: 'Log',
    description: 'An ORM representation of log data.'
} as const;

export const $LogCreate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'The logger name.'
        },
        level: {
            type: 'integer',
            title: 'Level',
            description: 'The log level.'
        },
        message: {
            type: 'string',
            title: 'Message',
            description: 'The log message.'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Timestamp',
            description: 'The log timestamp.'
        },
        flow_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Run Id'
        },
        task_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Task Run Id'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name', 'level', 'message', 'timestamp'],
    title: 'LogCreate',
    description: 'Data used by the Prefect REST API to create a log.'
} as const;

export const $LogFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        level: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LogFilterLevel'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Log.level`'
        },
        timestamp: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LogFilterTimestamp'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Log.timestamp`'
        },
        flow_run_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LogFilterFlowRunId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Log.flow_run_id`'
        },
        task_run_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LogFilterTaskRunId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Log.task_run_id`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'LogFilter',
    description: 'Filter logs. Only logs matching all criteria will be returned'
} as const;

export const $LogFilterFlowRunId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of flow run IDs to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'LogFilterFlowRunId',
    description: 'Filter by `Log.flow_run_id`.'
} as const;

export const $LogFilterLevel = {
    properties: {
        ge_: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ge',
            description: 'Include logs with a level greater than or equal to this level',
            examples: [20]
        },
        le_: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Le',
            description: 'Include logs with a level less than or equal to this level',
            examples: [50]
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'LogFilterLevel',
    description: 'Filter by `Log.level`.'
} as const;

export const $LogFilterTaskRunId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of task run IDs to include'
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include logs without a task run id'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'LogFilterTaskRunId',
    description: 'Filter by `Log.task_run_id`.'
} as const;

export const $LogFilterTimestamp = {
    properties: {
        before_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Before',
            description: 'Only include logs with a timestamp at or before this time'
        },
        after_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'After',
            description: 'Only include logs with a timestamp at or after this time'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'LogFilterTimestamp',
    description: 'Filter by `Log.timestamp`.'
} as const;

export const $LogSort = {
    type: 'string',
    enum: ['TIMESTAMP_ASC', 'TIMESTAMP_DESC'],
    title: 'LogSort',
    description: 'Defines log sorting options.'
} as const;

export const $MinimalConcurrencyLimitResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        }
    },
    type: 'object',
    required: ['id', 'name', 'limit'],
    title: 'MinimalConcurrencyLimitResponse'
} as const;

export const $Node = {
    properties: {
        kind: {
            type: 'string',
            enum: ['flow-run', 'task-run'],
            title: 'Kind'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        label: {
            type: 'string',
            title: 'Label'
        },
        state_type: {
            '$ref': '#/components/schemas/StateType'
        },
        start_time: {
            type: 'string',
            format: 'date-time',
            title: 'Start Time'
        },
        end_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Time'
        },
        parents: {
            items: {
                '$ref': '#/components/schemas/Edge'
            },
            type: 'array',
            title: 'Parents'
        },
        children: {
            items: {
                '$ref': '#/components/schemas/Edge'
            },
            type: 'array',
            title: 'Children'
        },
        encapsulating: {
            items: {
                '$ref': '#/components/schemas/Edge'
            },
            type: 'array',
            title: 'Encapsulating'
        },
        artifacts: {
            items: {
                '$ref': '#/components/schemas/GraphArtifact'
            },
            type: 'array',
            title: 'Artifacts'
        }
    },
    type: 'object',
    required: ['kind', 'id', 'label', 'state_type', 'start_time', 'end_time', 'parents', 'children', 'encapsulating', 'artifacts'],
    title: 'Node'
} as const;

export const $Operator = {
    type: 'string',
    enum: ['and_', 'or_'],
    title: 'Operator',
    description: 'Operators for combining filter criteria.'
} as const;

export const $OrchestrationResult = {
    properties: {
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/State'
                },
                {
                    type: 'null'
                }
            ]
        },
        status: {
            '$ref': '#/components/schemas/SetStateStatus'
        },
        details: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StateAcceptDetails'
                },
                {
                    '$ref': '#/components/schemas/StateWaitDetails'
                },
                {
                    '$ref': '#/components/schemas/StateRejectDetails'
                },
                {
                    '$ref': '#/components/schemas/StateAbortDetails'
                }
            ],
            title: 'Details'
        }
    },
    type: 'object',
    required: ['state', 'status', 'details'],
    title: 'OrchestrationResult',
    description: 'A container for the output of state orchestration.'
} as const;

export const $Parameter = {
    properties: {
        input_type: {
            type: 'string',
            const: 'parameter',
            title: 'Input Type',
            default: 'parameter'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'Parameter',
    description: 'Represents a parameter input to a task run.'
} as const;

export const $PauseAutomation = {
    properties: {
        type: {
            type: 'string',
            const: 'pause-automation',
            title: 'Type',
            default: 'pause-automation'
        },
        source: {
            type: 'string',
            enum: ['selected', 'inferred'],
            title: 'Source',
            description: "Whether this Action applies to a specific selected automation (given by `automation_id`), or to an automation that is inferred from the triggering event.  If the source is 'inferred', the `automation_id` may not be set.  If the source is 'selected', the `automation_id` must be set.",
            default: 'selected'
        },
        automation_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Automation Id',
            description: 'The identifier of the automation to act on'
        }
    },
    type: 'object',
    title: 'PauseAutomation',
    description: 'Pauses a Work Queue'
} as const;

export const $PauseDeployment = {
    properties: {
        type: {
            type: 'string',
            const: 'pause-deployment',
            title: 'Type',
            default: 'pause-deployment'
        },
        source: {
            type: 'string',
            enum: ['selected', 'inferred'],
            title: 'Source',
            description: "Whether this Action applies to a specific selected deployment (given by `deployment_id`), or to a deployment that is inferred from the triggering event.  If the source is 'inferred', the `deployment_id` may not be set.  If the source is 'selected', the `deployment_id` must be set.",
            default: 'selected'
        },
        deployment_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deployment Id',
            description: 'The identifier of the deployment'
        }
    },
    type: 'object',
    title: 'PauseDeployment',
    description: 'Pauses the given Deployment'
} as const;

export const $PauseWorkPool = {
    properties: {
        type: {
            type: 'string',
            const: 'pause-work-pool',
            title: 'Type',
            default: 'pause-work-pool'
        },
        source: {
            type: 'string',
            enum: ['selected', 'inferred'],
            title: 'Source',
            description: "Whether this Action applies to a specific selected work pool (given by `work_pool_id`), or to a work pool that is inferred from the triggering event.  If the source is 'inferred', the `work_pool_id` may not be set.  If the source is 'selected', the `work_pool_id` must be set.",
            default: 'selected'
        },
        work_pool_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Pool Id',
            description: 'The identifier of the work pool to pause'
        }
    },
    type: 'object',
    title: 'PauseWorkPool',
    description: 'Pauses a Work Pool'
} as const;

export const $PauseWorkQueue = {
    properties: {
        type: {
            type: 'string',
            const: 'pause-work-queue',
            title: 'Type',
            default: 'pause-work-queue'
        },
        source: {
            type: 'string',
            enum: ['selected', 'inferred'],
            title: 'Source',
            description: "Whether this Action applies to a specific selected work queue (given by `work_queue_id`), or to a work queue that is inferred from the triggering event.  If the source is 'inferred', the `work_queue_id` may not be set.  If the source is 'selected', the `work_queue_id` must be set.",
            default: 'selected'
        },
        work_queue_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Queue Id',
            description: 'The identifier of the work queue to pause'
        }
    },
    type: 'object',
    title: 'PauseWorkQueue',
    description: 'Pauses a Work Queue'
} as const;

export const $QueueFilter = {
    properties: {
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags',
            description: 'Only include flow runs with these tags in the work queue.'
        },
        deployment_ids: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deployment Ids',
            description: 'Only include flow runs from these deployments in the work queue.'
        }
    },
    type: 'object',
    title: 'QueueFilter',
    description: 'Filter criteria definition for a work queue.'
} as const;

export const $RRuleSchedule = {
    properties: {
        rrule: {
            type: 'string',
            title: 'Rrule'
        },
        timezone: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'Africa/Abidjan|Africa/Accra|Africa/Addis_Ababa|Africa/Algiers|Africa/Asmara|Africa/Asmera|Africa/Bamako|Africa/Bangui|Africa/Banjul|Africa/Bissau|Africa/Blantyre|Africa/Brazzaville|Africa/Bujumbura|Africa/Cairo|Africa/Casablanca|Africa/Ceuta|Africa/Conakry|Africa/Dakar|Africa/Dar_es_Salaam|Africa/Djibouti|Africa/Douala|Africa/El_Aaiun|Africa/Freetown|Africa/Gaborone|Africa/Harare|Africa/Johannesburg|Africa/Juba|Africa/Kampala|Africa/Khartoum|Africa/Kigali|Africa/Kinshasa|Africa/Lagos|Africa/Libreville|Africa/Lome|Africa/Luanda|Africa/Lubumbashi|Africa/Lusaka|Africa/Malabo|Africa/Maputo|Africa/Maseru|Africa/Mbabane|Africa/Mogadishu|Africa/Monrovia|Africa/Nairobi|Africa/Ndjamena|Africa/Niamey|Africa/Nouakchott|Africa/Ouagadougou|Africa/Porto-Novo|Africa/Sao_Tome|Africa/Timbuktu|Africa/Tripoli|Africa/Tunis|Africa/Windhoek|America/Adak|America/Anchorage|America/Anguilla|America/Antigua|America/Araguaina|America/Argentina/Buenos_Aires|America/Argentina/Catamarca|America/Argentina/ComodRivadavia|America/Argentina/Cordoba|America/Argentina/Jujuy|America/Argentina/La_Rioja|America/Argentina/Mendoza|America/Argentina/Rio_Gallegos|America/Argentina/Salta|America/Argentina/San_Juan|America/Argentina/San_Luis|America/Argentina/Tucuman|America/Argentina/Ushuaia|America/Aruba|America/Asuncion|America/Atikokan|America/Atka|America/Bahia|America/Bahia_Banderas|America/Barbados|America/Belem|America/Belize|America/Blanc-Sablon|America/Boa_Vista|America/Bogota|America/Boise|America/Buenos_Aires|America/Cambridge_Bay|America/Campo_Grande|America/Cancun|America/Caracas|America/Catamarca|America/Cayenne|America/Cayman|America/Chicago|America/Chihuahua|America/Ciudad_Juarez|America/Coral_Harbour|America/Cordoba|America/Costa_Rica|America/Creston|America/Cuiaba|America/Curacao|America/Danmarkshavn|America/Dawson|America/Dawson_Creek|America/Denver|America/Detroit|America/Dominica|America/Edmonton|America/Eirunepe|America/El_Salvador|America/Ensenada|America/Fort_Nelson|America/Fort_Wayne|America/Fortaleza|America/Glace_Bay|America/Godthab|America/Goose_Bay|America/Grand_Turk|America/Grenada|America/Guadeloupe|America/Guatemala|America/Guayaquil|America/Guyana|America/Halifax|America/Havana|America/Hermosillo|America/Indiana/Indianapolis|America/Indiana/Knox|America/Indiana/Marengo|America/Indiana/Petersburg|America/Indiana/Tell_City|America/Indiana/Vevay|America/Indiana/Vincennes|America/Indiana/Winamac|America/Indianapolis|America/Inuvik|America/Iqaluit|America/Jamaica|America/Jujuy|America/Juneau|America/Kentucky/Louisville|America/Kentucky/Monticello|America/Knox_IN|America/Kralendijk|America/La_Paz|America/Lima|America/Los_Angeles|America/Louisville|America/Lower_Princes|America/Maceio|America/Managua|America/Manaus|America/Marigot|America/Martinique|America/Matamoros|America/Mazatlan|America/Mendoza|America/Menominee|America/Merida|America/Metlakatla|America/Mexico_City|America/Miquelon|America/Moncton|America/Monterrey|America/Montevideo|America/Montreal|America/Montserrat|America/Nassau|America/New_York|America/Nipigon|America/Nome|America/Noronha|America/North_Dakota/Beulah|America/North_Dakota/Center|America/North_Dakota/New_Salem|America/Nuuk|America/Ojinaga|America/Panama|America/Pangnirtung|America/Paramaribo|America/Phoenix|America/Port-au-Prince|America/Port_of_Spain|America/Porto_Acre|America/Porto_Velho|America/Puerto_Rico|America/Punta_Arenas|America/Rainy_River|America/Rankin_Inlet|America/Recife|America/Regina|America/Resolute|America/Rio_Branco|America/Rosario|America/Santa_Isabel|America/Santarem|America/Santiago|America/Santo_Domingo|America/Sao_Paulo|America/Scoresbysund|America/Shiprock|America/Sitka|America/St_Barthelemy|America/St_Johns|America/St_Kitts|America/St_Lucia|America/St_Thomas|America/St_Vincent|America/Swift_Current|America/Tegucigalpa|America/Thule|America/Thunder_Bay|America/Tijuana|America/Toronto|America/Tortola|America/Vancouver|America/Virgin|America/Whitehorse|America/Winnipeg|America/Yakutat|America/Yellowknife|Antarctica/Casey|Antarctica/Davis|Antarctica/DumontDUrville|Antarctica/Macquarie|Antarctica/Mawson|Antarctica/McMurdo|Antarctica/Palmer|Antarctica/Rothera|Antarctica/South_Pole|Antarctica/Syowa|Antarctica/Troll|Antarctica/Vostok|Arctic/Longyearbyen|Asia/Aden|Asia/Almaty|Asia/Amman|Asia/Anadyr|Asia/Aqtau|Asia/Aqtobe|Asia/Ashgabat|Asia/Ashkhabad|Asia/Atyrau|Asia/Baghdad|Asia/Bahrain|Asia/Baku|Asia/Bangkok|Asia/Barnaul|Asia/Beirut|Asia/Bishkek|Asia/Brunei|Asia/Calcutta|Asia/Chita|Asia/Choibalsan|Asia/Chongqing|Asia/Chungking|Asia/Colombo|Asia/Dacca|Asia/Damascus|Asia/Dhaka|Asia/Dili|Asia/Dubai|Asia/Dushanbe|Asia/Famagusta|Asia/Gaza|Asia/Harbin|Asia/Hebron|Asia/Ho_Chi_Minh|Asia/Hong_Kong|Asia/Hovd|Asia/Irkutsk|Asia/Istanbul|Asia/Jakarta|Asia/Jayapura|Asia/Jerusalem|Asia/Kabul|Asia/Kamchatka|Asia/Karachi|Asia/Kashgar|Asia/Kathmandu|Asia/Katmandu|Asia/Khandyga|Asia/Kolkata|Asia/Krasnoyarsk|Asia/Kuala_Lumpur|Asia/Kuching|Asia/Kuwait|Asia/Macao|Asia/Macau|Asia/Magadan|Asia/Makassar|Asia/Manila|Asia/Muscat|Asia/Nicosia|Asia/Novokuznetsk|Asia/Novosibirsk|Asia/Omsk|Asia/Oral|Asia/Phnom_Penh|Asia/Pontianak|Asia/Pyongyang|Asia/Qatar|Asia/Qostanay|Asia/Qyzylorda|Asia/Rangoon|Asia/Riyadh|Asia/Saigon|Asia/Sakhalin|Asia/Samarkand|Asia/Seoul|Asia/Shanghai|Asia/Singapore|Asia/Srednekolymsk|Asia/Taipei|Asia/Tashkent|Asia/Tbilisi|Asia/Tehran|Asia/Tel_Aviv|Asia/Thimbu|Asia/Thimphu|Asia/Tokyo|Asia/Tomsk|Asia/Ujung_Pandang|Asia/Ulaanbaatar|Asia/Ulan_Bator|Asia/Urumqi|Asia/Ust-Nera|Asia/Vientiane|Asia/Vladivostok|Asia/Yakutsk|Asia/Yangon|Asia/Yekaterinburg|Asia/Yerevan|Atlantic/Azores|Atlantic/Bermuda|Atlantic/Canary|Atlantic/Cape_Verde|Atlantic/Faeroe|Atlantic/Faroe|Atlantic/Jan_Mayen|Atlantic/Madeira|Atlantic/Reykjavik|Atlantic/South_Georgia|Atlantic/St_Helena|Atlantic/Stanley|Australia/ACT|Australia/Adelaide|Australia/Brisbane|Australia/Broken_Hill|Australia/Canberra|Australia/Currie|Australia/Darwin|Australia/Eucla|Australia/Hobart|Australia/LHI|Australia/Lindeman|Australia/Lord_Howe|Australia/Melbourne|Australia/NSW|Australia/North|Australia/Perth|Australia/Queensland|Australia/South|Australia/Sydney|Australia/Tasmania|Australia/Victoria|Australia/West|Australia/Yancowinna|Brazil/Acre|Brazil/DeNoronha|Brazil/East|Brazil/West|CET|CST6CDT|Canada/Atlantic|Canada/Central|Canada/Eastern|Canada/Mountain|Canada/Newfoundland|Canada/Pacific|Canada/Saskatchewan|Canada/Yukon|Chile/Continental|Chile/EasterIsland|Cuba|EET|EST|EST5EDT|Egypt|Eire|Etc/GMT|Etc/GMT+0|Etc/GMT+1|Etc/GMT+10|Etc/GMT+11|Etc/GMT+12|Etc/GMT+2|Etc/GMT+3|Etc/GMT+4|Etc/GMT+5|Etc/GMT+6|Etc/GMT+7|Etc/GMT+8|Etc/GMT+9|Etc/GMT-0|Etc/GMT-1|Etc/GMT-10|Etc/GMT-11|Etc/GMT-12|Etc/GMT-13|Etc/GMT-14|Etc/GMT-2|Etc/GMT-3|Etc/GMT-4|Etc/GMT-5|Etc/GMT-6|Etc/GMT-7|Etc/GMT-8|Etc/GMT-9|Etc/GMT0|Etc/Greenwich|Etc/UCT|Etc/UTC|Etc/Universal|Etc/Zulu|Europe/Amsterdam|Europe/Andorra|Europe/Astrakhan|Europe/Athens|Europe/Belfast|Europe/Belgrade|Europe/Berlin|Europe/Bratislava|Europe/Brussels|Europe/Bucharest|Europe/Budapest|Europe/Busingen|Europe/Chisinau|Europe/Copenhagen|Europe/Dublin|Europe/Gibraltar|Europe/Guernsey|Europe/Helsinki|Europe/Isle_of_Man|Europe/Istanbul|Europe/Jersey|Europe/Kaliningrad|Europe/Kiev|Europe/Kirov|Europe/Kyiv|Europe/Lisbon|Europe/Ljubljana|Europe/London|Europe/Luxembourg|Europe/Madrid|Europe/Malta|Europe/Mariehamn|Europe/Minsk|Europe/Monaco|Europe/Moscow|Europe/Nicosia|Europe/Oslo|Europe/Paris|Europe/Podgorica|Europe/Prague|Europe/Riga|Europe/Rome|Europe/Samara|Europe/San_Marino|Europe/Sarajevo|Europe/Saratov|Europe/Simferopol|Europe/Skopje|Europe/Sofia|Europe/Stockholm|Europe/Tallinn|Europe/Tirane|Europe/Tiraspol|Europe/Ulyanovsk|Europe/Uzhgorod|Europe/Vaduz|Europe/Vatican|Europe/Vienna|Europe/Vilnius|Europe/Volgograd|Europe/Warsaw|Europe/Zagreb|Europe/Zaporozhye|Europe/Zurich|Factory|GB|GB-Eire|GMT|GMT+0|GMT-0|GMT0|Greenwich|HST|Hongkong|Iceland|Indian/Antananarivo|Indian/Chagos|Indian/Christmas|Indian/Cocos|Indian/Comoro|Indian/Kerguelen|Indian/Mahe|Indian/Maldives|Indian/Mauritius|Indian/Mayotte|Indian/Reunion|Iran|Israel|Jamaica|Japan|Kwajalein|Libya|MET|MST|MST7MDT|Mexico/BajaNorte|Mexico/BajaSur|Mexico/General|NZ|NZ-CHAT|Navajo|PRC|PST8PDT|Pacific/Apia|Pacific/Auckland|Pacific/Bougainville|Pacific/Chatham|Pacific/Chuuk|Pacific/Easter|Pacific/Efate|Pacific/Enderbury|Pacific/Fakaofo|Pacific/Fiji|Pacific/Funafuti|Pacific/Galapagos|Pacific/Gambier|Pacific/Guadalcanal|Pacific/Guam|Pacific/Honolulu|Pacific/Johnston|Pacific/Kanton|Pacific/Kiritimati|Pacific/Kosrae|Pacific/Kwajalein|Pacific/Majuro|Pacific/Marquesas|Pacific/Midway|Pacific/Nauru|Pacific/Niue|Pacific/Norfolk|Pacific/Noumea|Pacific/Pago_Pago|Pacific/Palau|Pacific/Pitcairn|Pacific/Pohnpei|Pacific/Ponape|Pacific/Port_Moresby|Pacific/Rarotonga|Pacific/Saipan|Pacific/Samoa|Pacific/Tahiti|Pacific/Tarawa|Pacific/Tongatapu|Pacific/Truk|Pacific/Wake|Pacific/Wallis|Pacific/Yap|Poland|Portugal|ROC|ROK|Singapore|Turkey|UCT|US/Alaska|US/Aleutian|US/Arizona|US/Central|US/East-Indiana|US/Eastern|US/Hawaii|US/Indiana-Starke|US/Michigan|US/Mountain|US/Pacific|US/Samoa|UTC|Universal|W-SU|WET|Zulu',
                    default: 'UTC'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Timezone',
            default: 'UTC',
            examples: ['America/New_York']
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['rrule'],
    title: 'RRuleSchedule',
    description: `RRule schedule, based on the iCalendar standard
([RFC 5545](https://datatracker.ietf.org/doc/html/rfc5545)) as
implemented in \`dateutils.rrule\`.

RRules are appropriate for any kind of calendar-date manipulation, including
irregular intervals, repetition, exclusions, week day or day-of-month
adjustments, and more.

Note that as a calendar-oriented standard, \`RRuleSchedules\` are sensitive to
to the initial timezone provided. A 9am daily schedule with a daylight saving
time-aware start date will maintain a local 9am time through DST boundaries;
a 9am daily schedule with a UTC start date will maintain a 9am UTC time.

Args:
    rrule (str): a valid RRule string
    timezone (str, optional): a valid timezone string`
} as const;

export const $ReceivedEvent = {
    properties: {
        occurred: {
            type: 'string',
            format: 'date-time',
            title: 'Occurred',
            description: "When the event happened from the sender's perspective"
        },
        event: {
            type: 'string',
            title: 'Event',
            description: 'The name of the event that happened'
        },
        resource: {
            '$ref': '#/components/schemas/Resource',
            description: 'The primary Resource this event concerns'
        },
        related: {
            items: {
                '$ref': '#/components/schemas/RelatedResource'
            },
            type: 'array',
            title: 'Related',
            description: 'A list of additional Resources involved in this event'
        },
        payload: {
            type: 'object',
            title: 'Payload',
            description: 'An open-ended set of data describing what happened'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: 'The client-provided identifier of this event'
        },
        follows: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Follows',
            description: 'The ID of an event that is known to have occurred prior to this one. If set, this may be used to establish a more precise ordering of causally-related events when they occur close enough together in time that the system may receive them out-of-order.'
        },
        received: {
            type: 'string',
            format: 'date-time',
            title: 'Received',
            description: 'When the event was received by Prefect Cloud'
        }
    },
    type: 'object',
    required: ['occurred', 'event', 'resource', 'id'],
    title: 'ReceivedEvent',
    description: `The server-side view of an event that has happened to a Resource after it has
been received by the server`
} as const;

export const $RelatedResource = {
    additionalProperties: {
        type: 'string'
    },
    type: 'object',
    title: 'RelatedResource',
    description: 'A Resource with a specific role in an Event'
} as const;

export const $Resource = {
    additionalProperties: {
        type: 'string'
    },
    type: 'object',
    title: 'Resource',
    description: 'An observable business object of interest to the user'
} as const;

export const $ResourceSpecification = {
    additionalProperties: {
        anyOf: [
            {
                type: 'string'
            },
            {
                items: {
                    type: 'string'
                },
                type: 'array'
            }
        ]
    },
    type: 'object',
    title: 'ResourceSpecification'
} as const;

export const $ResumeAutomation = {
    properties: {
        type: {
            type: 'string',
            const: 'resume-automation',
            title: 'Type',
            default: 'resume-automation'
        },
        source: {
            type: 'string',
            enum: ['selected', 'inferred'],
            title: 'Source',
            description: "Whether this Action applies to a specific selected automation (given by `automation_id`), or to an automation that is inferred from the triggering event.  If the source is 'inferred', the `automation_id` may not be set.  If the source is 'selected', the `automation_id` must be set.",
            default: 'selected'
        },
        automation_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Automation Id',
            description: 'The identifier of the automation to act on'
        }
    },
    type: 'object',
    title: 'ResumeAutomation',
    description: 'Resumes a Work Queue'
} as const;

export const $ResumeDeployment = {
    properties: {
        type: {
            type: 'string',
            const: 'resume-deployment',
            title: 'Type',
            default: 'resume-deployment'
        },
        source: {
            type: 'string',
            enum: ['selected', 'inferred'],
            title: 'Source',
            description: "Whether this Action applies to a specific selected deployment (given by `deployment_id`), or to a deployment that is inferred from the triggering event.  If the source is 'inferred', the `deployment_id` may not be set.  If the source is 'selected', the `deployment_id` must be set.",
            default: 'selected'
        },
        deployment_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deployment Id',
            description: 'The identifier of the deployment'
        }
    },
    type: 'object',
    title: 'ResumeDeployment',
    description: 'Resumes the given Deployment'
} as const;

export const $ResumeFlowRun = {
    properties: {
        type: {
            type: 'string',
            const: 'resume-flow-run',
            title: 'Type',
            default: 'resume-flow-run'
        }
    },
    type: 'object',
    title: 'ResumeFlowRun',
    description: 'Resumes a paused or suspended flow run associated with the trigger'
} as const;

export const $ResumeWorkPool = {
    properties: {
        type: {
            type: 'string',
            const: 'resume-work-pool',
            title: 'Type',
            default: 'resume-work-pool'
        },
        source: {
            type: 'string',
            enum: ['selected', 'inferred'],
            title: 'Source',
            description: "Whether this Action applies to a specific selected work pool (given by `work_pool_id`), or to a work pool that is inferred from the triggering event.  If the source is 'inferred', the `work_pool_id` may not be set.  If the source is 'selected', the `work_pool_id` must be set.",
            default: 'selected'
        },
        work_pool_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Pool Id',
            description: 'The identifier of the work pool to pause'
        }
    },
    type: 'object',
    title: 'ResumeWorkPool',
    description: 'Resumes a Work Pool'
} as const;

export const $ResumeWorkQueue = {
    properties: {
        type: {
            type: 'string',
            const: 'resume-work-queue',
            title: 'Type',
            default: 'resume-work-queue'
        },
        source: {
            type: 'string',
            enum: ['selected', 'inferred'],
            title: 'Source',
            description: "Whether this Action applies to a specific selected work queue (given by `work_queue_id`), or to a work queue that is inferred from the triggering event.  If the source is 'inferred', the `work_queue_id` may not be set.  If the source is 'selected', the `work_queue_id` must be set.",
            default: 'selected'
        },
        work_queue_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Queue Id',
            description: 'The identifier of the work queue to pause'
        }
    },
    type: 'object',
    title: 'ResumeWorkQueue',
    description: 'Resumes a Work Queue'
} as const;

export const $RunDeployment = {
    properties: {
        type: {
            type: 'string',
            const: 'run-deployment',
            title: 'Type',
            default: 'run-deployment'
        },
        source: {
            type: 'string',
            enum: ['selected', 'inferred'],
            title: 'Source',
            description: "Whether this Action applies to a specific selected deployment (given by `deployment_id`), or to a deployment that is inferred from the triggering event.  If the source is 'inferred', the `deployment_id` may not be set.  If the source is 'selected', the `deployment_id` must be set.",
            default: 'selected'
        },
        deployment_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deployment Id',
            description: 'The identifier of the deployment'
        },
        parameters: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parameters',
            description: "The parameters to pass to the deployment, or None to use the deployment's default parameters"
        },
        job_variables: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Variables',
            description: "The job variables to pass to the created flow run, or None to use the deployment's default job variables"
        }
    },
    type: 'object',
    title: 'RunDeployment',
    description: 'Runs the given deployment with the given parameters'
} as const;

export const $SavedSearch = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the saved search.'
        },
        filters: {
            items: {
                '$ref': '#/components/schemas/SavedSearchFilter'
            },
            type: 'array',
            title: 'Filters',
            description: 'The filter set for the saved search.'
        }
    },
    type: 'object',
    required: ['name', 'id', 'created', 'updated'],
    title: 'SavedSearch',
    description: 'An ORM representation of saved search data. Represents a set of filter criteria.'
} as const;

export const $SavedSearchCreate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the saved search.'
        },
        filters: {
            items: {
                '$ref': '#/components/schemas/SavedSearchFilter'
            },
            type: 'array',
            title: 'Filters',
            description: 'The filter set for the saved search.'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name'],
    title: 'SavedSearchCreate',
    description: 'Data used by the Prefect REST API to create a saved search.'
} as const;

export const $SavedSearchFilter = {
    properties: {
        object: {
            type: 'string',
            title: 'Object',
            description: 'The object over which to filter.'
        },
        property: {
            type: 'string',
            title: 'Property',
            description: 'The property of the object on which to filter.'
        },
        type: {
            type: 'string',
            title: 'Type',
            description: 'The type of the property.'
        },
        operation: {
            type: 'string',
            title: 'Operation',
            description: 'The operator to apply to the object. For example, `equals`.'
        },
        value: {
            title: 'Value',
            description: 'A JSON-compatible value for the filter.'
        }
    },
    type: 'object',
    required: ['object', 'property', 'type', 'operation', 'value'],
    title: 'SavedSearchFilter',
    description: 'A filter for a saved search model. Intended for use by the Prefect UI.'
} as const;

export const $SendNotification = {
    properties: {
        type: {
            type: 'string',
            const: 'send-notification',
            title: 'Type',
            default: 'send-notification'
        },
        block_document_id: {
            type: 'string',
            format: 'uuid',
            title: 'Block Document Id',
            description: 'The identifier of the notification block to use'
        },
        subject: {
            type: 'string',
            title: 'Subject',
            default: 'Prefect automated notification'
        },
        body: {
            type: 'string',
            title: 'Body',
            description: 'The text of the notification to send'
        }
    },
    type: 'object',
    required: ['block_document_id', 'body'],
    title: 'SendNotification',
    description: 'Send a notification when an Automation is triggered'
} as const;

export const $SequenceTrigger_Input = {
    properties: {
        type: {
            type: 'string',
            const: 'sequence',
            title: 'Type',
            default: 'sequence'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: 'The unique ID of this trigger'
        },
        triggers: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/EventTrigger'
                    },
                    {
                        '$ref': '#/components/schemas/CompoundTrigger-Input'
                    },
                    {
                        '$ref': '#/components/schemas/SequenceTrigger-Input'
                    }
                ]
            },
            type: 'array',
            title: 'Triggers'
        },
        within: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Within'
        }
    },
    type: 'object',
    required: ['triggers', 'within'],
    title: 'SequenceTrigger',
    description: `A composite trigger that requires some number of triggers to have fired
within the given time period in a specific order`
} as const;

export const $SequenceTrigger_Output = {
    properties: {
        type: {
            type: 'string',
            const: 'sequence',
            title: 'Type',
            default: 'sequence'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: 'The unique ID of this trigger'
        },
        triggers: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/EventTrigger'
                    },
                    {
                        '$ref': '#/components/schemas/CompoundTrigger-Output'
                    },
                    {
                        '$ref': '#/components/schemas/SequenceTrigger-Output'
                    }
                ]
            },
            type: 'array',
            title: 'Triggers'
        },
        within: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Within'
        }
    },
    type: 'object',
    required: ['triggers', 'within'],
    title: 'SequenceTrigger',
    description: `A composite trigger that requires some number of triggers to have fired
within the given time period in a specific order`
} as const;

export const $SetStateStatus = {
    type: 'string',
    enum: ['ACCEPT', 'REJECT', 'ABORT', 'WAIT'],
    title: 'SetStateStatus',
    description: 'Enumerates return statuses for setting run states.'
} as const;

export const $Settings = {} as const;

export const $SimpleFlowRun = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: 'The flow run id.'
        },
        state_type: {
            '$ref': '#/components/schemas/StateType',
            description: 'The state type.'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Timestamp',
            description: "The start time of the run, or the expected start time if it hasn't run yet."
        },
        duration: {
            type: 'number',
            title: 'Duration',
            description: 'The total run time of the run.'
        },
        lateness: {
            type: 'number',
            title: 'Lateness',
            description: 'The delay between the expected and actual start time.'
        }
    },
    type: 'object',
    required: ['id', 'state_type', 'timestamp', 'duration', 'lateness'],
    title: 'SimpleFlowRun'
} as const;

export const $SimpleNextFlowRun = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: 'The flow run id.'
        },
        flow_id: {
            type: 'string',
            format: 'uuid',
            title: 'Flow Id',
            description: 'The flow id.'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'The flow run name'
        },
        state_name: {
            type: 'string',
            title: 'State Name',
            description: 'The state name.'
        },
        state_type: {
            '$ref': '#/components/schemas/StateType',
            description: 'The state type.'
        },
        next_scheduled_start_time: {
            type: 'string',
            format: 'date-time',
            title: 'Next Scheduled Start Time',
            description: 'The next scheduled start time'
        }
    },
    type: 'object',
    required: ['id', 'flow_id', 'name', 'state_name', 'state_type', 'next_scheduled_start_time'],
    title: 'SimpleNextFlowRun'
} as const;

export const $State = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        type: {
            '$ref': '#/components/schemas/StateType'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Timestamp'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message',
            examples: ['Run started']
        },
        data: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Data',
            description: 'Data associated with the state, e.g. a result. Content must be storable as JSON.'
        },
        state_details: {
            '$ref': '#/components/schemas/StateDetails'
        }
    },
    type: 'object',
    required: ['type', 'id'],
    title: 'State',
    description: 'Represents the state of a run.'
} as const;

export const $StateAbortDetails = {
    properties: {
        type: {
            type: 'string',
            const: 'abort_details',
            title: 'Type',
            description: 'The type of state transition detail. Used to ensure pydantic does not coerce into a different type.',
            default: 'abort_details'
        },
        reason: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reason',
            description: 'The reason why the state transition was aborted.'
        }
    },
    type: 'object',
    title: 'StateAbortDetails',
    description: 'Details associated with an ABORT state transition.'
} as const;

export const $StateAcceptDetails = {
    properties: {
        type: {
            type: 'string',
            const: 'accept_details',
            title: 'Type',
            description: 'The type of state transition detail. Used to ensure pydantic does not coerce into a different type.',
            default: 'accept_details'
        }
    },
    type: 'object',
    title: 'StateAcceptDetails',
    description: 'Details associated with an ACCEPT state transition.'
} as const;

export const $StateCreate = {
    properties: {
        type: {
            '$ref': '#/components/schemas/StateType',
            description: 'The type of the state to create'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            description: 'The name of the state to create'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message',
            description: 'The message of the state to create'
        },
        data: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Data',
            description: 'The data of the state to create'
        },
        state_details: {
            '$ref': '#/components/schemas/StateDetails',
            description: 'The details of the state to create'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['type'],
    title: 'StateCreate',
    description: 'Data used by the Prefect REST API to create a new state.'
} as const;

export const $StateDetails = {
    properties: {
        flow_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Run Id'
        },
        task_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Task Run Id'
        },
        child_flow_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Child Flow Run Id'
        },
        scheduled_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scheduled Time'
        },
        cache_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cache Key'
        },
        cache_expiration: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cache Expiration'
        },
        deferred: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deferred',
            default: false
        },
        untrackable_result: {
            type: 'boolean',
            title: 'Untrackable Result',
            default: false
        },
        pause_timeout: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pause Timeout'
        },
        pause_reschedule: {
            type: 'boolean',
            title: 'Pause Reschedule',
            default: false
        },
        pause_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pause Key'
        },
        run_input_keyset: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Run Input Keyset'
        },
        refresh_cache: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Refresh Cache'
        },
        retriable: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Retriable'
        },
        transition_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transition Id'
        },
        task_parameters_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Task Parameters Id'
        },
        traceparent: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Traceparent'
        }
    },
    type: 'object',
    title: 'StateDetails'
} as const;

export const $StateRejectDetails = {
    properties: {
        type: {
            type: 'string',
            const: 'reject_details',
            title: 'Type',
            description: 'The type of state transition detail. Used to ensure pydantic does not coerce into a different type.',
            default: 'reject_details'
        },
        reason: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reason',
            description: 'The reason why the state transition was rejected.'
        }
    },
    type: 'object',
    title: 'StateRejectDetails',
    description: 'Details associated with a REJECT state transition.'
} as const;

export const $StateType = {
    type: 'string',
    enum: ['SCHEDULED', 'PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', 'CRASHED', 'PAUSED', 'CANCELLING'],
    title: 'StateType',
    description: 'Enumeration of state types.'
} as const;

export const $StateWaitDetails = {
    properties: {
        type: {
            type: 'string',
            const: 'wait_details',
            title: 'Type',
            description: 'The type of state transition detail. Used to ensure pydantic does not coerce into a different type.',
            default: 'wait_details'
        },
        delay_seconds: {
            type: 'integer',
            title: 'Delay Seconds',
            description: 'The length of time in seconds the client should wait before transitioning states.'
        },
        reason: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reason',
            description: 'The reason why the state transition should wait.'
        }
    },
    type: 'object',
    required: ['delay_seconds'],
    title: 'StateWaitDetails',
    description: 'Details associated with a WAIT state transition.'
} as const;

export const $SuspendFlowRun = {
    properties: {
        type: {
            type: 'string',
            const: 'suspend-flow-run',
            title: 'Type',
            default: 'suspend-flow-run'
        }
    },
    type: 'object',
    title: 'SuspendFlowRun',
    description: 'Suspends a flow run associated with the trigger'
} as const;

export const $TaskRun = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            title: 'Name',
            examples: ['my-task-run']
        },
        flow_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Run Id',
            description: 'The flow run id of the task run.'
        },
        task_key: {
            type: 'string',
            title: 'Task Key',
            description: 'A unique identifier for the task being run.'
        },
        dynamic_key: {
            type: 'string',
            title: 'Dynamic Key',
            description: 'A dynamic key used to differentiate between multiple runs of the same task within the same flow run.'
        },
        cache_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cache Key',
            description: 'An optional cache key. If a COMPLETED state associated with this cache key is found, the cached COMPLETED state will be used instead of executing the task run.'
        },
        cache_expiration: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cache Expiration',
            description: 'Specifies when the cached state should expire.'
        },
        task_version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Task Version',
            description: 'The version of the task being run.'
        },
        empirical_policy: {
            '$ref': '#/components/schemas/TaskRunPolicy'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of tags for the task run.',
            examples: [['tag-1', 'tag-2']]
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'boolean'
                            },
                            {
                                type: 'integer'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'string'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels',
            description: 'A dictionary of key-value labels. Values can be strings, numbers, or booleans.',
            examples: [
                {
                    key: 'value1',
                    key2: 42
                }
            ]
        },
        state_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State Id',
            description: 'The id of the current task run state.'
        },
        task_inputs: {
            additionalProperties: {
                items: {
                    anyOf: [
                        {
                            '$ref': '#/components/schemas/TaskRunResult'
                        },
                        {
                            '$ref': '#/components/schemas/Parameter'
                        },
                        {
                            '$ref': '#/components/schemas/Constant'
                        }
                    ]
                },
                type: 'array'
            },
            type: 'object',
            title: 'Task Inputs',
            description: 'Tracks the source of inputs to a task run. Used for internal bookkeeping.'
        },
        state_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StateType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The type of the current task run state.'
        },
        state_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State Name',
            description: 'The name of the current task run state.'
        },
        run_count: {
            type: 'integer',
            title: 'Run Count',
            description: 'The number of times the task run has been executed.',
            default: 0
        },
        flow_run_run_count: {
            type: 'integer',
            title: 'Flow Run Run Count',
            description: 'If the parent flow has retried, this indicates the flow retry this run is associated with.',
            default: 0
        },
        expected_start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expected Start Time',
            description: "The task run's expected start time."
        },
        next_scheduled_start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Scheduled Start Time',
            description: 'The next time the task run is scheduled to start.'
        },
        start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Time',
            description: 'The actual start time.'
        },
        end_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Time',
            description: 'The actual end time.'
        },
        total_run_time: {
            type: 'number',
            title: 'Total Run Time',
            description: 'Total run time. If the task run was executed multiple times, the time of each run will be summed.',
            default: 0
        },
        estimated_run_time: {
            type: 'number',
            title: 'Estimated Run Time',
            description: 'A real-time estimate of total run time.',
            default: 0
        },
        estimated_start_time_delta: {
            type: 'number',
            title: 'Estimated Start Time Delta',
            description: 'The difference between actual and expected start time.',
            default: 0
        },
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/State'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The current task run state.'
        }
    },
    type: 'object',
    required: ['task_key', 'dynamic_key', 'id', 'created', 'updated'],
    title: 'TaskRun',
    description: 'An ORM representation of task run data.'
} as const;

export const $TaskRunCount = {
    additionalProperties: {
        type: 'integer'
    },
    type: 'object'
} as const;

export const $TaskRunCreate = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id',
            description: 'The ID to assign to the task run. If not provided, a random UUID will be generated.'
        },
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StateCreate'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The state of the task run to create'
        },
        name: {
            type: 'string',
            title: 'Name',
            examples: ['my-task-run']
        },
        flow_run_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Flow Run Id',
            description: 'The flow run id of the task run.'
        },
        task_key: {
            type: 'string',
            title: 'Task Key',
            description: 'A unique identifier for the task being run.'
        },
        dynamic_key: {
            type: 'string',
            title: 'Dynamic Key',
            description: 'A dynamic key used to differentiate between multiple runs of the same task within the same flow run.'
        },
        cache_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cache Key',
            description: 'An optional cache key. If a COMPLETED state associated with this cache key is found, the cached COMPLETED state will be used instead of executing the task run.'
        },
        cache_expiration: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cache Expiration',
            description: 'Specifies when the cached state should expire.'
        },
        task_version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Task Version',
            description: 'The version of the task being run.'
        },
        empirical_policy: {
            '$ref': '#/components/schemas/TaskRunPolicy'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of tags for the task run.',
            examples: [['tag-1', 'tag-2']]
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'boolean'
                            },
                            {
                                type: 'integer'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'string'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels',
            description: 'A dictionary of key-value labels. Values can be strings, numbers, or booleans.',
            examples: [
                {
                    key: 'value1',
                    key2: 42
                }
            ]
        },
        task_inputs: {
            additionalProperties: {
                items: {
                    anyOf: [
                        {
                            '$ref': '#/components/schemas/TaskRunResult'
                        },
                        {
                            '$ref': '#/components/schemas/Parameter'
                        },
                        {
                            '$ref': '#/components/schemas/Constant'
                        }
                    ]
                },
                type: 'array'
            },
            type: 'object',
            title: 'Task Inputs',
            description: 'The inputs to the task run.'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['task_key', 'dynamic_key'],
    title: 'TaskRunCreate',
    description: 'Data used by the Prefect REST API to create a task run'
} as const;

export const $TaskRunFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilterId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `TaskRun.id`'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilterName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `TaskRun.name`'
        },
        tags: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilterTags'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `TaskRun.tags`'
        },
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilterState'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `TaskRun.state`'
        },
        start_time: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilterStartTime'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `TaskRun.start_time`'
        },
        expected_start_time: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilterExpectedStartTime'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `TaskRun.expected_start_time`'
        },
        subflow_runs: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilterSubFlowRuns'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `TaskRun.subflow_run`'
        },
        flow_run_id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilterFlowRunId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `TaskRun.flow_run_id`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilter',
    description: 'Filter task runs. Only task runs matching all criteria will be returned'
} as const;

export const $TaskRunFilterExpectedStartTime = {
    properties: {
        before_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Before',
            description: 'Only include task runs expected to start at or before this time'
        },
        after_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'After',
            description: 'Only include task runs expected to start at or after this time'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilterExpectedStartTime',
    description: 'Filter by `TaskRun.expected_start_time`.'
} as const;

export const $TaskRunFilterFlowRunId = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of task run flow run ids to include'
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'Filter for task runs with None as their flow run id',
            default: false
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilterFlowRunId',
    description: 'Filter by `TaskRun.flow_run_id`.'
} as const;

export const $TaskRunFilterId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of task run ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilterId',
    description: 'Filter by `TaskRun.id`.'
} as const;

export const $TaskRunFilterName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of task run names to include',
            examples: [['my-task-run-1', 'my-task-run-2']]
        },
        like_: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Like',
            description: "A case-insensitive partial match. For example,  passing 'marvin' will match 'marvin', 'sad-Marvin', and 'marvin-robot'.",
            examples: ['marvin']
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilterName',
    description: 'Filter by `TaskRun.name`.'
} as const;

export const $TaskRunFilterStartTime = {
    properties: {
        before_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Before',
            description: 'Only include task runs starting at or before this time'
        },
        after_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'After',
            description: 'Only include task runs starting at or after this time'
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only return task runs without a start time'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilterStartTime',
    description: 'Filter by `TaskRun.start_time`.'
} as const;

export const $TaskRunFilterState = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilterStateType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `TaskRun.state_type`'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskRunFilterStateName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `TaskRun.state_name`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilterState',
    description: 'Filter by `TaskRun.type` and `TaskRun.name`.'
} as const;

export const $TaskRunFilterStateName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of task run state names to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilterStateName',
    description: 'Filter by `TaskRun.state_name`.'
} as const;

export const $TaskRunFilterStateType = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/StateType'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of task run state types to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilterStateType',
    description: 'Filter by `TaskRun.state_type`.'
} as const;

export const $TaskRunFilterSubFlowRuns = {
    properties: {
        exists_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Exists',
            description: 'If true, only include task runs that are subflow run parents; if false, exclude parent task runs'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilterSubFlowRuns',
    description: 'Filter by `TaskRun.subflow_run`.'
} as const;

export const $TaskRunFilterTags = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        all_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'All',
            description: 'A list of tags. Task runs will be returned only if their tags are a superset of the list',
            examples: [['tag-1', 'tag-2']]
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include task runs without tags'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunFilterTags',
    description: 'Filter by `TaskRun.tags`.'
} as const;

export const $TaskRunPolicy = {
    properties: {
        max_retries: {
            type: 'integer',
            title: 'Max Retries',
            description: 'The maximum number of retries. Field is not used. Please use `retries` instead.',
            default: 0,
            deprecated: true
        },
        retry_delay_seconds: {
            type: 'number',
            title: 'Retry Delay Seconds',
            description: 'The delay between retries. Field is not used. Please use `retry_delay` instead.',
            default: 0,
            deprecated: true
        },
        retries: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Retries',
            description: 'The number of retries.'
        },
        retry_delay: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    items: {
                        type: 'integer'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Retry Delay',
            description: 'A delay time or list of delay times between retries, in seconds.'
        },
        retry_jitter_factor: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Retry Jitter Factor',
            description: 'Determines the amount a retry should jitter'
        }
    },
    type: 'object',
    title: 'TaskRunPolicy',
    description: 'Defines of how a task run should retry.'
} as const;

export const $TaskRunResult = {
    properties: {
        input_type: {
            type: 'string',
            const: 'task_run',
            title: 'Input Type',
            default: 'task_run'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'TaskRunResult',
    description: 'Represents a task run result input to another task run.'
} as const;

export const $TaskRunSort = {
    type: 'string',
    enum: ['ID_DESC', 'EXPECTED_START_TIME_ASC', 'EXPECTED_START_TIME_DESC', 'NAME_ASC', 'NAME_DESC', 'NEXT_SCHEDULED_START_TIME_ASC', 'END_TIME_DESC'],
    title: 'TaskRunSort',
    description: 'Defines task run sorting options.'
} as const;

export const $TaskRunUpdate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            examples: ['my-task-run']
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'TaskRunUpdate',
    description: 'Data used by the Prefect REST API to update a task run'
} as const;

export const $TaskWorkerFilter = {
    properties: {
        task_keys: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Task Keys'
        }
    },
    type: 'object',
    required: ['task_keys'],
    title: 'TaskWorkerFilter'
} as const;

export const $TaskWorkerResponse = {
    properties: {
        identifier: {
            type: 'string',
            title: 'Identifier'
        },
        task_keys: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Task Keys'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Timestamp'
        }
    },
    type: 'object',
    required: ['identifier', 'task_keys', 'timestamp'],
    title: 'TaskWorkerResponse'
} as const;

export const $TimeUnit = {
    type: 'string',
    enum: ['week', 'day', 'hour', 'minute', 'second'],
    title: 'TimeUnit'
} as const;

export const $UpdatedBy = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id',
            description: 'The id of the updater of the object.'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type',
            description: 'The type of the updater of the object.'
        },
        display_value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Display Value',
            description: 'The display value for the updater.'
        }
    },
    type: 'object',
    title: 'UpdatedBy'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $Variable = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name',
            description: 'The name of the variable',
            examples: ['my-variable']
        },
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'boolean'
                },
                {
                    type: 'number'
                },
                {
                    type: 'object'
                },
                {
                    items: {},
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value',
            description: 'The value of the variable',
            examples: ['my-value']
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of variable tags',
            examples: [['tag-1', 'tag-2']]
        }
    },
    type: 'object',
    required: ['name', 'value', 'id', 'created', 'updated'],
    title: 'Variable'
} as const;

export const $VariableCreate = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name',
            description: 'The name of the variable',
            examples: ['my-variable']
        },
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'boolean'
                },
                {
                    type: 'number'
                },
                {
                    type: 'object'
                },
                {
                    items: {},
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value',
            description: 'The value of the variable',
            examples: ['my-value']
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags',
            description: 'A list of variable tags',
            examples: [['tag-1', 'tag-2']]
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name', 'value'],
    title: 'VariableCreate',
    description: 'Data used by the Prefect REST API to create a Variable.'
} as const;

export const $VariableFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VariableFilterId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Variable.id`'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VariableFilterName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Variable.name`'
        },
        tags: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VariableFilterTags'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Variable.tags`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'VariableFilter',
    description: 'Filter variables. Only variables matching all criteria will be returned'
} as const;

export const $VariableFilterId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of variable ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'VariableFilterId',
    description: 'Filter by `Variable.id`.'
} as const;

export const $VariableFilterName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of variables names to include'
        },
        like_: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Like',
            description: 'A string to match variable names against. This can include SQL wildcard characters like `%` and `_`.',
            examples: ['my_variable_%']
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'VariableFilterName',
    description: 'Filter by `Variable.name`.'
} as const;

export const $VariableFilterTags = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        all_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'All',
            description: 'A list of tags. Variables will be returned only if their tags are a superset of the list',
            examples: [['tag-1', 'tag-2']]
        },
        is_null_: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Null',
            description: 'If true, only include Variables without tags'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'VariableFilterTags',
    description: 'Filter by `Variable.tags`.'
} as const;

export const $VariableSort = {
    type: 'string',
    enum: ['CREATED_DESC', 'UPDATED_DESC', 'NAME_DESC', 'NAME_ASC'],
    title: 'VariableSort',
    description: 'Defines variables sorting options.'
} as const;

export const $VariableUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            description: 'The name of the variable',
            examples: ['my-variable']
        },
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'boolean'
                },
                {
                    type: 'number'
                },
                {
                    type: 'object'
                },
                {
                    items: {},
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value',
            description: 'The value of the variable',
            examples: ['my-value']
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags',
            description: 'A list of variable tags',
            examples: [['tag-1', 'tag-2']]
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'VariableUpdate',
    description: 'Data used by the Prefect REST API to update a Variable.'
} as const;

export const $WorkPool = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: 'The name of the work pool.'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'A description of the work pool.'
        },
        type: {
            type: 'string',
            title: 'Type',
            description: 'The work pool type.'
        },
        base_job_template: {
            type: 'object',
            title: 'Base Job Template',
            description: "The work pool's base job template."
        },
        is_paused: {
            type: 'boolean',
            title: 'Is Paused',
            description: 'Pausing the work pool stops the delivery of all work.',
            default: false
        },
        concurrency_limit: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Concurrency Limit',
            description: 'A concurrency limit for the work pool.'
        },
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolStatus'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The current status of the work pool.'
        },
        default_queue_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Default Queue Id',
            description: "The id of the pool's default queue."
        }
    },
    type: 'object',
    required: ['name', 'type', 'id', 'created', 'updated'],
    title: 'WorkPool',
    description: 'An ORM representation of a work pool'
} as const;

export const $WorkPoolCreate = {
    properties: {
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: 'The name of the work pool.'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'The work pool description.'
        },
        type: {
            type: 'string',
            title: 'Type',
            description: 'The work pool type.',
            default: 'prefect-agent'
        },
        base_job_template: {
            type: 'object',
            title: 'Base Job Template',
            description: "The work pool's base job template."
        },
        is_paused: {
            type: 'boolean',
            title: 'Is Paused',
            description: 'Pausing the work pool stops the delivery of all work.',
            default: false
        },
        concurrency_limit: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Concurrency Limit',
            description: 'A concurrency limit for the work pool.'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name'],
    title: 'WorkPoolCreate',
    description: 'Data used by the Prefect REST API to create a work pool.'
} as const;

export const $WorkPoolFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolFilterId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `WorkPool.id`'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolFilterName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `WorkPool.name`'
        },
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkPoolFilterType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `WorkPool.type`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkPoolFilter',
    description: 'Filter work pools. Only work pools matching all criteria will be returned'
} as const;

export const $WorkPoolFilterId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of work pool ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkPoolFilterId',
    description: 'Filter by `WorkPool.id`.'
} as const;

export const $WorkPoolFilterName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of work pool names to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkPoolFilterName',
    description: 'Filter by `WorkPool.name`.'
} as const;

export const $WorkPoolFilterType = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of work pool types to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkPoolFilterType',
    description: 'Filter by `WorkPool.type`.'
} as const;

export const $WorkPoolStatus = {
    type: 'string',
    enum: ['READY', 'NOT_READY', 'PAUSED'],
    title: 'WorkPoolStatus',
    description: 'Enumeration of work pool statuses.'
} as const;

export const $WorkPoolUpdate = {
    properties: {
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        is_paused: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Paused'
        },
        base_job_template: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Base Job Template'
        },
        concurrency_limit: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Concurrency Limit'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkPoolUpdate',
    description: 'Data used by the Prefect REST API to update a work pool.'
} as const;

export const $WorkQueue = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: 'The name of the work queue.'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'An optional description for the work queue.',
            default: ''
        },
        is_paused: {
            type: 'boolean',
            title: 'Is Paused',
            description: 'Whether or not the work queue is paused.',
            default: false
        },
        concurrency_limit: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Concurrency Limit',
            description: 'An optional concurrency limit for the work queue.'
        },
        priority: {
            type: 'integer',
            exclusiveMinimum: 0,
            title: 'Priority',
            description: "The queue's priority. Lower values are higher priority (1 is the highest).",
            default: 1
        },
        work_pool_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Pool Id',
            description: 'The work pool with which the queue is associated.'
        },
        filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/QueueFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'DEPRECATED: Filter criteria for the work queue.',
            deprecated: true
        },
        last_polled: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Polled',
            description: 'The last time an agent polled this queue for work.'
        }
    },
    type: 'object',
    required: ['name', 'id', 'created', 'updated'],
    title: 'WorkQueue',
    description: 'An ORM representation of a work queue'
} as const;

export const $WorkQueueCreate = {
    properties: {
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: 'The name of the work queue.'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'An optional description for the work queue.',
            default: ''
        },
        is_paused: {
            type: 'boolean',
            title: 'Is Paused',
            description: 'Whether or not the work queue is paused.',
            default: false
        },
        concurrency_limit: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Concurrency Limit',
            description: "The work queue's concurrency limit."
        },
        priority: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Priority',
            description: "The queue's priority. Lower values are higher priority (1 is the highest)."
        },
        filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/QueueFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'DEPRECATED: Filter criteria for the work queue.',
            deprecated: true
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name'],
    title: 'WorkQueueCreate',
    description: 'Data used by the Prefect REST API to create a work queue.'
} as const;

export const $WorkQueueFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        id: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkQueueFilterId'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `WorkQueue.id`'
        },
        name: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkQueueFilterName'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `WorkQueue.name`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkQueueFilter',
    description: `Filter work queues. Only work queues matching all criteria will be
returned`
} as const;

export const $WorkQueueFilterId = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of work queue ids to include'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkQueueFilterId',
    description: 'Filter by `WorkQueue.id`.'
} as const;

export const $WorkQueueFilterName = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of work queue names to include',
            examples: [['wq-1', 'wq-2']]
        },
        startswith_: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Startswith',
            description: "A list of case-insensitive starts-with matches. For example,  passing 'marvin' will match 'marvin', and 'Marvin-robot', but not 'sad-marvin'.",
            examples: [['marvin', 'Marvin-robot']]
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkQueueFilterName',
    description: 'Filter by `WorkQueue.name`.'
} as const;

export const $WorkQueueHealthPolicy = {
    properties: {
        maximum_late_runs: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Maximum Late Runs',
            description: 'The maximum number of late runs in the work queue before it is deemed unhealthy. Defaults to `0`.',
            default: 0
        },
        maximum_seconds_since_last_polled: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Maximum Seconds Since Last Polled',
            description: 'The maximum number of time in seconds elapsed since work queue has been polled before it is deemed unhealthy. Defaults to `60`.',
            default: 60
        }
    },
    type: 'object',
    title: 'WorkQueueHealthPolicy'
} as const;

export const $WorkQueueResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            pattern: '^[^/%&><]+$',
            title: 'Name',
            description: 'The name of the work queue.'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'An optional description for the work queue.',
            default: ''
        },
        is_paused: {
            type: 'boolean',
            title: 'Is Paused',
            description: 'Whether or not the work queue is paused.',
            default: false
        },
        concurrency_limit: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Concurrency Limit',
            description: 'An optional concurrency limit for the work queue.'
        },
        priority: {
            type: 'integer',
            exclusiveMinimum: 0,
            title: 'Priority',
            description: "The queue's priority. Lower values are higher priority (1 is the highest).",
            default: 1
        },
        work_pool_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Pool Id',
            description: 'The work pool with which the queue is associated.'
        },
        filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/QueueFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'DEPRECATED: Filter criteria for the work queue.',
            deprecated: true
        },
        last_polled: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Polled',
            description: 'The last time an agent polled this queue for work.'
        },
        work_pool_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Work Pool Name',
            description: 'The name of the work pool the work pool resides within.'
        },
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkQueueStatus'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The queue status.'
        }
    },
    type: 'object',
    required: ['name', 'id', 'created', 'updated'],
    title: 'WorkQueueResponse'
} as const;

export const $WorkQueueStatus = {
    type: 'string',
    enum: ['READY', 'NOT_READY', 'PAUSED'],
    title: 'WorkQueueStatus',
    description: 'Enumeration of work queue statuses.'
} as const;

export const $WorkQueueStatusDetail = {
    properties: {
        healthy: {
            type: 'boolean',
            title: 'Healthy',
            description: 'Whether or not the work queue is healthy.'
        },
        late_runs_count: {
            type: 'integer',
            title: 'Late Runs Count',
            description: 'The number of late flow runs in the work queue.',
            default: 0
        },
        last_polled: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Polled',
            description: 'The last time an agent polled this queue for work.'
        },
        health_check_policy: {
            '$ref': '#/components/schemas/WorkQueueHealthPolicy',
            description: 'The policy used to determine whether or not the work queue is healthy.'
        }
    },
    type: 'object',
    required: ['healthy', 'health_check_policy'],
    title: 'WorkQueueStatusDetail'
} as const;

export const $WorkQueueUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        is_paused: {
            type: 'boolean',
            title: 'Is Paused',
            description: 'Whether or not the work queue is paused.',
            default: false
        },
        concurrency_limit: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Concurrency Limit'
        },
        priority: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Priority'
        },
        last_polled: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Polled'
        },
        filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/QueueFilter'
                },
                {
                    type: 'null'
                }
            ],
            description: 'DEPRECATED: Filter criteria for the work queue.',
            deprecated: true
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkQueueUpdate',
    description: 'Data used by the Prefect REST API to update a work queue.'
} as const;

export const $WorkerFilter = {
    properties: {
        operator: {
            '$ref': '#/components/schemas/Operator',
            description: "Operator for combining filter criteria. Defaults to 'and_'.",
            default: 'and_'
        },
        last_heartbeat_time: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkerFilterLastHeartbeatTime'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Worker.last_heartbeat_time`'
        },
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/WorkerFilterStatus'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter criteria for `Worker.status`'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkerFilter',
    description: 'Filter by `Worker.last_heartbeat_time`.'
} as const;

export const $WorkerFilterLastHeartbeatTime = {
    properties: {
        before_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Before',
            description: 'Only include processes whose last heartbeat was at or before this time'
        },
        after_: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'After',
            description: 'Only include processes whose last heartbeat was at or after this time'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkerFilterLastHeartbeatTime',
    description: 'Filter by `Worker.last_heartbeat_time`.'
} as const;

export const $WorkerFilterStatus = {
    properties: {
        any_: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/WorkerStatus'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Any',
            description: 'A list of worker statuses to include'
        },
        not_any_: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/WorkerStatus'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Not Any',
            description: 'A list of worker statuses to exclude'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'WorkerFilterStatus',
    description: 'Filter by `Worker.status`.'
} as const;

export const $WorkerFlowRunResponse = {
    properties: {
        work_pool_id: {
            type: 'string',
            format: 'uuid',
            title: 'Work Pool Id'
        },
        work_queue_id: {
            type: 'string',
            format: 'uuid',
            title: 'Work Queue Id'
        },
        flow_run: {
            '$ref': '#/components/schemas/FlowRun'
        }
    },
    type: 'object',
    required: ['work_pool_id', 'work_queue_id', 'flow_run'],
    title: 'WorkerFlowRunResponse'
} as const;

export const $WorkerResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created'
        },
        updated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the worker.'
        },
        work_pool_id: {
            type: 'string',
            format: 'uuid',
            title: 'Work Pool Id',
            description: 'The work pool with which the queue is associated.'
        },
        last_heartbeat_time: {
            type: 'string',
            format: 'date-time',
            title: 'Last Heartbeat Time',
            description: 'The last time the worker process sent a heartbeat.'
        },
        heartbeat_interval_seconds: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Heartbeat Interval Seconds',
            description: 'The number of seconds to expect between heartbeats sent by the worker.'
        },
        status: {
            '$ref': '#/components/schemas/WorkerStatus',
            description: 'Current status of the worker.',
            default: 'OFFLINE'
        }
    },
    type: 'object',
    required: ['name', 'work_pool_id', 'id', 'created', 'updated'],
    title: 'WorkerResponse'
} as const;

export const $WorkerStatus = {
    type: 'string',
    enum: ['ONLINE', 'OFFLINE'],
    title: 'WorkerStatus',
    description: 'Enumeration of worker statuses.'
} as const;