// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetHealthResponse, GetVersionResponse, GetHelloData, GetHelloResponse, GetReadyData, GetReadyResponse, PostFlowsData, PostFlowsResponse, PatchFlowsByIdData, PatchFlowsByIdResponse, GetFlowsByIdData, GetFlowsByIdResponse, DeleteFlowsByIdData, DeleteFlowsByIdResponse, PostFlowsCountData, PostFlowsCountResponse, GetFlowsNameByNameData, GetFlowsNameByNameResponse, PostFlowsFilterData, PostFlowsFilterResponse, PostFlowsPaginateData, PostFlowsPaginateResponse, PostUiFlowsCountDeploymentsData, PostUiFlowsCountDeploymentsResponse, PostUiFlowsNextRunsData, PostUiFlowsNextRunsResponse, PostFlowRunsData, PostFlowRunsResponse, PatchFlowRunsByIdData, PatchFlowRunsByIdResponse, GetFlowRunsByIdData, GetFlowRunsByIdResponse, DeleteFlowRunsByIdData, DeleteFlowRunsByIdResponse, PostFlowRunsCountData, PostFlowRunsCountResponse, PostFlowRunsLatenessData, PostFlowRunsLatenessResponse, PostFlowRunsHistoryData, PostFlowRunsHistoryResponse, GetFlowRunsByIdGraphData, GetFlowRunsByIdGraphResponse, GetFlowRunsByIdGraphV2Data, GetFlowRunsByIdGraphV2Response, PostFlowRunsByIdResumeData, PostFlowRunsByIdResumeResponse, PostFlowRunsFilterData, PostFlowRunsFilterResponse, PostFlowRunsByIdSetStateData, PostFlowRunsByIdSetStateResponse, PostFlowRunsByIdInputData, PostFlowRunsByIdInputResponse, PostFlowRunsByIdInputFilterData, PostFlowRunsByIdInputFilterResponse, GetFlowRunsByIdInputByKeyData, GetFlowRunsByIdInputByKeyResponse, DeleteFlowRunsByIdInputByKeyData, DeleteFlowRunsByIdInputByKeyResponse, PostFlowRunsPaginateData, PostFlowRunsPaginateResponse, GetFlowRunsByIdLogsDownloadData, GetFlowRunsByIdLogsDownloadResponse, PatchFlowRunsByIdLabelsData, PatchFlowRunsByIdLabelsResponse, PostUiFlowRunsHistoryData, PostUiFlowRunsHistoryResponse, PostUiFlowRunsCountTaskRunsData, PostUiFlowRunsCountTaskRunsResponse, PostTaskRunsData, PostTaskRunsResponse, PatchTaskRunsByIdData, PatchTaskRunsByIdResponse, GetTaskRunsByIdData, GetTaskRunsByIdResponse, DeleteTaskRunsByIdData, DeleteTaskRunsByIdResponse, PostTaskRunsCountData, PostTaskRunsCountResponse, PostTaskRunsHistoryData, PostTaskRunsHistoryResponse, PostTaskRunsFilterData, PostTaskRunsFilterResponse, PostTaskRunsByIdSetStateData, PostTaskRunsByIdSetStateResponse, PostUiTaskRunsDashboardCountsData, PostUiTaskRunsDashboardCountsResponse, PostUiTaskRunsCountData, PostUiTaskRunsCountResponse, GetFlowRunStatesByIdData, GetFlowRunStatesByIdResponse, GetFlowRunStatesData, GetFlowRunStatesResponse, GetTaskRunStatesByIdData, GetTaskRunStatesByIdResponse, GetTaskRunStatesData, GetTaskRunStatesResponse, PostFlowRunNotificationPoliciesData, PostFlowRunNotificationPoliciesResponse, PatchFlowRunNotificationPoliciesByIdData, PatchFlowRunNotificationPoliciesByIdResponse, GetFlowRunNotificationPoliciesByIdData, GetFlowRunNotificationPoliciesByIdResponse, DeleteFlowRunNotificationPoliciesByIdData, DeleteFlowRunNotificationPoliciesByIdResponse, PostFlowRunNotificationPoliciesFilterData, PostFlowRunNotificationPoliciesFilterResponse, PostDeploymentsData, PostDeploymentsResponse, PatchDeploymentsByIdData, PatchDeploymentsByIdResponse, GetDeploymentsByIdData, GetDeploymentsByIdResponse, DeleteDeploymentsByIdData, DeleteDeploymentsByIdResponse, GetDeploymentsNameByFlowNameByDeploymentNameData, GetDeploymentsNameByFlowNameByDeploymentNameResponse, PostDeploymentsFilterData, PostDeploymentsFilterResponse, PostDeploymentsPaginateData, PostDeploymentsPaginateResponse, PostDeploymentsGetScheduledFlowRunsData, PostDeploymentsGetScheduledFlowRunsResponse, PostDeploymentsCountData, PostDeploymentsCountResponse, PostDeploymentsByIdScheduleData, PostDeploymentsByIdScheduleResponse, PostDeploymentsByIdResumeDeploymentData, PostDeploymentsByIdResumeDeploymentResponse, PostDeploymentsByIdPauseDeploymentData, PostDeploymentsByIdPauseDeploymentResponse, PostDeploymentsByIdCreateFlowRunData, PostDeploymentsByIdCreateFlowRunResponse, GetDeploymentsByIdWorkQueueCheckData, GetDeploymentsByIdWorkQueueCheckResponse, GetDeploymentsByIdSchedulesData, GetDeploymentsByIdSchedulesResponse, PostDeploymentsByIdSchedulesData, PostDeploymentsByIdSchedulesResponse, PatchDeploymentsByIdSchedulesByScheduleIdData, PatchDeploymentsByIdSchedulesByScheduleIdResponse, DeleteDeploymentsByIdSchedulesByScheduleIdData, DeleteDeploymentsByIdSchedulesByScheduleIdResponse, PutSavedSearchesData, PutSavedSearchesResponse, GetSavedSearchesByIdData, GetSavedSearchesByIdResponse, DeleteSavedSearchesByIdData, DeleteSavedSearchesByIdResponse, PostSavedSearchesFilterData, PostSavedSearchesFilterResponse, PostLogsData, PostLogsResponse, PostLogsFilterData, PostLogsFilterResponse, PostConcurrencyLimitsData, PostConcurrencyLimitsResponse, GetConcurrencyLimitsByIdData, GetConcurrencyLimitsByIdResponse, DeleteConcurrencyLimitsByIdData, DeleteConcurrencyLimitsByIdResponse, GetConcurrencyLimitsTagByTagData, GetConcurrencyLimitsTagByTagResponse, DeleteConcurrencyLimitsTagByTagData, DeleteConcurrencyLimitsTagByTagResponse, PostConcurrencyLimitsFilterData, PostConcurrencyLimitsFilterResponse, PostConcurrencyLimitsTagByTagResetData, PostConcurrencyLimitsTagByTagResetResponse, PostConcurrencyLimitsIncrementData, PostConcurrencyLimitsIncrementResponse, PostConcurrencyLimitsDecrementData, PostConcurrencyLimitsDecrementResponse, PostV2ConcurrencyLimitsData, PostV2ConcurrencyLimitsResponse, GetV2ConcurrencyLimitsByIdOrNameData, GetV2ConcurrencyLimitsByIdOrNameResponse, PatchV2ConcurrencyLimitsByIdOrNameData, PatchV2ConcurrencyLimitsByIdOrNameResponse, DeleteV2ConcurrencyLimitsByIdOrNameData, DeleteV2ConcurrencyLimitsByIdOrNameResponse, PostV2ConcurrencyLimitsFilterData, PostV2ConcurrencyLimitsFilterResponse, PostV2ConcurrencyLimitsIncrementData, PostV2ConcurrencyLimitsIncrementResponse, PostV2ConcurrencyLimitsDecrementData, PostV2ConcurrencyLimitsDecrementResponse, PostBlockTypesData, PostBlockTypesResponse, GetBlockTypesByIdData, GetBlockTypesByIdResponse, PatchBlockTypesByIdData, PatchBlockTypesByIdResponse, DeleteBlockTypesByIdData, DeleteBlockTypesByIdResponse, GetBlockTypesSlugBySlugData, GetBlockTypesSlugBySlugResponse, PostBlockTypesFilterData, PostBlockTypesFilterResponse, GetBlockTypesSlugBySlugBlockDocumentsData, GetBlockTypesSlugBySlugBlockDocumentsResponse, GetBlockTypesSlugBySlugBlockDocumentsNameByBlockDocumentNameData, GetBlockTypesSlugBySlugBlockDocumentsNameByBlockDocumentNameResponse, PostBlockTypesInstallSystemBlockTypesData, PostBlockTypesInstallSystemBlockTypesResponse, PostBlockDocumentsData, PostBlockDocumentsResponse, PostBlockDocumentsFilterData, PostBlockDocumentsFilterResponse, PostBlockDocumentsCountData, PostBlockDocumentsCountResponse, GetBlockDocumentsByIdData, GetBlockDocumentsByIdResponse, DeleteBlockDocumentsByIdData, DeleteBlockDocumentsByIdResponse, PatchBlockDocumentsByIdData, PatchBlockDocumentsByIdResponse, PostWorkPoolsData, PostWorkPoolsResponse, GetWorkPoolsByNameData, GetWorkPoolsByNameResponse, PatchWorkPoolsByNameData, PatchWorkPoolsByNameResponse, DeleteWorkPoolsByNameData, DeleteWorkPoolsByNameResponse, PostWorkPoolsFilterData, PostWorkPoolsFilterResponse, PostWorkPoolsCountData, PostWorkPoolsCountResponse, PostWorkPoolsByNameGetScheduledFlowRunsData, PostWorkPoolsByNameGetScheduledFlowRunsResponse, PostWorkPoolsByWorkPoolNameQueuesData, PostWorkPoolsByWorkPoolNameQueuesResponse, GetWorkPoolsByWorkPoolNameQueuesByNameData, GetWorkPoolsByWorkPoolNameQueuesByNameResponse, PatchWorkPoolsByWorkPoolNameQueuesByNameData, PatchWorkPoolsByWorkPoolNameQueuesByNameResponse, DeleteWorkPoolsByWorkPoolNameQueuesByNameData, DeleteWorkPoolsByWorkPoolNameQueuesByNameResponse, PostWorkPoolsByWorkPoolNameQueuesFilterData, PostWorkPoolsByWorkPoolNameQueuesFilterResponse, PostWorkPoolsByWorkPoolNameWorkersHeartbeatData, PostWorkPoolsByWorkPoolNameWorkersHeartbeatResponse, PostWorkPoolsByWorkPoolNameWorkersFilterData, PostWorkPoolsByWorkPoolNameWorkersFilterResponse, DeleteWorkPoolsByWorkPoolNameWorkersByNameData, DeleteWorkPoolsByWorkPoolNameWorkersByNameResponse, PostTaskWorkersFilterData, PostTaskWorkersFilterResponse, PostWorkQueuesData, PostWorkQueuesResponse, PatchWorkQueuesByIdData, PatchWorkQueuesByIdResponse, GetWorkQueuesByIdData, GetWorkQueuesByIdResponse, DeleteWorkQueuesByIdData, DeleteWorkQueuesByIdResponse, GetWorkQueuesNameByNameData, GetWorkQueuesNameByNameResponse, PostWorkQueuesByIdGetRunsData, PostWorkQueuesByIdGetRunsResponse, PostWorkQueuesFilterData, PostWorkQueuesFilterResponse, GetWorkQueuesByIdStatusData, GetWorkQueuesByIdStatusResponse, PostArtifactsData, PostArtifactsResponse, GetArtifactsByIdData, GetArtifactsByIdResponse, PatchArtifactsByIdData, PatchArtifactsByIdResponse, DeleteArtifactsByIdData, DeleteArtifactsByIdResponse, GetArtifactsByKeyLatestData, GetArtifactsByKeyLatestResponse, PostArtifactsFilterData, PostArtifactsFilterResponse, PostArtifactsLatestFilterData, PostArtifactsLatestFilterResponse, PostArtifactsCountData, PostArtifactsCountResponse, PostArtifactsLatestCountData, PostArtifactsLatestCountResponse, PostBlockSchemasData, PostBlockSchemasResponse, DeleteBlockSchemasByIdData, DeleteBlockSchemasByIdResponse, GetBlockSchemasByIdData, GetBlockSchemasByIdResponse, PostBlockSchemasFilterData, PostBlockSchemasFilterResponse, GetBlockSchemasChecksumByChecksumData, GetBlockSchemasChecksumByChecksumResponse, GetBlockCapabilitiesData, GetBlockCapabilitiesResponse, GetCollectionsViewsByViewData, GetCollectionsViewsByViewResponse, PostVariablesData, PostVariablesResponse, GetVariablesByIdData, GetVariablesByIdResponse, PatchVariablesByIdData, PatchVariablesByIdResponse, DeleteVariablesByIdData, DeleteVariablesByIdResponse, GetVariablesNameByNameData, GetVariablesNameByNameResponse, PatchVariablesNameByNameData, PatchVariablesNameByNameResponse, DeleteVariablesNameByNameData, DeleteVariablesNameByNameResponse, PostVariablesFilterData, PostVariablesFilterResponse, PostVariablesCountData, PostVariablesCountResponse, GetCsrfTokenData, GetCsrfTokenResponse, PostEventsData, PostEventsResponse, PostEventsFilterData, PostEventsFilterResponse, GetEventsFilterNextData, GetEventsFilterNextResponse, PostEventsCountByByCountableData, PostEventsCountByByCountableResponse, PostAutomationsData, PostAutomationsResponse, PutAutomationsByIdData, PutAutomationsByIdResponse, PatchAutomationsByIdData, PatchAutomationsByIdResponse, DeleteAutomationsByIdData, DeleteAutomationsByIdResponse, GetAutomationsByIdData, GetAutomationsByIdResponse, PostAutomationsFilterData, PostAutomationsFilterResponse, PostAutomationsCountData, PostAutomationsCountResponse, GetAutomationsRelatedToByResourceIdData, GetAutomationsRelatedToByResourceIdResponse, DeleteAutomationsOwnedByByResourceIdData, DeleteAutomationsOwnedByByResourceIdResponse, PostTemplatesValidateData, PostTemplatesValidateResponse, PostUiSchemasValidateData, PostUiSchemasValidateResponse, GetAdminSettingsData, GetAdminSettingsResponse, GetAdminVersionData, GetAdminVersionResponse, PostAdminDatabaseClearData, PostAdminDatabaseClearResponse, PostAdminDatabaseDropData, PostAdminDatabaseDropResponse, PostAdminDatabaseCreateData, PostAdminDatabaseCreateResponse } from './types.gen';

export class RootService {
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static getHealth(): CancelablePromise<GetHealthResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/health'
        });
    }
    
    /**
     * Server Version
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getVersion(): CancelablePromise<GetVersionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/version'
        });
    }
    
    /**
     * Hello
     * Say hello!
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getHello(data: GetHelloData = {}): CancelablePromise<GetHelloResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/hello',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Perform Readiness Check
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getReady(data: GetReadyData = {}): CancelablePromise<GetReadyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/ready',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class FlowsService {
    /**
     * Create Flow
     * Gracefully creates a new flow from the provided schema. If a flow with the
     * same name already exists, the existing flow is returned.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns Flow Successful Response
     * @throws ApiError
     */
    public static postFlows(data: PostFlowsData): CancelablePromise<PostFlowsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flows/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Flow
     * Updates a flow.
     * @param data The data for the request.
     * @param data.id The flow id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchFlowsById(data: PatchFlowsByIdData): CancelablePromise<PatchFlowsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/flows/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow
     * Get a flow by id.
     * @param data The data for the request.
     * @param data.id The flow id
     * @param data.xPrefectApiVersion
     * @returns Flow Successful Response
     * @throws ApiError
     */
    public static getFlowsById(data: GetFlowsByIdData): CancelablePromise<GetFlowsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flows/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Flow
     * Delete a flow by id.
     * @param data The data for the request.
     * @param data.id The flow id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteFlowsById(data: DeleteFlowsByIdData): CancelablePromise<DeleteFlowsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/flows/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Flows
     * Count flows.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postFlowsCount(data: PostFlowsCountData = {}): CancelablePromise<PostFlowsCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flows/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow By Name
     * Get a flow by name.
     * @param data The data for the request.
     * @param data.name The name of the flow
     * @param data.xPrefectApiVersion
     * @returns Flow Successful Response
     * @throws ApiError
     */
    public static getFlowsNameByName(data: GetFlowsNameByNameData): CancelablePromise<GetFlowsNameByNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flows/name/{name}',
            path: {
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flows
     * Query for flows.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns Flow Successful Response
     * @throws ApiError
     */
    public static postFlowsFilter(data: PostFlowsFilterData = {}): CancelablePromise<PostFlowsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flows/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Paginate Flows
     * Pagination query for flows.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns FlowPaginationResponse Successful Response
     * @throws ApiError
     */
    public static postFlowsPaginate(data: PostFlowsPaginateData = {}): CancelablePromise<PostFlowsPaginateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flows/paginate',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Deployments By Flow
     * Get deployment counts by flow id.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postUiFlowsCountDeployments(data: PostUiFlowsCountDeploymentsData): CancelablePromise<PostUiFlowsCountDeploymentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/flows/count-deployments',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Next Runs By Flow
     * Get the next flow run by flow id.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postUiFlowsNextRuns(data: PostUiFlowsNextRunsData): CancelablePromise<PostUiFlowsNextRunsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/flows/next-runs',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class FlowRunsService {
    /**
     * Create Flow Run
     * Create a flow run. If a flow run with the same flow_id and
     * idempotency key already exists, the existing flow run will be returned.
     *
     * If no state is provided, the flow run will be created in a PENDING state.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns FlowRunResponse Successful Response
     * @throws ApiError
     */
    public static postFlowRuns(data: PostFlowRunsData): CancelablePromise<PostFlowRunsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_runs/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Flow Run
     * Updates a flow run.
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchFlowRunsById(data: PatchFlowRunsByIdData): CancelablePromise<PatchFlowRunsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/flow_runs/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow Run
     * Get a flow run by id.
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.xPrefectApiVersion
     * @returns FlowRunResponse Successful Response
     * @throws ApiError
     */
    public static getFlowRunsById(data: GetFlowRunsByIdData): CancelablePromise<GetFlowRunsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flow_runs/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Flow Run
     * Delete a flow run by id.
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteFlowRunsById(data: DeleteFlowRunsByIdData): CancelablePromise<DeleteFlowRunsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/flow_runs/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Flow Runs
     * Query for flow runs.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postFlowRunsCount(data: PostFlowRunsCountData = {}): CancelablePromise<PostFlowRunsCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_runs/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Average Flow Run Lateness
     * Query for average flow-run lateness in seconds.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postFlowRunsLateness(data: PostFlowRunsLatenessData = {}): CancelablePromise<PostFlowRunsLatenessResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_runs/lateness',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Flow Run History
     * Query for flow run history data across a given range and interval.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns HistoryResponse Successful Response
     * @throws ApiError
     */
    public static postFlowRunsHistory(data: PostFlowRunsHistoryData): CancelablePromise<PostFlowRunsHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_runs/history',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow Run Graph V1
     * Get a task run dependency map for a given flow run.
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.xPrefectApiVersion
     * @returns DependencyResult Successful Response
     * @throws ApiError
     */
    public static getFlowRunsByIdGraph(data: GetFlowRunsByIdGraphData): CancelablePromise<GetFlowRunsByIdGraphResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flow_runs/{id}/graph',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow Run Graph V2
     * Get a graph of the tasks and subflow runs for the given flow run
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.since Only include runs that start or end after this time.
     * @param data.xPrefectApiVersion
     * @returns Graph Successful Response
     * @throws ApiError
     */
    public static getFlowRunsByIdGraphV2(data: GetFlowRunsByIdGraphV2Data): CancelablePromise<GetFlowRunsByIdGraphV2Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flow_runs/{id}/graph-v2',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                since: data.since
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Resume Flow Run
     * Resume a paused flow run.
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns OrchestrationResult Successful Response
     * @throws ApiError
     */
    public static postFlowRunsByIdResume(data: PostFlowRunsByIdResumeData): CancelablePromise<PostFlowRunsByIdResumeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_runs/{id}/resume',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow Runs
     * Query for flow runs.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns FlowRunResponse Successful Response
     * @throws ApiError
     */
    public static postFlowRunsFilter(data: PostFlowRunsFilterData = {}): CancelablePromise<PostFlowRunsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_runs/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Set Flow Run State
     * Set a flow run state, invoking any orchestration rules.
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns OrchestrationResult Successful Response
     * @throws ApiError
     */
    public static postFlowRunsByIdSetState(data: PostFlowRunsByIdSetStateData): CancelablePromise<PostFlowRunsByIdSetStateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_runs/{id}/set_state',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Flow Run Input
     * Create a key/value input for a flow run.
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postFlowRunsByIdInput(data: PostFlowRunsByIdInputData): CancelablePromise<PostFlowRunsByIdInputResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_runs/{id}/input',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Filter Flow Run Input
     * Filter flow run inputs by key prefix
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns FlowRunInput Successful Response
     * @throws ApiError
     */
    public static postFlowRunsByIdInputFilter(data: PostFlowRunsByIdInputFilterData): CancelablePromise<PostFlowRunsByIdInputFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_runs/{id}/input/filter',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow Run Input
     * Create a value from a flow run input
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.key The input key
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getFlowRunsByIdInputByKey(data: GetFlowRunsByIdInputByKeyData): CancelablePromise<GetFlowRunsByIdInputByKeyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flow_runs/{id}/input/{key}',
            path: {
                id: data.id,
                key: data.key
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Flow Run Input
     * Delete a flow run input
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.key The input key
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteFlowRunsByIdInputByKey(data: DeleteFlowRunsByIdInputByKeyData): CancelablePromise<DeleteFlowRunsByIdInputByKeyResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/flow_runs/{id}/input/{key}',
            path: {
                id: data.id,
                key: data.key
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Paginate Flow Runs
     * Pagination query for flow runs.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns FlowRunPaginationResponse Successful Response
     * @throws ApiError
     */
    public static postFlowRunsPaginate(data: PostFlowRunsPaginateData = {}): CancelablePromise<PostFlowRunsPaginateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_runs/paginate',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Download Logs
     * Download all flow run logs as a CSV file, collecting all logs until there are no more logs to retrieve.
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getFlowRunsByIdLogsDownload(data: GetFlowRunsByIdLogsDownloadData): CancelablePromise<GetFlowRunsByIdLogsDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flow_runs/{id}/logs/download',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Flow Run Labels
     * Update the labels of a flow run.
     * @param data The data for the request.
     * @param data.id The flow run id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchFlowRunsByIdLabels(data: PatchFlowRunsByIdLabelsData): CancelablePromise<PatchFlowRunsByIdLabelsResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/flow_runs/{id}/labels',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow Run History
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns SimpleFlowRun Successful Response
     * @throws ApiError
     */
    public static postUiFlowRunsHistory(data: PostUiFlowRunsHistoryData = {}): CancelablePromise<PostUiFlowRunsHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/flow_runs/history',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Task Runs By Flow Run
     * Get task run counts by flow run id.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postUiFlowRunsCountTaskRuns(data: PostUiFlowRunsCountTaskRunsData): CancelablePromise<PostUiFlowRunsCountTaskRunsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/flow_runs/count-task-runs',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class TaskRunsService {
    /**
     * Create Task Run
     * Create a task run. If a task run with the same flow_run_id,
     * task_key, and dynamic_key already exists, the existing task
     * run will be returned.
     *
     * If no state is provided, the task run will be created in a PENDING state.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns TaskRun Successful Response
     * @throws ApiError
     */
    public static postTaskRuns(data: PostTaskRunsData): CancelablePromise<PostTaskRunsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/task_runs/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Task Run
     * Updates a task run.
     * @param data The data for the request.
     * @param data.id The task run id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchTaskRunsById(data: PatchTaskRunsByIdData): CancelablePromise<PatchTaskRunsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/task_runs/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Task Run
     * Get a task run by id.
     * @param data The data for the request.
     * @param data.id The task run id
     * @param data.xPrefectApiVersion
     * @returns TaskRun Successful Response
     * @throws ApiError
     */
    public static getTaskRunsById(data: GetTaskRunsByIdData): CancelablePromise<GetTaskRunsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/task_runs/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Task Run
     * Delete a task run by id.
     * @param data The data for the request.
     * @param data.id The task run id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteTaskRunsById(data: DeleteTaskRunsByIdData): CancelablePromise<DeleteTaskRunsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/task_runs/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Task Runs
     * Count task runs.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postTaskRunsCount(data: PostTaskRunsCountData = {}): CancelablePromise<PostTaskRunsCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/task_runs/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Task Run History
     * Query for task run history data across a given range and interval.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns HistoryResponse Successful Response
     * @throws ApiError
     */
    public static postTaskRunsHistory(data: PostTaskRunsHistoryData): CancelablePromise<PostTaskRunsHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/task_runs/history',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Task Runs
     * Query for task runs.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns TaskRun Successful Response
     * @throws ApiError
     */
    public static postTaskRunsFilter(data: PostTaskRunsFilterData = {}): CancelablePromise<PostTaskRunsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/task_runs/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Set Task Run State
     * Set a task run state, invoking any orchestration rules.
     * @param data The data for the request.
     * @param data.id The task run id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns OrchestrationResult Successful Response
     * @throws ApiError
     */
    public static postTaskRunsByIdSetState(data: PostTaskRunsByIdSetStateData): CancelablePromise<PostTaskRunsByIdSetStateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/task_runs/{id}/set_state',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Dashboard Task Run Counts
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns TaskRunCount Successful Response
     * @throws ApiError
     */
    public static postUiTaskRunsDashboardCounts(data: PostUiTaskRunsDashboardCountsData): CancelablePromise<PostUiTaskRunsDashboardCountsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/task_runs/dashboard/counts',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Task Run Counts By State
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns CountByState Successful Response
     * @throws ApiError
     */
    public static postUiTaskRunsCount(data: PostUiTaskRunsCountData = {}): CancelablePromise<PostUiTaskRunsCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/task_runs/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class FlowRunStatesService {
    /**
     * Read Flow Run State
     * Get a flow run state by id.
     * @param data The data for the request.
     * @param data.id The flow run state id
     * @param data.xPrefectApiVersion
     * @returns State Successful Response
     * @throws ApiError
     */
    public static getFlowRunStatesById(data: GetFlowRunStatesByIdData): CancelablePromise<GetFlowRunStatesByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flow_run_states/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow Run States
     * Get states associated with a flow run.
     * @param data The data for the request.
     * @param data.flowRunId
     * @param data.xPrefectApiVersion
     * @returns State Successful Response
     * @throws ApiError
     */
    public static getFlowRunStates(data: GetFlowRunStatesData): CancelablePromise<GetFlowRunStatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flow_run_states/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                flow_run_id: data.flowRunId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class TaskRunStatesService {
    /**
     * Read Task Run State
     * Get a task run state by id.
     * @param data The data for the request.
     * @param data.id The task run state id
     * @param data.xPrefectApiVersion
     * @returns State Successful Response
     * @throws ApiError
     */
    public static getTaskRunStatesById(data: GetTaskRunStatesByIdData): CancelablePromise<GetTaskRunStatesByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/task_run_states/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Task Run States
     * Get states associated with a task run.
     * @param data The data for the request.
     * @param data.taskRunId
     * @param data.xPrefectApiVersion
     * @returns State Successful Response
     * @throws ApiError
     */
    public static getTaskRunStates(data: GetTaskRunStatesData): CancelablePromise<GetTaskRunStatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/task_run_states/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                task_run_id: data.taskRunId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class FlowRunNotificationPoliciesService {
    /**
     * Create Flow Run Notification Policy
     * Creates a new flow run notification policy.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns FlowRunNotificationPolicy Successful Response
     * @throws ApiError
     */
    public static postFlowRunNotificationPolicies(data: PostFlowRunNotificationPoliciesData): CancelablePromise<PostFlowRunNotificationPoliciesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_run_notification_policies/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Flow Run Notification Policy
     * Updates an existing flow run notification policy.
     * @param data The data for the request.
     * @param data.id The flow run notification policy id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchFlowRunNotificationPoliciesById(data: PatchFlowRunNotificationPoliciesByIdData): CancelablePromise<PatchFlowRunNotificationPoliciesByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/flow_run_notification_policies/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow Run Notification Policy
     * Get a flow run notification policy by id.
     * @param data The data for the request.
     * @param data.id The flow run notification policy id
     * @param data.xPrefectApiVersion
     * @returns FlowRunNotificationPolicy Successful Response
     * @throws ApiError
     */
    public static getFlowRunNotificationPoliciesById(data: GetFlowRunNotificationPoliciesByIdData): CancelablePromise<GetFlowRunNotificationPoliciesByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flow_run_notification_policies/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Flow Run Notification Policy
     * Delete a flow run notification policy by id.
     * @param data The data for the request.
     * @param data.id The flow run notification policy id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteFlowRunNotificationPoliciesById(data: DeleteFlowRunNotificationPoliciesByIdData): CancelablePromise<DeleteFlowRunNotificationPoliciesByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/flow_run_notification_policies/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow Run Notification Policies
     * Query for flow run notification policies.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns FlowRunNotificationPolicy Successful Response
     * @throws ApiError
     */
    public static postFlowRunNotificationPoliciesFilter(data: PostFlowRunNotificationPoliciesFilterData = {}): CancelablePromise<PostFlowRunNotificationPoliciesFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/flow_run_notification_policies/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DeploymentsService {
    /**
     * Create Deployment
     * Gracefully creates a new deployment from the provided schema. If a deployment with
     * the same name and flow_id already exists, the deployment is updated.
     *
     * If the deployment has an active schedule, flow runs will be scheduled.
     * When upserting, any scheduled runs from the existing deployment will be deleted.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns DeploymentResponse Successful Response
     * @throws ApiError
     */
    public static postDeployments(data: PostDeploymentsData): CancelablePromise<PostDeploymentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Deployment
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchDeploymentsById(data: PatchDeploymentsByIdData): CancelablePromise<PatchDeploymentsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/deployments/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Deployment
     * Get a deployment by id.
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.xPrefectApiVersion
     * @returns DeploymentResponse Successful Response
     * @throws ApiError
     */
    public static getDeploymentsById(data: GetDeploymentsByIdData): CancelablePromise<GetDeploymentsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/deployments/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Deployment
     * Delete a deployment by id.
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteDeploymentsById(data: DeleteDeploymentsByIdData): CancelablePromise<DeleteDeploymentsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/deployments/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Deployment By Name
     * Get a deployment using the name of the flow and the deployment.
     * @param data The data for the request.
     * @param data.flowName The name of the flow
     * @param data.deploymentName The name of the deployment
     * @param data.xPrefectApiVersion
     * @returns DeploymentResponse Successful Response
     * @throws ApiError
     */
    public static getDeploymentsNameByFlowNameByDeploymentName(data: GetDeploymentsNameByFlowNameByDeploymentNameData): CancelablePromise<GetDeploymentsNameByFlowNameByDeploymentNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/deployments/name/{flow_name}/{deployment_name}',
            path: {
                flow_name: data.flowName,
                deployment_name: data.deploymentName
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Deployments
     * Query for deployments.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns DeploymentResponse Successful Response
     * @throws ApiError
     */
    public static postDeploymentsFilter(data: PostDeploymentsFilterData = {}): CancelablePromise<PostDeploymentsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Paginate Deployments
     * Pagination query for flow runs.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns DeploymentPaginationResponse Successful Response
     * @throws ApiError
     */
    public static postDeploymentsPaginate(data: PostDeploymentsPaginateData = {}): CancelablePromise<PostDeploymentsPaginateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/paginate',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Scheduled Flow Runs For Deployments
     * Get scheduled runs for a set of deployments. Used by a runner to poll for work.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns FlowRunResponse Successful Response
     * @throws ApiError
     */
    public static postDeploymentsGetScheduledFlowRuns(data: PostDeploymentsGetScheduledFlowRunsData): CancelablePromise<PostDeploymentsGetScheduledFlowRunsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/get_scheduled_flow_runs',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Deployments
     * Count deployments.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postDeploymentsCount(data: PostDeploymentsCountData = {}): CancelablePromise<PostDeploymentsCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Schedule Deployment
     * Schedule runs for a deployment. For backfills, provide start/end times in the past.
     *
     * This function will generate the minimum number of runs that satisfy the min
     * and max times, and the min and max counts. Specifically, the following order
     * will be respected.
     *
     * - Runs will be generated starting on or after the `start_time`
     * - No more than `max_runs` runs will be generated
     * - No runs will be generated after `end_time` is reached
     * - At least `min_runs` runs will be generated
     * - Runs will be generated until at least `start_time + min_time` is reached
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postDeploymentsByIdSchedule(data: PostDeploymentsByIdScheduleData): CancelablePromise<PostDeploymentsByIdScheduleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/{id}/schedule',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Resume Deployment
     * Set a deployment schedule to active. Runs will be scheduled immediately.
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postDeploymentsByIdResumeDeployment(data: PostDeploymentsByIdResumeDeploymentData): CancelablePromise<PostDeploymentsByIdResumeDeploymentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/{id}/resume_deployment',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Pause Deployment
     * Set a deployment schedule to inactive. Any auto-scheduled runs still in a Scheduled
     * state will be deleted.
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postDeploymentsByIdPauseDeployment(data: PostDeploymentsByIdPauseDeploymentData): CancelablePromise<PostDeploymentsByIdPauseDeploymentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/{id}/pause_deployment',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Flow Run From Deployment
     * Create a flow run from a deployment.
     *
     * Any parameters not provided will be inferred from the deployment's parameters.
     * If tags are not provided, the deployment's tags will be used.
     *
     * If no state is provided, the flow run will be created in a SCHEDULED state.
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns FlowRunResponse Successful Response
     * @throws ApiError
     */
    public static postDeploymentsByIdCreateFlowRun(data: PostDeploymentsByIdCreateFlowRunData): CancelablePromise<PostDeploymentsByIdCreateFlowRunResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/{id}/create_flow_run',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * @deprecated
     * Work Queue Check For Deployment
     * Get list of work-queues that are able to pick up the specified deployment.
     *
     * This endpoint is intended to be used by the UI to provide users warnings
     * about deployments that are unable to be executed because there are no work
     * queues that will pick up their runs, based on existing filter criteria. It
     * may be deprecated in the future because there is not a strict relationship
     * between work queues and deployments.
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.xPrefectApiVersion
     * @returns WorkQueue Successful Response
     * @throws ApiError
     */
    public static getDeploymentsByIdWorkQueueCheck(data: GetDeploymentsByIdWorkQueueCheckData): CancelablePromise<GetDeploymentsByIdWorkQueueCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/deployments/{id}/work_queue_check',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Deployment Schedules
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.xPrefectApiVersion
     * @returns DeploymentSchedule Successful Response
     * @throws ApiError
     */
    public static getDeploymentsByIdSchedules(data: GetDeploymentsByIdSchedulesData): CancelablePromise<GetDeploymentsByIdSchedulesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/deployments/{id}/schedules',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Deployment Schedules
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns DeploymentSchedule Successful Response
     * @throws ApiError
     */
    public static postDeploymentsByIdSchedules(data: PostDeploymentsByIdSchedulesData): CancelablePromise<PostDeploymentsByIdSchedulesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deployments/{id}/schedules',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Deployment Schedule
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.scheduleId The schedule id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchDeploymentsByIdSchedulesByScheduleId(data: PatchDeploymentsByIdSchedulesByScheduleIdData): CancelablePromise<PatchDeploymentsByIdSchedulesByScheduleIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/deployments/{id}/schedules/{schedule_id}',
            path: {
                id: data.id,
                schedule_id: data.scheduleId
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Deployment Schedule
     * @param data The data for the request.
     * @param data.id The deployment id
     * @param data.scheduleId The schedule id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteDeploymentsByIdSchedulesByScheduleId(data: DeleteDeploymentsByIdSchedulesByScheduleIdData): CancelablePromise<DeleteDeploymentsByIdSchedulesByScheduleIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/deployments/{id}/schedules/{schedule_id}',
            path: {
                id: data.id,
                schedule_id: data.scheduleId
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class SavedSearchesService {
    /**
     * Create Saved Search
     * Gracefully creates a new saved search from the provided schema.
     *
     * If a saved search with the same name already exists, the saved search's fields are
     * replaced.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns SavedSearch Successful Response
     * @throws ApiError
     */
    public static putSavedSearches(data: PutSavedSearchesData): CancelablePromise<PutSavedSearchesResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/saved_searches/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Saved Search
     * Get a saved search by id.
     * @param data The data for the request.
     * @param data.id The saved search id
     * @param data.xPrefectApiVersion
     * @returns SavedSearch Successful Response
     * @throws ApiError
     */
    public static getSavedSearchesById(data: GetSavedSearchesByIdData): CancelablePromise<GetSavedSearchesByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/saved_searches/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Saved Search
     * Delete a saved search by id.
     * @param data The data for the request.
     * @param data.id The saved search id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteSavedSearchesById(data: DeleteSavedSearchesByIdData): CancelablePromise<DeleteSavedSearchesByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/saved_searches/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Saved Searches
     * Query for saved searches.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns SavedSearch Successful Response
     * @throws ApiError
     */
    public static postSavedSearchesFilter(data: PostSavedSearchesFilterData = {}): CancelablePromise<PostSavedSearchesFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/saved_searches/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LogsService {
    /**
     * Create Logs
     * Create new logs from the provided schema.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postLogs(data: PostLogsData): CancelablePromise<PostLogsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/logs/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Logs
     * Query for logs.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns Log Successful Response
     * @throws ApiError
     */
    public static postLogsFilter(data: PostLogsFilterData = {}): CancelablePromise<PostLogsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/logs/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ConcurrencyLimitsService {
    /**
     * Create Concurrency Limit
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns ConcurrencyLimit Successful Response
     * @throws ApiError
     */
    public static postConcurrencyLimits(data: PostConcurrencyLimitsData): CancelablePromise<PostConcurrencyLimitsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/concurrency_limits/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Concurrency Limit
     * Get a concurrency limit by id.
     *
     * The `active slots` field contains a list of TaskRun IDs currently using a
     * concurrency slot for the specified tag.
     * @param data The data for the request.
     * @param data.id The concurrency limit id
     * @param data.xPrefectApiVersion
     * @returns ConcurrencyLimit Successful Response
     * @throws ApiError
     */
    public static getConcurrencyLimitsById(data: GetConcurrencyLimitsByIdData): CancelablePromise<GetConcurrencyLimitsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/concurrency_limits/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Concurrency Limit
     * @param data The data for the request.
     * @param data.id The concurrency limit id
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteConcurrencyLimitsById(data: DeleteConcurrencyLimitsByIdData): CancelablePromise<DeleteConcurrencyLimitsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/concurrency_limits/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Concurrency Limit By Tag
     * Get a concurrency limit by tag.
     *
     * The `active slots` field contains a list of TaskRun IDs currently using a
     * concurrency slot for the specified tag.
     * @param data The data for the request.
     * @param data.tag The tag name
     * @param data.xPrefectApiVersion
     * @returns ConcurrencyLimit Successful Response
     * @throws ApiError
     */
    public static getConcurrencyLimitsTagByTag(data: GetConcurrencyLimitsTagByTagData): CancelablePromise<GetConcurrencyLimitsTagByTagResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/concurrency_limits/tag/{tag}',
            path: {
                tag: data.tag
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Concurrency Limit By Tag
     * @param data The data for the request.
     * @param data.tag The tag name
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteConcurrencyLimitsTagByTag(data: DeleteConcurrencyLimitsTagByTagData): CancelablePromise<DeleteConcurrencyLimitsTagByTagResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/concurrency_limits/tag/{tag}',
            path: {
                tag: data.tag
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Concurrency Limits
     * Query for concurrency limits.
     *
     * For each concurrency limit the `active slots` field contains a list of TaskRun IDs
     * currently using a concurrency slot for the specified tag.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns ConcurrencyLimit Successful Response
     * @throws ApiError
     */
    public static postConcurrencyLimitsFilter(data: PostConcurrencyLimitsFilterData = {}): CancelablePromise<PostConcurrencyLimitsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/concurrency_limits/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Concurrency Limit By Tag
     * @param data The data for the request.
     * @param data.tag The tag name
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postConcurrencyLimitsTagByTagReset(data: PostConcurrencyLimitsTagByTagResetData): CancelablePromise<PostConcurrencyLimitsTagByTagResetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/concurrency_limits/tag/{tag}/reset',
            path: {
                tag: data.tag
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Increment Concurrency Limits V1
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns MinimalConcurrencyLimitResponse Successful Response
     * @throws ApiError
     */
    public static postConcurrencyLimitsIncrement(data: PostConcurrencyLimitsIncrementData): CancelablePromise<PostConcurrencyLimitsIncrementResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/concurrency_limits/increment',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Decrement Concurrency Limits V1
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postConcurrencyLimitsDecrement(data: PostConcurrencyLimitsDecrementData): CancelablePromise<PostConcurrencyLimitsDecrementResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/concurrency_limits/decrement',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ConcurrencyLimitsV2Service {
    /**
     * Create Concurrency Limit V2
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns ConcurrencyLimitV2 Successful Response
     * @throws ApiError
     */
    public static postV2ConcurrencyLimits(data: PostV2ConcurrencyLimitsData): CancelablePromise<PostV2ConcurrencyLimitsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v2/concurrency_limits/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Concurrency Limit V2
     * @param data The data for the request.
     * @param data.idOrName The ID or name of the concurrency limit
     * @param data.xPrefectApiVersion
     * @returns GlobalConcurrencyLimitResponse Successful Response
     * @throws ApiError
     */
    public static getV2ConcurrencyLimitsByIdOrName(data: GetV2ConcurrencyLimitsByIdOrNameData): CancelablePromise<GetV2ConcurrencyLimitsByIdOrNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v2/concurrency_limits/{id_or_name}',
            path: {
                id_or_name: data.idOrName
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Concurrency Limit V2
     * @param data The data for the request.
     * @param data.idOrName The ID or name of the concurrency limit
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchV2ConcurrencyLimitsByIdOrName(data: PatchV2ConcurrencyLimitsByIdOrNameData): CancelablePromise<PatchV2ConcurrencyLimitsByIdOrNameResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/v2/concurrency_limits/{id_or_name}',
            path: {
                id_or_name: data.idOrName
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Concurrency Limit V2
     * @param data The data for the request.
     * @param data.idOrName The ID or name of the concurrency limit
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteV2ConcurrencyLimitsByIdOrName(data: DeleteV2ConcurrencyLimitsByIdOrNameData): CancelablePromise<DeleteV2ConcurrencyLimitsByIdOrNameResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/v2/concurrency_limits/{id_or_name}',
            path: {
                id_or_name: data.idOrName
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read All Concurrency Limits V2
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns GlobalConcurrencyLimitResponse Successful Response
     * @throws ApiError
     */
    public static postV2ConcurrencyLimitsFilter(data: PostV2ConcurrencyLimitsFilterData = {}): CancelablePromise<PostV2ConcurrencyLimitsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v2/concurrency_limits/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk Increment Active Slots
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns MinimalConcurrencyLimitResponse Successful Response
     * @throws ApiError
     */
    public static postV2ConcurrencyLimitsIncrement(data: PostV2ConcurrencyLimitsIncrementData): CancelablePromise<PostV2ConcurrencyLimitsIncrementResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v2/concurrency_limits/increment',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk Decrement Active Slots
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns MinimalConcurrencyLimitResponse Successful Response
     * @throws ApiError
     */
    public static postV2ConcurrencyLimitsDecrement(data: PostV2ConcurrencyLimitsDecrementData): CancelablePromise<PostV2ConcurrencyLimitsDecrementResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v2/concurrency_limits/decrement',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class BlockTypesService {
    /**
     * Create Block Type
     * Create a new block type
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns BlockType Successful Response
     * @throws ApiError
     */
    public static postBlockTypes(data: PostBlockTypesData): CancelablePromise<PostBlockTypesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/block_types/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Type By Id
     * Get a block type by ID.
     * @param data The data for the request.
     * @param data.id The block type ID
     * @param data.xPrefectApiVersion
     * @returns BlockType Successful Response
     * @throws ApiError
     */
    public static getBlockTypesById(data: GetBlockTypesByIdData): CancelablePromise<GetBlockTypesByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/block_types/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Block Type
     * Update a block type.
     * @param data The data for the request.
     * @param data.id The block type ID
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchBlockTypesById(data: PatchBlockTypesByIdData): CancelablePromise<PatchBlockTypesByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/block_types/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Block Type
     * @param data The data for the request.
     * @param data.id The block type ID
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteBlockTypesById(data: DeleteBlockTypesByIdData): CancelablePromise<DeleteBlockTypesByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/block_types/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Type By Slug
     * Get a block type by name.
     * @param data The data for the request.
     * @param data.slug The block type name
     * @param data.xPrefectApiVersion
     * @returns BlockType Successful Response
     * @throws ApiError
     */
    public static getBlockTypesSlugBySlug(data: GetBlockTypesSlugBySlugData): CancelablePromise<GetBlockTypesSlugBySlugResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/block_types/slug/{slug}',
            path: {
                slug: data.slug
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Types
     * Gets all block types. Optionally limit return with limit and offset.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns BlockType Successful Response
     * @throws ApiError
     */
    public static postBlockTypesFilter(data: PostBlockTypesFilterData = {}): CancelablePromise<PostBlockTypesFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/block_types/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Documents For Block Type
     * @param data The data for the request.
     * @param data.slug The block type name
     * @param data.includeSecrets Whether to include sensitive values in the block document.
     * @param data.xPrefectApiVersion
     * @returns BlockDocument Successful Response
     * @throws ApiError
     */
    public static getBlockTypesSlugBySlugBlockDocuments(data: GetBlockTypesSlugBySlugBlockDocumentsData): CancelablePromise<GetBlockTypesSlugBySlugBlockDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/block_types/slug/{slug}/block_documents',
            path: {
                slug: data.slug
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                include_secrets: data.includeSecrets
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Document By Name For Block Type
     * @param data The data for the request.
     * @param data.slug The block type name
     * @param data.blockDocumentName The block type name
     * @param data.includeSecrets Whether to include sensitive values in the block document.
     * @param data.xPrefectApiVersion
     * @returns BlockDocument Successful Response
     * @throws ApiError
     */
    public static getBlockTypesSlugBySlugBlockDocumentsNameByBlockDocumentName(data: GetBlockTypesSlugBySlugBlockDocumentsNameByBlockDocumentNameData): CancelablePromise<GetBlockTypesSlugBySlugBlockDocumentsNameByBlockDocumentNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/block_types/slug/{slug}/block_documents/name/{block_document_name}',
            path: {
                slug: data.slug,
                block_document_name: data.blockDocumentName
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                include_secrets: data.includeSecrets
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Install System Block Types
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postBlockTypesInstallSystemBlockTypes(data: PostBlockTypesInstallSystemBlockTypesData = {}): CancelablePromise<PostBlockTypesInstallSystemBlockTypesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/block_types/install_system_block_types',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class BlockDocumentsService {
    /**
     * Read Block Documents For Block Type
     * @param data The data for the request.
     * @param data.slug The block type name
     * @param data.includeSecrets Whether to include sensitive values in the block document.
     * @param data.xPrefectApiVersion
     * @returns BlockDocument Successful Response
     * @throws ApiError
     */
    public static getBlockTypesSlugBySlugBlockDocuments(data: GetBlockTypesSlugBySlugBlockDocumentsData): CancelablePromise<GetBlockTypesSlugBySlugBlockDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/block_types/slug/{slug}/block_documents',
            path: {
                slug: data.slug
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                include_secrets: data.includeSecrets
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Document By Name For Block Type
     * @param data The data for the request.
     * @param data.slug The block type name
     * @param data.blockDocumentName The block type name
     * @param data.includeSecrets Whether to include sensitive values in the block document.
     * @param data.xPrefectApiVersion
     * @returns BlockDocument Successful Response
     * @throws ApiError
     */
    public static getBlockTypesSlugBySlugBlockDocumentsNameByBlockDocumentName(data: GetBlockTypesSlugBySlugBlockDocumentsNameByBlockDocumentNameData): CancelablePromise<GetBlockTypesSlugBySlugBlockDocumentsNameByBlockDocumentNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/block_types/slug/{slug}/block_documents/name/{block_document_name}',
            path: {
                slug: data.slug,
                block_document_name: data.blockDocumentName
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                include_secrets: data.includeSecrets
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Block Document
     * Create a new block document.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns BlockDocument Successful Response
     * @throws ApiError
     */
    public static postBlockDocuments(data: PostBlockDocumentsData): CancelablePromise<PostBlockDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/block_documents/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Documents
     * Query for block documents.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns BlockDocument Successful Response
     * @throws ApiError
     */
    public static postBlockDocumentsFilter(data: PostBlockDocumentsFilterData = {}): CancelablePromise<PostBlockDocumentsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/block_documents/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Block Documents
     * Count block documents.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postBlockDocumentsCount(data: PostBlockDocumentsCountData = {}): CancelablePromise<PostBlockDocumentsCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/block_documents/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Document By Id
     * @param data The data for the request.
     * @param data.id The block document id
     * @param data.includeSecrets Whether to include sensitive values in the block document.
     * @param data.xPrefectApiVersion
     * @returns BlockDocument Successful Response
     * @throws ApiError
     */
    public static getBlockDocumentsById(data: GetBlockDocumentsByIdData): CancelablePromise<GetBlockDocumentsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/block_documents/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                include_secrets: data.includeSecrets
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Block Document
     * @param data The data for the request.
     * @param data.id The block document id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteBlockDocumentsById(data: DeleteBlockDocumentsByIdData): CancelablePromise<DeleteBlockDocumentsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/block_documents/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Block Document Data
     * @param data The data for the request.
     * @param data.id The block document id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchBlockDocumentsById(data: PatchBlockDocumentsByIdData): CancelablePromise<PatchBlockDocumentsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/block_documents/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class WorkPoolsService {
    /**
     * Create Work Pool
     * Creates a new work pool. If a work pool with the same
     * name already exists, an error will be raised.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns WorkPool Successful Response
     * @throws ApiError
     */
    public static postWorkPools(data: PostWorkPoolsData): CancelablePromise<PostWorkPoolsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_pools/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Work Pool
     * Read a work pool by name
     * @param data The data for the request.
     * @param data.name The work pool name
     * @param data.xPrefectApiVersion
     * @returns WorkPool Successful Response
     * @throws ApiError
     */
    public static getWorkPoolsByName(data: GetWorkPoolsByNameData): CancelablePromise<GetWorkPoolsByNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/work_pools/{name}',
            path: {
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Work Pool
     * Update a work pool
     * @param data The data for the request.
     * @param data.name The work pool name
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchWorkPoolsByName(data: PatchWorkPoolsByNameData): CancelablePromise<PatchWorkPoolsByNameResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/work_pools/{name}',
            path: {
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Work Pool
     * Delete a work pool
     * @param data The data for the request.
     * @param data.name The work pool name
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteWorkPoolsByName(data: DeleteWorkPoolsByNameData): CancelablePromise<DeleteWorkPoolsByNameResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/work_pools/{name}',
            path: {
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Work Pools
     * Read multiple work pools
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns WorkPool Successful Response
     * @throws ApiError
     */
    public static postWorkPoolsFilter(data: PostWorkPoolsFilterData = {}): CancelablePromise<PostWorkPoolsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_pools/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Work Pools
     * Count work pools
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postWorkPoolsCount(data: PostWorkPoolsCountData = {}): CancelablePromise<PostWorkPoolsCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_pools/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Scheduled Flow Runs
     * Load scheduled runs for a worker
     * @param data The data for the request.
     * @param data.name The work pool name
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns WorkerFlowRunResponse Successful Response
     * @throws ApiError
     */
    public static postWorkPoolsByNameGetScheduledFlowRuns(data: PostWorkPoolsByNameGetScheduledFlowRunsData): CancelablePromise<PostWorkPoolsByNameGetScheduledFlowRunsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_pools/{name}/get_scheduled_flow_runs',
            path: {
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Work Queue
     * Creates a new work pool queue. If a work pool queue with the same
     * name already exists, an error will be raised.
     * @param data The data for the request.
     * @param data.workPoolName The work pool name
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns WorkQueueResponse Successful Response
     * @throws ApiError
     */
    public static postWorkPoolsByWorkPoolNameQueues(data: PostWorkPoolsByWorkPoolNameQueuesData): CancelablePromise<PostWorkPoolsByWorkPoolNameQueuesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_pools/{work_pool_name}/queues',
            path: {
                work_pool_name: data.workPoolName
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Work Queue
     * Read a work pool queue
     * @param data The data for the request.
     * @param data.workPoolName The work pool name
     * @param data.name The work pool queue name
     * @param data.xPrefectApiVersion
     * @returns WorkQueueResponse Successful Response
     * @throws ApiError
     */
    public static getWorkPoolsByWorkPoolNameQueuesByName(data: GetWorkPoolsByWorkPoolNameQueuesByNameData): CancelablePromise<GetWorkPoolsByWorkPoolNameQueuesByNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/work_pools/{work_pool_name}/queues/{name}',
            path: {
                work_pool_name: data.workPoolName,
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Work Queue
     * Update a work pool queue
     * @param data The data for the request.
     * @param data.workPoolName The work pool name
     * @param data.name The work pool queue name
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchWorkPoolsByWorkPoolNameQueuesByName(data: PatchWorkPoolsByWorkPoolNameQueuesByNameData): CancelablePromise<PatchWorkPoolsByWorkPoolNameQueuesByNameResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/work_pools/{work_pool_name}/queues/{name}',
            path: {
                work_pool_name: data.workPoolName,
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Work Queue
     * Delete a work pool queue
     * @param data The data for the request.
     * @param data.workPoolName The work pool name
     * @param data.name The work pool queue name
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteWorkPoolsByWorkPoolNameQueuesByName(data: DeleteWorkPoolsByWorkPoolNameQueuesByNameData): CancelablePromise<DeleteWorkPoolsByWorkPoolNameQueuesByNameResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/work_pools/{work_pool_name}/queues/{name}',
            path: {
                work_pool_name: data.workPoolName,
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Work Queues
     * Read all work pool queues
     * @param data The data for the request.
     * @param data.workPoolName The work pool name
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns WorkQueueResponse Successful Response
     * @throws ApiError
     */
    public static postWorkPoolsByWorkPoolNameQueuesFilter(data: PostWorkPoolsByWorkPoolNameQueuesFilterData): CancelablePromise<PostWorkPoolsByWorkPoolNameQueuesFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_pools/{work_pool_name}/queues/filter',
            path: {
                work_pool_name: data.workPoolName
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Worker Heartbeat
     * @param data The data for the request.
     * @param data.workPoolName The work pool name
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static postWorkPoolsByWorkPoolNameWorkersHeartbeat(data: PostWorkPoolsByWorkPoolNameWorkersHeartbeatData): CancelablePromise<PostWorkPoolsByWorkPoolNameWorkersHeartbeatResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_pools/{work_pool_name}/workers/heartbeat',
            path: {
                work_pool_name: data.workPoolName
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Workers
     * Read all worker processes
     * @param data The data for the request.
     * @param data.workPoolName The work pool name
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns WorkerResponse Successful Response
     * @throws ApiError
     */
    public static postWorkPoolsByWorkPoolNameWorkersFilter(data: PostWorkPoolsByWorkPoolNameWorkersFilterData): CancelablePromise<PostWorkPoolsByWorkPoolNameWorkersFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_pools/{work_pool_name}/workers/filter',
            path: {
                work_pool_name: data.workPoolName
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Worker
     * Delete a work pool's worker
     * @param data The data for the request.
     * @param data.workPoolName The work pool name
     * @param data.name The work pool's worker name
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteWorkPoolsByWorkPoolNameWorkersByName(data: DeleteWorkPoolsByWorkPoolNameWorkersByNameData): CancelablePromise<DeleteWorkPoolsByWorkPoolNameWorkersByNameResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/work_pools/{work_pool_name}/workers/{name}',
            path: {
                work_pool_name: data.workPoolName,
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class TaskWorkersService {
    /**
     * Read Task Workers
     * Read active task workers. Optionally filter by task keys.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns TaskWorkerResponse Successful Response
     * @throws ApiError
     */
    public static postTaskWorkersFilter(data: PostTaskWorkersFilterData = {}): CancelablePromise<PostTaskWorkersFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/task_workers/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class WorkQueuesService {
    /**
     * Create Work Queue
     * Creates a new work queue.
     *
     * If a work queue with the same name already exists, an error
     * will be raised.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns WorkQueueResponse Successful Response
     * @throws ApiError
     */
    public static postWorkQueues(data: PostWorkQueuesData): CancelablePromise<PostWorkQueuesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_queues/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Work Queue
     * Updates an existing work queue.
     * @param data The data for the request.
     * @param data.id The work queue id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchWorkQueuesById(data: PatchWorkQueuesByIdData): CancelablePromise<PatchWorkQueuesByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/work_queues/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Work Queue
     * Get a work queue by id.
     * @param data The data for the request.
     * @param data.id The work queue id
     * @param data.xPrefectApiVersion
     * @returns WorkQueueResponse Successful Response
     * @throws ApiError
     */
    public static getWorkQueuesById(data: GetWorkQueuesByIdData): CancelablePromise<GetWorkQueuesByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/work_queues/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Work Queue
     * Delete a work queue by id.
     * @param data The data for the request.
     * @param data.id The work queue id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteWorkQueuesById(data: DeleteWorkQueuesByIdData): CancelablePromise<DeleteWorkQueuesByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/work_queues/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Work Queue By Name
     * Get a work queue by id.
     * @param data The data for the request.
     * @param data.name The work queue name
     * @param data.xPrefectApiVersion
     * @returns WorkQueueResponse Successful Response
     * @throws ApiError
     */
    public static getWorkQueuesNameByName(data: GetWorkQueuesNameByNameData): CancelablePromise<GetWorkQueuesNameByNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/work_queues/name/{name}',
            path: {
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Work Queue Runs
     * Get flow runs from the work queue.
     * @param data The data for the request.
     * @param data.id The work queue id
     * @param data.xPrefectUi A header to indicate this request came from the Prefect UI.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns FlowRunResponse Successful Response
     * @throws ApiError
     */
    public static postWorkQueuesByIdGetRuns(data: PostWorkQueuesByIdGetRunsData): CancelablePromise<PostWorkQueuesByIdGetRunsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_queues/{id}/get_runs',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-ui': data.xPrefectUi,
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Work Queues
     * Query for work queues.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns WorkQueueResponse Successful Response
     * @throws ApiError
     */
    public static postWorkQueuesFilter(data: PostWorkQueuesFilterData = {}): CancelablePromise<PostWorkQueuesFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/work_queues/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Work Queue Status
     * Get the status of a work queue.
     * @param data The data for the request.
     * @param data.id The work queue id
     * @param data.xPrefectApiVersion
     * @returns WorkQueueStatusDetail Successful Response
     * @throws ApiError
     */
    public static getWorkQueuesByIdStatus(data: GetWorkQueuesByIdStatusData): CancelablePromise<GetWorkQueuesByIdStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/work_queues/{id}/status',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ArtifactsService {
    /**
     * Create Artifact
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns Artifact Successful Response
     * @throws ApiError
     */
    public static postArtifacts(data: PostArtifactsData): CancelablePromise<PostArtifactsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/artifacts/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Artifact
     * Retrieve an artifact from the database.
     * @param data The data for the request.
     * @param data.id The ID of the artifact to retrieve.
     * @param data.xPrefectApiVersion
     * @returns Artifact Successful Response
     * @throws ApiError
     */
    public static getArtifactsById(data: GetArtifactsByIdData): CancelablePromise<GetArtifactsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/artifacts/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Artifact
     * Update an artifact in the database.
     * @param data The data for the request.
     * @param data.id The ID of the artifact to update.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchArtifactsById(data: PatchArtifactsByIdData): CancelablePromise<PatchArtifactsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/artifacts/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Artifact
     * Delete an artifact from the database.
     * @param data The data for the request.
     * @param data.id The ID of the artifact to delete.
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteArtifactsById(data: DeleteArtifactsByIdData): CancelablePromise<DeleteArtifactsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/artifacts/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Latest Artifact
     * Retrieve the latest artifact from the artifact table.
     * @param data The data for the request.
     * @param data.key The key of the artifact to retrieve.
     * @param data.xPrefectApiVersion
     * @returns Artifact Successful Response
     * @throws ApiError
     */
    public static getArtifactsByKeyLatest(data: GetArtifactsByKeyLatestData): CancelablePromise<GetArtifactsByKeyLatestResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/artifacts/{key}/latest',
            path: {
                key: data.key
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Artifacts
     * Retrieve artifacts from the database.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns Artifact Successful Response
     * @throws ApiError
     */
    public static postArtifactsFilter(data: PostArtifactsFilterData = {}): CancelablePromise<PostArtifactsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/artifacts/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Latest Artifacts
     * Retrieve artifacts from the database.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns ArtifactCollection Successful Response
     * @throws ApiError
     */
    public static postArtifactsLatestFilter(data: PostArtifactsLatestFilterData = {}): CancelablePromise<PostArtifactsLatestFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/artifacts/latest/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Artifacts
     * Count artifacts from the database.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postArtifactsCount(data: PostArtifactsCountData = {}): CancelablePromise<PostArtifactsCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/artifacts/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Latest Artifacts
     * Count artifacts from the database.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postArtifactsLatestCount(data: PostArtifactsLatestCountData = {}): CancelablePromise<PostArtifactsLatestCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/artifacts/latest/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class BlockSchemasService {
    /**
     * Create Block Schema
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns BlockSchema Successful Response
     * @throws ApiError
     */
    public static postBlockSchemas(data: PostBlockSchemasData): CancelablePromise<PostBlockSchemasResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/block_schemas/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Block Schema
     * Delete a block schema by id.
     * @param data The data for the request.
     * @param data.id The block schema id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteBlockSchemasById(data: DeleteBlockSchemasByIdData): CancelablePromise<DeleteBlockSchemasByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/block_schemas/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Schema By Id
     * Get a block schema by id.
     * @param data The data for the request.
     * @param data.id The block schema id
     * @param data.xPrefectApiVersion
     * @returns BlockSchema Successful Response
     * @throws ApiError
     */
    public static getBlockSchemasById(data: GetBlockSchemasByIdData): CancelablePromise<GetBlockSchemasByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/block_schemas/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Schemas
     * Read all block schemas, optionally filtered by type
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns BlockSchema Successful Response
     * @throws ApiError
     */
    public static postBlockSchemasFilter(data: PostBlockSchemasFilterData = {}): CancelablePromise<PostBlockSchemasFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/block_schemas/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Block Schema By Checksum
     * @param data The data for the request.
     * @param data.checksum The block schema checksum
     * @param data.version Version of block schema. If not provided the most recently created block schema with the matching checksum will be returned.
     * @param data.xPrefectApiVersion
     * @returns BlockSchema Successful Response
     * @throws ApiError
     */
    public static getBlockSchemasChecksumByChecksum(data: GetBlockSchemasChecksumByChecksumData): CancelablePromise<GetBlockSchemasChecksumByChecksumResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/block_schemas/checksum/{checksum}',
            path: {
                checksum: data.checksum
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                version: data.version
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class BlockCapabilitiesService {
    /**
     * Read Available Block Capabilities
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getBlockCapabilities(data: GetBlockCapabilitiesData = {}): CancelablePromise<GetBlockCapabilitiesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/block_capabilities/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class CollectionsService {
    /**
     * Read View Content
     * Reads the content of a view from the prefect-collection-registry.
     * @param data The data for the request.
     * @param data.view
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getCollectionsViewsByView(data: GetCollectionsViewsByViewData): CancelablePromise<GetCollectionsViewsByViewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/collections/views/{view}',
            path: {
                view: data.view
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class VariablesService {
    /**
     * Create Variable
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns Variable Successful Response
     * @throws ApiError
     */
    public static postVariables(data: PostVariablesData): CancelablePromise<PostVariablesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/variables/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Variable
     * @param data The data for the request.
     * @param data.id
     * @param data.xPrefectApiVersion
     * @returns Variable Successful Response
     * @throws ApiError
     */
    public static getVariablesById(data: GetVariablesByIdData): CancelablePromise<GetVariablesByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/variables/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Variable
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchVariablesById(data: PatchVariablesByIdData): CancelablePromise<PatchVariablesByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/variables/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Variable
     * @param data The data for the request.
     * @param data.id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteVariablesById(data: DeleteVariablesByIdData): CancelablePromise<DeleteVariablesByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/variables/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Variable By Name
     * @param data The data for the request.
     * @param data.name
     * @param data.xPrefectApiVersion
     * @returns Variable Successful Response
     * @throws ApiError
     */
    public static getVariablesNameByName(data: GetVariablesNameByNameData): CancelablePromise<GetVariablesNameByNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/variables/name/{name}',
            path: {
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Variable By Name
     * @param data The data for the request.
     * @param data.name
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchVariablesNameByName(data: PatchVariablesNameByNameData): CancelablePromise<PatchVariablesNameByNameResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/variables/name/{name}',
            path: {
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Variable By Name
     * @param data The data for the request.
     * @param data.name
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteVariablesNameByName(data: DeleteVariablesNameByNameData): CancelablePromise<DeleteVariablesNameByNameResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/variables/name/{name}',
            path: {
                name: data.name
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Variables
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns Variable Successful Response
     * @throws ApiError
     */
    public static postVariablesFilter(data: PostVariablesFilterData = {}): CancelablePromise<PostVariablesFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/variables/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Variables
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postVariablesCount(data: PostVariablesCountData = {}): CancelablePromise<PostVariablesCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/variables/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DefaultService {
    /**
     * Create Csrf Token
     * Create or update a CSRF token for a client
     * @param data The data for the request.
     * @param data.client The client to create a CSRF token for
     * @param data.xPrefectApiVersion
     * @returns CsrfToken Successful Response
     * @throws ApiError
     */
    public static getCsrfToken(data: GetCsrfTokenData): CancelablePromise<GetCsrfTokenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/csrf-token',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                client: data.client
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class EventsService {
    /**
     * Create Events
     * Record a batch of Events
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static postEvents(data: PostEventsData): CancelablePromise<PostEventsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/events',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Events
     * Queries for Events matching the given filter criteria in the given Account.  Returns
     * the first page of results, and the URL to request the next page (if there are more
     * results).
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns EventPage Successful Response
     * @throws ApiError
     */
    public static postEventsFilter(data: PostEventsFilterData = {}): CancelablePromise<PostEventsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/events/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Account Events Page
     * Returns the next page of Events for a previous query against the given Account, and
     * the URL to request the next page (if there are more results).
     * @param data The data for the request.
     * @param data.pageToken
     * @param data.xPrefectApiVersion
     * @returns EventPage Successful Response
     * @throws ApiError
     */
    public static getEventsFilterNext(data: GetEventsFilterNextData): CancelablePromise<GetEventsFilterNextResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/events/filter/next',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            query: {
                'page-token': data.pageToken
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Account Events
     * Returns distinct objects and the count of events associated with them.  Objects
     * that can be counted include the day the event occurred, the type of event, or
     * the IDs of the resources associated with the event.
     * @param data The data for the request.
     * @param data.countable
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns EventCount Successful Response
     * @throws ApiError
     */
    public static postEventsCountByByCountable(data: PostEventsCountByByCountableData): CancelablePromise<PostEventsCountByByCountableResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/events/count-by/{countable}',
            path: {
                countable: data.countable
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class AutomationsService {
    /**
     * Create Automation
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns Automation Successful Response
     * @throws ApiError
     */
    public static postAutomations(data: PostAutomationsData): CancelablePromise<PostAutomationsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/automations/',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Automation
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static putAutomationsById(data: PutAutomationsByIdData): CancelablePromise<PutAutomationsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/automations/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Patch Automation
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static patchAutomationsById(data: PatchAutomationsByIdData): CancelablePromise<PatchAutomationsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/automations/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Automation
     * @param data The data for the request.
     * @param data.id
     * @param data.xPrefectApiVersion
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteAutomationsById(data: DeleteAutomationsByIdData): CancelablePromise<DeleteAutomationsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/automations/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Automation
     * @param data The data for the request.
     * @param data.id
     * @param data.xPrefectApiVersion
     * @returns Automation Successful Response
     * @throws ApiError
     */
    public static getAutomationsById(data: GetAutomationsByIdData): CancelablePromise<GetAutomationsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/automations/{id}',
            path: {
                id: data.id
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Automations
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns Automation Successful Response
     * @throws ApiError
     */
    public static postAutomationsFilter(data: PostAutomationsFilterData = {}): CancelablePromise<PostAutomationsFilterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/automations/filter',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Automations
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postAutomationsCount(data: PostAutomationsCountData = {}): CancelablePromise<PostAutomationsCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/automations/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Automations Related To Resource
     * @param data The data for the request.
     * @param data.resourceId
     * @param data.xPrefectApiVersion
     * @returns Automation Successful Response
     * @throws ApiError
     */
    public static getAutomationsRelatedToByResourceId(data: GetAutomationsRelatedToByResourceIdData): CancelablePromise<GetAutomationsRelatedToByResourceIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/automations/related-to/{resource_id}',
            path: {
                resource_id: data.resourceId
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Automations Owned By Resource
     * @param data The data for the request.
     * @param data.resourceId
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteAutomationsOwnedByByResourceId(data: DeleteAutomationsOwnedByByResourceIdData): CancelablePromise<DeleteAutomationsOwnedByByResourceIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/automations/owned-by/{resource_id}',
            path: {
                resource_id: data.resourceId
            },
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Validate Template
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postTemplatesValidate(data: PostTemplatesValidateData = {}): CancelablePromise<PostTemplatesValidateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/templates/validate',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UiService {
    /**
     * Count Deployments By Flow
     * Get deployment counts by flow id.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postUiFlowsCountDeployments(data: PostUiFlowsCountDeploymentsData): CancelablePromise<PostUiFlowsCountDeploymentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/flows/count-deployments',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Next Runs By Flow
     * Get the next flow run by flow id.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postUiFlowsNextRuns(data: PostUiFlowsNextRunsData): CancelablePromise<PostUiFlowsNextRunsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/flows/next-runs',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Flow Run History
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns SimpleFlowRun Successful Response
     * @throws ApiError
     */
    public static postUiFlowRunsHistory(data: PostUiFlowRunsHistoryData = {}): CancelablePromise<PostUiFlowRunsHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/flow_runs/history',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Count Task Runs By Flow Run
     * Get task run counts by flow run id.
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns number Successful Response
     * @throws ApiError
     */
    public static postUiFlowRunsCountTaskRuns(data: PostUiFlowRunsCountTaskRunsData): CancelablePromise<PostUiFlowRunsCountTaskRunsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/flow_runs/count-task-runs',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Validate Obj
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postUiSchemasValidate(data: PostUiSchemasValidateData): CancelablePromise<PostUiSchemasValidateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/schemas/validate',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Dashboard Task Run Counts
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns TaskRunCount Successful Response
     * @throws ApiError
     */
    public static postUiTaskRunsDashboardCounts(data: PostUiTaskRunsDashboardCountsData): CancelablePromise<PostUiTaskRunsDashboardCountsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/task_runs/dashboard/counts',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Task Run Counts By State
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns CountByState Successful Response
     * @throws ApiError
     */
    public static postUiTaskRunsCount(data: PostUiTaskRunsCountData = {}): CancelablePromise<PostUiTaskRunsCountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/task_runs/count',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class SchemasService {
    /**
     * Validate Obj
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xPrefectApiVersion
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postUiSchemasValidate(data: PostUiSchemasValidateData): CancelablePromise<PostUiSchemasValidateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ui/schemas/validate',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class AdminService {
    /**
     * Read Settings
     * Get the current Prefect REST API settings.
     *
     * Secret setting values will be obfuscated.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @returns Settings Successful Response
     * @throws ApiError
     */
    public static getAdminSettings(data: GetAdminSettingsData = {}): CancelablePromise<GetAdminSettingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/admin/settings',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Version
     * Returns the Prefect version number
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getAdminVersion(data: GetAdminVersionData = {}): CancelablePromise<GetAdminVersionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/admin/version',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Clear Database
     * Clear all database tables without dropping them.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns void Successful Response
     * @throws ApiError
     */
    public static postAdminDatabaseClear(data: PostAdminDatabaseClearData = {}): CancelablePromise<PostAdminDatabaseClearResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/admin/database/clear',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Drop Database
     * Drop all database objects.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns void Successful Response
     * @throws ApiError
     */
    public static postAdminDatabaseDrop(data: PostAdminDatabaseDropData = {}): CancelablePromise<PostAdminDatabaseDropResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/admin/database/drop',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Database
     * Create all database objects.
     * @param data The data for the request.
     * @param data.xPrefectApiVersion
     * @param data.requestBody
     * @returns void Successful Response
     * @throws ApiError
     */
    public static postAdminDatabaseCreate(data: PostAdminDatabaseCreateData = {}): CancelablePromise<PostAdminDatabaseCreateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/admin/database/create',
            headers: {
                'x-prefect-api-version': data.xPrefectApiVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}