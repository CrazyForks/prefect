import type { EventFilterAnyResource } from "./eventFilterAnyResource";
import type { EventFilterEvent } from "./eventFilterEvent";
import type { EventFilterRelated } from "./eventFilterRelated";
import type { EventFilterResource } from "./eventFilterResource";
import type { EventIDFilter } from "./eventIDFilter";
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import type { EventOccurredFilter } from "./eventOccurredFilter";
import type { EventOrder } from "./eventOrder";

export interface EventFilter {
	/** Filter criteria for when the events occurred */
	occurred?: EventOccurredFilter;
	/** Filter criteria for the event name */
	event?: EventFilterEvent;
	/** Filter criteria for any resource involved in the event */
	any_resource?: EventFilterAnyResource;
	/** Filter criteria for the resource of the event */
	resource?: EventFilterResource;
	/** Filter criteria for the related resources of the event */
	related?: EventFilterRelated;
	/** Filter criteria for the events' ID */
	id?: EventIDFilter;
	/** The order to return filtered events */
	order?: EventOrder;
}
