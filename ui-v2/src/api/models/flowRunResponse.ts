import type { FlowRunPolicy } from "./flowRunPolicy";
import type { FlowRunResponseContext } from "./flowRunResponseContext";
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import type { FlowRunResponseCreated } from "./flowRunResponseCreated";
import type { FlowRunResponseCreatedBy } from "./flowRunResponseCreatedBy";
import type { FlowRunResponseDeploymentId } from "./flowRunResponseDeploymentId";
import type { FlowRunResponseDeploymentVersion } from "./flowRunResponseDeploymentVersion";
import type { FlowRunResponseEndTime } from "./flowRunResponseEndTime";
import type { FlowRunResponseExpectedStartTime } from "./flowRunResponseExpectedStartTime";
import type { FlowRunResponseFlowVersion } from "./flowRunResponseFlowVersion";
import type { FlowRunResponseIdempotencyKey } from "./flowRunResponseIdempotencyKey";
import type { FlowRunResponseInfrastructureDocumentId } from "./flowRunResponseInfrastructureDocumentId";
import type { FlowRunResponseInfrastructurePid } from "./flowRunResponseInfrastructurePid";
import type { FlowRunResponseJobVariables } from "./flowRunResponseJobVariables";
import type { FlowRunResponseLabels } from "./flowRunResponseLabels";
import type { FlowRunResponseNextScheduledStartTime } from "./flowRunResponseNextScheduledStartTime";
import type { FlowRunResponseParameters } from "./flowRunResponseParameters";
import type { FlowRunResponseParentTaskRunId } from "./flowRunResponseParentTaskRunId";
import type { FlowRunResponseStartTime } from "./flowRunResponseStartTime";
import type { FlowRunResponseState } from "./flowRunResponseState";
import type { FlowRunResponseStateId } from "./flowRunResponseStateId";
import type { FlowRunResponseStateName } from "./flowRunResponseStateName";
import type { FlowRunResponseStateType } from "./flowRunResponseStateType";
import type { FlowRunResponseUpdated } from "./flowRunResponseUpdated";
import type { FlowRunResponseWorkPoolId } from "./flowRunResponseWorkPoolId";
import type { FlowRunResponseWorkPoolName } from "./flowRunResponseWorkPoolName";
import type { FlowRunResponseWorkQueueId } from "./flowRunResponseWorkQueueId";
import type { FlowRunResponseWorkQueueName } from "./flowRunResponseWorkQueueName";

export interface FlowRunResponse {
	id: string;
	created: FlowRunResponseCreated;
	updated: FlowRunResponseUpdated;
	/** The name of the flow run. Defaults to a random slug if not specified. */
	name?: string;
	/** The id of the flow being run. */
	flow_id: string;
	/** The id of the flow run's current state. */
	state_id?: FlowRunResponseStateId;
	/** The id of the deployment associated with this flow run, if available. */
	deployment_id?: FlowRunResponseDeploymentId;
	/** The version of the deployment associated with this flow run. */
	deployment_version?: FlowRunResponseDeploymentVersion;
	/** The id of the run's work pool queue. */
	work_queue_id?: FlowRunResponseWorkQueueId;
	/** The work queue that handled this flow run. */
	work_queue_name?: FlowRunResponseWorkQueueName;
	/** The version of the flow executed in this flow run. */
	flow_version?: FlowRunResponseFlowVersion;
	/** Parameters for the flow run. */
	parameters?: FlowRunResponseParameters;
	/** An optional idempotency key for the flow run. Used to ensure the same flow run is not created multiple times. */
	idempotency_key?: FlowRunResponseIdempotencyKey;
	/** Additional context for the flow run. */
	context?: FlowRunResponseContext;
	empirical_policy?: FlowRunPolicy;
	/** A list of tags on the flow run */
	tags?: string[];
	/** A dictionary of key-value labels. Values can be strings, numbers, or booleans. */
	labels?: FlowRunResponseLabels;
	/** If the flow run is a subflow, the id of the 'dummy' task in the parent flow used to track subflow state. */
	parent_task_run_id?: FlowRunResponseParentTaskRunId;
	/** The type of the current flow run state. */
	state_type?: FlowRunResponseStateType;
	/** The name of the current flow run state. */
	state_name?: FlowRunResponseStateName;
	/** The number of times the flow run was executed. */
	run_count?: number;
	/** The flow run's expected start time. */
	expected_start_time?: FlowRunResponseExpectedStartTime;
	/** The next time the flow run is scheduled to start. */
	next_scheduled_start_time?: FlowRunResponseNextScheduledStartTime;
	/** The actual start time. */
	start_time?: FlowRunResponseStartTime;
	/** The actual end time. */
	end_time?: FlowRunResponseEndTime;
	/** Total run time. If the flow run was executed multiple times, the time of each run will be summed. */
	total_run_time?: number;
	/** A real-time estimate of the total run time. */
	estimated_run_time?: number;
	/** The difference between actual and expected start time. */
	estimated_start_time_delta?: number;
	/** Whether or not the flow run was automatically scheduled. */
	auto_scheduled?: boolean;
	/** The block document defining infrastructure to use this flow run. */
	infrastructure_document_id?: FlowRunResponseInfrastructureDocumentId;
	/** The id of the flow run as returned by an infrastructure block. */
	infrastructure_pid?: FlowRunResponseInfrastructurePid;
	/** Optional information about the creator of this flow run. */
	created_by?: FlowRunResponseCreatedBy;
	/** The id of the flow run's work pool. */
	work_pool_id?: FlowRunResponseWorkPoolId;
	/** The name of the flow run's work pool. */
	work_pool_name?: FlowRunResponseWorkPoolName;
	/** The current state of the flow run. */
	state?: FlowRunResponseState;
	/** Variables used as overrides in the base job template */
	job_variables?: FlowRunResponseJobVariables;
}
