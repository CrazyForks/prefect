import type { DeploymentResponseConcurrencyLimit } from "./deploymentResponseConcurrencyLimit";
import type { DeploymentResponseConcurrencyOptions } from "./deploymentResponseConcurrencyOptions";
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import type { DeploymentResponseCreated } from "./deploymentResponseCreated";
import type { DeploymentResponseCreatedBy } from "./deploymentResponseCreatedBy";
import type { DeploymentResponseDescription } from "./deploymentResponseDescription";
import type { DeploymentResponseEntrypoint } from "./deploymentResponseEntrypoint";
import type { DeploymentResponseGlobalConcurrencyLimit } from "./deploymentResponseGlobalConcurrencyLimit";
import type { DeploymentResponseInfrastructureDocumentId } from "./deploymentResponseInfrastructureDocumentId";
import type { DeploymentResponseJobVariables } from "./deploymentResponseJobVariables";
import type { DeploymentResponseLabels } from "./deploymentResponseLabels";
import type { DeploymentResponseLastPolled } from "./deploymentResponseLastPolled";
import type { DeploymentResponseParameterOpenapiSchema } from "./deploymentResponseParameterOpenapiSchema";
import type { DeploymentResponseParameters } from "./deploymentResponseParameters";
import type { DeploymentResponsePath } from "./deploymentResponsePath";
import type { DeploymentResponsePullSteps } from "./deploymentResponsePullSteps";
import type { DeploymentResponseStatus } from "./deploymentResponseStatus";
import type { DeploymentResponseStorageDocumentId } from "./deploymentResponseStorageDocumentId";
import type { DeploymentResponseUpdated } from "./deploymentResponseUpdated";
import type { DeploymentResponseUpdatedBy } from "./deploymentResponseUpdatedBy";
import type { DeploymentResponseVersion } from "./deploymentResponseVersion";
import type { DeploymentResponseWorkPoolName } from "./deploymentResponseWorkPoolName";
import type { DeploymentResponseWorkQueueName } from "./deploymentResponseWorkQueueName";
import type { DeploymentSchedule } from "./deploymentSchedule";

export interface DeploymentResponse {
	id: string;
	created: DeploymentResponseCreated;
	updated: DeploymentResponseUpdated;
	/** The name of the deployment. */
	name: string;
	/** An optional version for the deployment. */
	version?: DeploymentResponseVersion;
	/** A description for the deployment. */
	description?: DeploymentResponseDescription;
	/** The flow id associated with the deployment. */
	flow_id: string;
	/** Whether or not the deployment is paused. */
	paused?: boolean;
	/** A list of schedules for the deployment. */
	schedules?: DeploymentSchedule[];
	/**
	 * DEPRECATED: Prefer `global_concurrency_limit`. Will always be None for backwards compatibility. Will be removed after December 2024.
	 * @deprecated
	 */
	concurrency_limit?: DeploymentResponseConcurrencyLimit;
	/** The global concurrency limit object for enforcing the maximum number of flow runs that can be active at once. */
	global_concurrency_limit?: DeploymentResponseGlobalConcurrencyLimit;
	/** The concurrency options for the deployment. */
	concurrency_options?: DeploymentResponseConcurrencyOptions;
	/** Overrides to apply to the base infrastructure block at runtime. */
	job_variables?: DeploymentResponseJobVariables;
	/** Parameters for flow runs scheduled by the deployment. */
	parameters?: DeploymentResponseParameters;
	/** A list of tags for the deployment */
	tags?: string[];
	/** A dictionary of key-value labels. Values can be strings, numbers, or booleans. */
	labels?: DeploymentResponseLabels;
	/** The work queue for the deployment. If no work queue is set, work will not be scheduled. */
	work_queue_name?: DeploymentResponseWorkQueueName;
	/** The last time the deployment was polled for status updates. */
	last_polled?: DeploymentResponseLastPolled;
	/** The parameter schema of the flow, including defaults. */
	parameter_openapi_schema?: DeploymentResponseParameterOpenapiSchema;
	/** The path to the working directory for the workflow, relative to remote storage or an absolute path. */
	path?: DeploymentResponsePath;
	/** Pull steps for cloning and running this deployment. */
	pull_steps?: DeploymentResponsePullSteps;
	/** The path to the entrypoint for the workflow, relative to the `path`. */
	entrypoint?: DeploymentResponseEntrypoint;
	/** The block document defining storage used for this flow. */
	storage_document_id?: DeploymentResponseStorageDocumentId;
	/** The block document defining infrastructure to use for flow runs. */
	infrastructure_document_id?: DeploymentResponseInfrastructureDocumentId;
	/** Optional information about the creator of this deployment. */
	created_by?: DeploymentResponseCreatedBy;
	/** Optional information about the updater of this deployment. */
	updated_by?: DeploymentResponseUpdatedBy;
	/** The name of the deployment's work pool. */
	work_pool_name?: DeploymentResponseWorkPoolName;
	/** Whether the deployment is ready to run flows. */
	status?: DeploymentResponseStatus;
	/** Whether or not the deployment should enforce the parameter schema. */
	enforce_parameter_schema?: boolean;
}
