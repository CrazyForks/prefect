import type { TaskRunCacheExpiration } from "./taskRunCacheExpiration";
import type { TaskRunCacheKey } from "./taskRunCacheKey";
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import type { TaskRunCreated } from "./taskRunCreated";
import type { TaskRunEndTime } from "./taskRunEndTime";
import type { TaskRunExpectedStartTime } from "./taskRunExpectedStartTime";
import type { TaskRunFlowRunId } from "./taskRunFlowRunId";
import type { TaskRunLabels } from "./taskRunLabels";
import type { TaskRunNextScheduledStartTime } from "./taskRunNextScheduledStartTime";
import type { TaskRunPolicy } from "./taskRunPolicy";
import type { TaskRunStartTime } from "./taskRunStartTime";
import type { TaskRunState } from "./taskRunState";
import type { TaskRunStateId } from "./taskRunStateId";
import type { TaskRunStateName } from "./taskRunStateName";
import type { TaskRunStateType } from "./taskRunStateType";
import type { TaskRunTaskInputs } from "./taskRunTaskInputs";
import type { TaskRunTaskVersion } from "./taskRunTaskVersion";
import type { TaskRunUpdated } from "./taskRunUpdated";

/**
 * An ORM representation of task run data.
 */
export interface TaskRun {
	id: string;
	created: TaskRunCreated;
	updated: TaskRunUpdated;
	name?: string;
	/** The flow run id of the task run. */
	flow_run_id?: TaskRunFlowRunId;
	/** A unique identifier for the task being run. */
	task_key: string;
	/** A dynamic key used to differentiate between multiple runs of the same task within the same flow run. */
	dynamic_key: string;
	/** An optional cache key. If a COMPLETED state associated with this cache key is found, the cached COMPLETED state will be used instead of executing the task run. */
	cache_key?: TaskRunCacheKey;
	/** Specifies when the cached state should expire. */
	cache_expiration?: TaskRunCacheExpiration;
	/** The version of the task being run. */
	task_version?: TaskRunTaskVersion;
	empirical_policy?: TaskRunPolicy;
	/** A list of tags for the task run. */
	tags?: string[];
	/** A dictionary of key-value labels. Values can be strings, numbers, or booleans. */
	labels?: TaskRunLabels;
	/** The id of the current task run state. */
	state_id?: TaskRunStateId;
	/** Tracks the source of inputs to a task run. Used for internal bookkeeping. */
	task_inputs?: TaskRunTaskInputs;
	/** The type of the current task run state. */
	state_type?: TaskRunStateType;
	/** The name of the current task run state. */
	state_name?: TaskRunStateName;
	/** The number of times the task run has been executed. */
	run_count?: number;
	/** If the parent flow has retried, this indicates the flow retry this run is associated with. */
	flow_run_run_count?: number;
	/** The task run's expected start time. */
	expected_start_time?: TaskRunExpectedStartTime;
	/** The next time the task run is scheduled to start. */
	next_scheduled_start_time?: TaskRunNextScheduledStartTime;
	/** The actual start time. */
	start_time?: TaskRunStartTime;
	/** The actual end time. */
	end_time?: TaskRunEndTime;
	/** Total run time. If the task run was executed multiple times, the time of each run will be summed. */
	total_run_time?: number;
	/** A real-time estimate of total run time. */
	estimated_run_time?: number;
	/** The difference between actual and expected start time. */
	estimated_start_time_delta?: number;
	/** The current task run state. */
	state?: TaskRunState;
}
