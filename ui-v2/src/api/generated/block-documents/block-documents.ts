/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
	BlockDocument,
	BlockDocumentCreate,
	BlockDocumentUpdate,
	BodyCountBlockDocumentsBlockDocumentsCountPost,
	BodyReadBlockDocumentsBlockDocumentsFilterPost,
	HTTPValidationError,
	ReadBlockDocumentByIdBlockDocumentsIdGetParams,
} from "../../models";

/**
 * Create a new block document.
 * @summary Create Block Document
 */
export type createBlockDocumentBlockDocumentsPostResponse = {
	data: BlockDocument | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getCreateBlockDocumentBlockDocumentsPostUrl = () => {
	return `http://prefect.grose.click/api/block_documents/`;
};

export const createBlockDocumentBlockDocumentsPost = async (
	blockDocumentCreate: BlockDocumentCreate,
	options?: RequestInit,
): Promise<createBlockDocumentBlockDocumentsPostResponse> => {
	const res = await fetch(getCreateBlockDocumentBlockDocumentsPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(blockDocumentCreate),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: createBlockDocumentBlockDocumentsPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as createBlockDocumentBlockDocumentsPostResponse;
};

export const getCreateBlockDocumentBlockDocumentsPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createBlockDocumentBlockDocumentsPost>>,
		TError,
		{ data: BlockDocumentCreate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createBlockDocumentBlockDocumentsPost>>,
	TError,
	{ data: BlockDocumentCreate },
	TContext
> => {
	const mutationKey = ["createBlockDocumentBlockDocumentsPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createBlockDocumentBlockDocumentsPost>>,
		{ data: BlockDocumentCreate }
	> = (props) => {
		const { data } = props ?? {};

		return createBlockDocumentBlockDocumentsPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateBlockDocumentBlockDocumentsPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof createBlockDocumentBlockDocumentsPost>>
>;
export type CreateBlockDocumentBlockDocumentsPostMutationBody =
	BlockDocumentCreate;
export type CreateBlockDocumentBlockDocumentsPostMutationError =
	HTTPValidationError;

/**
 * @summary Create Block Document
 */
export const useCreateBlockDocumentBlockDocumentsPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createBlockDocumentBlockDocumentsPost>>,
		TError,
		{ data: BlockDocumentCreate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof createBlockDocumentBlockDocumentsPost>>,
	TError,
	{ data: BlockDocumentCreate },
	TContext
> => {
	const mutationOptions =
		getCreateBlockDocumentBlockDocumentsPostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Query for block documents.
 * @summary Read Block Documents
 */
export type readBlockDocumentsBlockDocumentsFilterPostResponse = {
	data: BlockDocument[] | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadBlockDocumentsBlockDocumentsFilterPostUrl = () => {
	return `http://prefect.grose.click/api/block_documents/filter`;
};

export const readBlockDocumentsBlockDocumentsFilterPost = async (
	bodyReadBlockDocumentsBlockDocumentsFilterPost: BodyReadBlockDocumentsBlockDocumentsFilterPost,
	options?: RequestInit,
): Promise<readBlockDocumentsBlockDocumentsFilterPostResponse> => {
	const res = await fetch(getReadBlockDocumentsBlockDocumentsFilterPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(bodyReadBlockDocumentsBlockDocumentsFilterPost),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readBlockDocumentsBlockDocumentsFilterPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readBlockDocumentsBlockDocumentsFilterPostResponse;
};

export const getReadBlockDocumentsBlockDocumentsFilterPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof readBlockDocumentsBlockDocumentsFilterPost>>,
		TError,
		{ data: BodyReadBlockDocumentsBlockDocumentsFilterPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof readBlockDocumentsBlockDocumentsFilterPost>>,
	TError,
	{ data: BodyReadBlockDocumentsBlockDocumentsFilterPost },
	TContext
> => {
	const mutationKey = ["readBlockDocumentsBlockDocumentsFilterPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof readBlockDocumentsBlockDocumentsFilterPost>>,
		{ data: BodyReadBlockDocumentsBlockDocumentsFilterPost }
	> = (props) => {
		const { data } = props ?? {};

		return readBlockDocumentsBlockDocumentsFilterPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type ReadBlockDocumentsBlockDocumentsFilterPostMutationResult =
	NonNullable<
		Awaited<ReturnType<typeof readBlockDocumentsBlockDocumentsFilterPost>>
	>;
export type ReadBlockDocumentsBlockDocumentsFilterPostMutationBody =
	BodyReadBlockDocumentsBlockDocumentsFilterPost;
export type ReadBlockDocumentsBlockDocumentsFilterPostMutationError =
	HTTPValidationError;

/**
 * @summary Read Block Documents
 */
export const useReadBlockDocumentsBlockDocumentsFilterPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof readBlockDocumentsBlockDocumentsFilterPost>>,
		TError,
		{ data: BodyReadBlockDocumentsBlockDocumentsFilterPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof readBlockDocumentsBlockDocumentsFilterPost>>,
	TError,
	{ data: BodyReadBlockDocumentsBlockDocumentsFilterPost },
	TContext
> => {
	const mutationOptions =
		getReadBlockDocumentsBlockDocumentsFilterPostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Count block documents.
 * @summary Count Block Documents
 */
export type countBlockDocumentsBlockDocumentsCountPostResponse = {
	data: number | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getCountBlockDocumentsBlockDocumentsCountPostUrl = () => {
	return `http://prefect.grose.click/api/block_documents/count`;
};

export const countBlockDocumentsBlockDocumentsCountPost = async (
	bodyCountBlockDocumentsBlockDocumentsCountPost: BodyCountBlockDocumentsBlockDocumentsCountPost,
	options?: RequestInit,
): Promise<countBlockDocumentsBlockDocumentsCountPostResponse> => {
	const res = await fetch(getCountBlockDocumentsBlockDocumentsCountPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(bodyCountBlockDocumentsBlockDocumentsCountPost),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: countBlockDocumentsBlockDocumentsCountPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as countBlockDocumentsBlockDocumentsCountPostResponse;
};

export const getCountBlockDocumentsBlockDocumentsCountPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof countBlockDocumentsBlockDocumentsCountPost>>,
		TError,
		{ data: BodyCountBlockDocumentsBlockDocumentsCountPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof countBlockDocumentsBlockDocumentsCountPost>>,
	TError,
	{ data: BodyCountBlockDocumentsBlockDocumentsCountPost },
	TContext
> => {
	const mutationKey = ["countBlockDocumentsBlockDocumentsCountPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof countBlockDocumentsBlockDocumentsCountPost>>,
		{ data: BodyCountBlockDocumentsBlockDocumentsCountPost }
	> = (props) => {
		const { data } = props ?? {};

		return countBlockDocumentsBlockDocumentsCountPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CountBlockDocumentsBlockDocumentsCountPostMutationResult =
	NonNullable<
		Awaited<ReturnType<typeof countBlockDocumentsBlockDocumentsCountPost>>
	>;
export type CountBlockDocumentsBlockDocumentsCountPostMutationBody =
	BodyCountBlockDocumentsBlockDocumentsCountPost;
export type CountBlockDocumentsBlockDocumentsCountPostMutationError =
	HTTPValidationError;

/**
 * @summary Count Block Documents
 */
export const useCountBlockDocumentsBlockDocumentsCountPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof countBlockDocumentsBlockDocumentsCountPost>>,
		TError,
		{ data: BodyCountBlockDocumentsBlockDocumentsCountPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof countBlockDocumentsBlockDocumentsCountPost>>,
	TError,
	{ data: BodyCountBlockDocumentsBlockDocumentsCountPost },
	TContext
> => {
	const mutationOptions =
		getCountBlockDocumentsBlockDocumentsCountPostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Read Block Document By Id
 */
export type readBlockDocumentByIdBlockDocumentsIdGetResponse = {
	data: BlockDocument | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadBlockDocumentByIdBlockDocumentsIdGetUrl = (
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	return normalizedParams.size
		? `http://prefect.grose.click/api/block_documents/${id}?${normalizedParams.toString()}`
		: `http://prefect.grose.click/api/block_documents/${id}`;
};

export const readBlockDocumentByIdBlockDocumentsIdGet = async (
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options?: RequestInit,
): Promise<readBlockDocumentByIdBlockDocumentsIdGetResponse> => {
	const res = await fetch(
		getReadBlockDocumentByIdBlockDocumentsIdGetUrl(id, params),
		{
			...options,
			method: "GET",
		},
	);

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readBlockDocumentByIdBlockDocumentsIdGetResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readBlockDocumentByIdBlockDocumentsIdGetResponse;
};

export const getReadBlockDocumentByIdBlockDocumentsIdGetQueryKey = (
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
) => {
	return [
		`http://prefect.grose.click/api/block_documents/${id}`,
		...(params ? [params] : []),
	] as const;
};

export const getReadBlockDocumentByIdBlockDocumentsIdGetQueryOptions = <
	TData = Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReadBlockDocumentByIdBlockDocumentsIdGetQueryKey(id, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>
	> = ({ signal }) =>
		readBlockDocumentByIdBlockDocumentsIdGet(id, params, {
			signal,
			...fetchOptions,
		});

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadBlockDocumentByIdBlockDocumentsIdGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>
>;
export type ReadBlockDocumentByIdBlockDocumentsIdGetQueryError =
	HTTPValidationError;

export function useReadBlockDocumentByIdBlockDocumentsIdGet<
	TData = Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	params: undefined | ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
					TError,
					Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockDocumentByIdBlockDocumentsIdGet<
	TData = Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
					TError,
					Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockDocumentByIdBlockDocumentsIdGet<
	TData = Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Block Document By Id
 */

export function useReadBlockDocumentByIdBlockDocumentsIdGet<
	TData = Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadBlockDocumentByIdBlockDocumentsIdGetQueryOptions(
		id,
		params,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadBlockDocumentByIdBlockDocumentsIdGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReadBlockDocumentByIdBlockDocumentsIdGetQueryKey(id, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>
	> = ({ signal }) =>
		readBlockDocumentByIdBlockDocumentsIdGet(id, params, {
			signal,
			...fetchOptions,
		});

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadBlockDocumentByIdBlockDocumentsIdGetSuspenseQueryResult =
	NonNullable<
		Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>
	>;
export type ReadBlockDocumentByIdBlockDocumentsIdGetSuspenseQueryError =
	HTTPValidationError;

export function useReadBlockDocumentByIdBlockDocumentsIdGetSuspense<
	TData = Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	params: undefined | ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockDocumentByIdBlockDocumentsIdGetSuspense<
	TData = Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockDocumentByIdBlockDocumentsIdGetSuspense<
	TData = Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Block Document By Id
 */

export function useReadBlockDocumentByIdBlockDocumentsIdGetSuspense<
	TData = Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	params?: ReadBlockDocumentByIdBlockDocumentsIdGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readBlockDocumentByIdBlockDocumentsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions =
		getReadBlockDocumentByIdBlockDocumentsIdGetSuspenseQueryOptions(
			id,
			params,
			options,
		);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Delete Block Document
 */
export type deleteBlockDocumentBlockDocumentsIdDeleteResponse = {
	data: void | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getDeleteBlockDocumentBlockDocumentsIdDeleteUrl = (id: string) => {
	return `http://prefect.grose.click/api/block_documents/${id}`;
};

export const deleteBlockDocumentBlockDocumentsIdDelete = async (
	id: string,
	options?: RequestInit,
): Promise<deleteBlockDocumentBlockDocumentsIdDeleteResponse> => {
	const res = await fetch(getDeleteBlockDocumentBlockDocumentsIdDeleteUrl(id), {
		...options,
		method: "DELETE",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteBlockDocumentBlockDocumentsIdDeleteResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteBlockDocumentBlockDocumentsIdDeleteResponse;
};

export const getDeleteBlockDocumentBlockDocumentsIdDeleteMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteBlockDocumentBlockDocumentsIdDelete>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteBlockDocumentBlockDocumentsIdDelete>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["deleteBlockDocumentBlockDocumentsIdDelete"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteBlockDocumentBlockDocumentsIdDelete>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return deleteBlockDocumentBlockDocumentsIdDelete(id, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteBlockDocumentBlockDocumentsIdDeleteMutationResult =
	NonNullable<
		Awaited<ReturnType<typeof deleteBlockDocumentBlockDocumentsIdDelete>>
	>;

export type DeleteBlockDocumentBlockDocumentsIdDeleteMutationError =
	HTTPValidationError;

/**
 * @summary Delete Block Document
 */
export const useDeleteBlockDocumentBlockDocumentsIdDelete = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteBlockDocumentBlockDocumentsIdDelete>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteBlockDocumentBlockDocumentsIdDelete>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions =
		getDeleteBlockDocumentBlockDocumentsIdDeleteMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Update Block Document Data
 */
export type updateBlockDocumentDataBlockDocumentsIdPatchResponse = {
	data: void | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getUpdateBlockDocumentDataBlockDocumentsIdPatchUrl = (
	id: string,
) => {
	return `http://prefect.grose.click/api/block_documents/${id}`;
};

export const updateBlockDocumentDataBlockDocumentsIdPatch = async (
	id: string,
	blockDocumentUpdate: BlockDocumentUpdate,
	options?: RequestInit,
): Promise<updateBlockDocumentDataBlockDocumentsIdPatchResponse> => {
	const res = await fetch(
		getUpdateBlockDocumentDataBlockDocumentsIdPatchUrl(id),
		{
			...options,
			method: "PATCH",
			headers: { "Content-Type": "application/json", ...options?.headers },
			body: JSON.stringify(blockDocumentUpdate),
		},
	);

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: updateBlockDocumentDataBlockDocumentsIdPatchResponse["data"] =
		body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as updateBlockDocumentDataBlockDocumentsIdPatchResponse;
};

export const getUpdateBlockDocumentDataBlockDocumentsIdPatchMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateBlockDocumentDataBlockDocumentsIdPatch>>,
		TError,
		{ id: string; data: BlockDocumentUpdate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateBlockDocumentDataBlockDocumentsIdPatch>>,
	TError,
	{ id: string; data: BlockDocumentUpdate },
	TContext
> => {
	const mutationKey = ["updateBlockDocumentDataBlockDocumentsIdPatch"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateBlockDocumentDataBlockDocumentsIdPatch>>,
		{ id: string; data: BlockDocumentUpdate }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateBlockDocumentDataBlockDocumentsIdPatch(id, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateBlockDocumentDataBlockDocumentsIdPatchMutationResult =
	NonNullable<
		Awaited<ReturnType<typeof updateBlockDocumentDataBlockDocumentsIdPatch>>
	>;
export type UpdateBlockDocumentDataBlockDocumentsIdPatchMutationBody =
	BlockDocumentUpdate;
export type UpdateBlockDocumentDataBlockDocumentsIdPatchMutationError =
	HTTPValidationError;

/**
 * @summary Update Block Document Data
 */
export const useUpdateBlockDocumentDataBlockDocumentsIdPatch = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateBlockDocumentDataBlockDocumentsIdPatch>>,
		TError,
		{ id: string; data: BlockDocumentUpdate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof updateBlockDocumentDataBlockDocumentsIdPatch>>,
	TError,
	{ id: string; data: BlockDocumentUpdate },
	TContext
> => {
	const mutationOptions =
		getUpdateBlockDocumentDataBlockDocumentsIdPatchMutationOptions(options);

	return useMutation(mutationOptions);
};
