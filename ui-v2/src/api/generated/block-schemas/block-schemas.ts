/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
	BlockSchema,
	BlockSchemaCreate,
	BodyReadBlockSchemasBlockSchemasFilterPost,
	HTTPValidationError,
	ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
} from "../../models";

/**
 * @summary Create Block Schema
 */
export type createBlockSchemaBlockSchemasPostResponse = {
	data: BlockSchema | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getCreateBlockSchemaBlockSchemasPostUrl = () => {
	return `http://prefect.grose.click/api/block_schemas/`;
};

export const createBlockSchemaBlockSchemasPost = async (
	blockSchemaCreate: BlockSchemaCreate,
	options?: RequestInit,
): Promise<createBlockSchemaBlockSchemasPostResponse> => {
	const res = await fetch(getCreateBlockSchemaBlockSchemasPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(blockSchemaCreate),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: createBlockSchemaBlockSchemasPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as createBlockSchemaBlockSchemasPostResponse;
};

export const getCreateBlockSchemaBlockSchemasPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createBlockSchemaBlockSchemasPost>>,
		TError,
		{ data: BlockSchemaCreate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createBlockSchemaBlockSchemasPost>>,
	TError,
	{ data: BlockSchemaCreate },
	TContext
> => {
	const mutationKey = ["createBlockSchemaBlockSchemasPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createBlockSchemaBlockSchemasPost>>,
		{ data: BlockSchemaCreate }
	> = (props) => {
		const { data } = props ?? {};

		return createBlockSchemaBlockSchemasPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateBlockSchemaBlockSchemasPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof createBlockSchemaBlockSchemasPost>>
>;
export type CreateBlockSchemaBlockSchemasPostMutationBody = BlockSchemaCreate;
export type CreateBlockSchemaBlockSchemasPostMutationError =
	HTTPValidationError;

/**
 * @summary Create Block Schema
 */
export const useCreateBlockSchemaBlockSchemasPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createBlockSchemaBlockSchemasPost>>,
		TError,
		{ data: BlockSchemaCreate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof createBlockSchemaBlockSchemasPost>>,
	TError,
	{ data: BlockSchemaCreate },
	TContext
> => {
	const mutationOptions =
		getCreateBlockSchemaBlockSchemasPostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Delete a block schema by id.
 * @summary Delete Block Schema
 */
export type deleteBlockSchemaBlockSchemasIdDeleteResponse = {
	data: void | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getDeleteBlockSchemaBlockSchemasIdDeleteUrl = (id: string) => {
	return `http://prefect.grose.click/api/block_schemas/${id}`;
};

export const deleteBlockSchemaBlockSchemasIdDelete = async (
	id: string,
	options?: RequestInit,
): Promise<deleteBlockSchemaBlockSchemasIdDeleteResponse> => {
	const res = await fetch(getDeleteBlockSchemaBlockSchemasIdDeleteUrl(id), {
		...options,
		method: "DELETE",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteBlockSchemaBlockSchemasIdDeleteResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteBlockSchemaBlockSchemasIdDeleteResponse;
};

export const getDeleteBlockSchemaBlockSchemasIdDeleteMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteBlockSchemaBlockSchemasIdDelete>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteBlockSchemaBlockSchemasIdDelete>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["deleteBlockSchemaBlockSchemasIdDelete"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteBlockSchemaBlockSchemasIdDelete>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return deleteBlockSchemaBlockSchemasIdDelete(id, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteBlockSchemaBlockSchemasIdDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteBlockSchemaBlockSchemasIdDelete>>
>;

export type DeleteBlockSchemaBlockSchemasIdDeleteMutationError =
	HTTPValidationError;

/**
 * @summary Delete Block Schema
 */
export const useDeleteBlockSchemaBlockSchemasIdDelete = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteBlockSchemaBlockSchemasIdDelete>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteBlockSchemaBlockSchemasIdDelete>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions =
		getDeleteBlockSchemaBlockSchemasIdDeleteMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Get a block schema by id.
 * @summary Read Block Schema By Id
 */
export type readBlockSchemaByIdBlockSchemasIdGetResponse = {
	data: BlockSchema | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadBlockSchemaByIdBlockSchemasIdGetUrl = (id: string) => {
	return `http://prefect.grose.click/api/block_schemas/${id}`;
};

export const readBlockSchemaByIdBlockSchemasIdGet = async (
	id: string,
	options?: RequestInit,
): Promise<readBlockSchemaByIdBlockSchemasIdGetResponse> => {
	const res = await fetch(getReadBlockSchemaByIdBlockSchemasIdGetUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readBlockSchemaByIdBlockSchemasIdGetResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readBlockSchemaByIdBlockSchemasIdGetResponse;
};

export const getReadBlockSchemaByIdBlockSchemasIdGetQueryKey = (id: string) => {
	return [`http://prefect.grose.click/api/block_schemas/${id}`] as const;
};

export const getReadBlockSchemaByIdBlockSchemasIdGetQueryOptions = <
	TData = Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReadBlockSchemaByIdBlockSchemasIdGetQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>
	> = ({ signal }) =>
		readBlockSchemaByIdBlockSchemasIdGet(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadBlockSchemaByIdBlockSchemasIdGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>
>;
export type ReadBlockSchemaByIdBlockSchemasIdGetQueryError =
	HTTPValidationError;

export function useReadBlockSchemaByIdBlockSchemasIdGet<
	TData = Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
					TError,
					Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockSchemaByIdBlockSchemasIdGet<
	TData = Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
					TError,
					Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockSchemaByIdBlockSchemasIdGet<
	TData = Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Block Schema By Id
 */

export function useReadBlockSchemaByIdBlockSchemasIdGet<
	TData = Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadBlockSchemaByIdBlockSchemasIdGetQueryOptions(
		id,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadBlockSchemaByIdBlockSchemasIdGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReadBlockSchemaByIdBlockSchemasIdGetQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>
	> = ({ signal }) =>
		readBlockSchemaByIdBlockSchemasIdGet(id, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadBlockSchemaByIdBlockSchemasIdGetSuspenseQueryResult =
	NonNullable<Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>>;
export type ReadBlockSchemaByIdBlockSchemasIdGetSuspenseQueryError =
	HTTPValidationError;

export function useReadBlockSchemaByIdBlockSchemasIdGetSuspense<
	TData = Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockSchemaByIdBlockSchemasIdGetSuspense<
	TData = Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockSchemaByIdBlockSchemasIdGetSuspense<
	TData = Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Block Schema By Id
 */

export function useReadBlockSchemaByIdBlockSchemasIdGetSuspense<
	TData = Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readBlockSchemaByIdBlockSchemasIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions =
		getReadBlockSchemaByIdBlockSchemasIdGetSuspenseQueryOptions(id, options);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Read all block schemas, optionally filtered by type
 * @summary Read Block Schemas
 */
export type readBlockSchemasBlockSchemasFilterPostResponse = {
	data: BlockSchema[] | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadBlockSchemasBlockSchemasFilterPostUrl = () => {
	return `http://prefect.grose.click/api/block_schemas/filter`;
};

export const readBlockSchemasBlockSchemasFilterPost = async (
	bodyReadBlockSchemasBlockSchemasFilterPost: BodyReadBlockSchemasBlockSchemasFilterPost,
	options?: RequestInit,
): Promise<readBlockSchemasBlockSchemasFilterPostResponse> => {
	const res = await fetch(getReadBlockSchemasBlockSchemasFilterPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(bodyReadBlockSchemasBlockSchemasFilterPost),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readBlockSchemasBlockSchemasFilterPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readBlockSchemasBlockSchemasFilterPostResponse;
};

export const getReadBlockSchemasBlockSchemasFilterPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof readBlockSchemasBlockSchemasFilterPost>>,
		TError,
		{ data: BodyReadBlockSchemasBlockSchemasFilterPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof readBlockSchemasBlockSchemasFilterPost>>,
	TError,
	{ data: BodyReadBlockSchemasBlockSchemasFilterPost },
	TContext
> => {
	const mutationKey = ["readBlockSchemasBlockSchemasFilterPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof readBlockSchemasBlockSchemasFilterPost>>,
		{ data: BodyReadBlockSchemasBlockSchemasFilterPost }
	> = (props) => {
		const { data } = props ?? {};

		return readBlockSchemasBlockSchemasFilterPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type ReadBlockSchemasBlockSchemasFilterPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof readBlockSchemasBlockSchemasFilterPost>>
>;
export type ReadBlockSchemasBlockSchemasFilterPostMutationBody =
	BodyReadBlockSchemasBlockSchemasFilterPost;
export type ReadBlockSchemasBlockSchemasFilterPostMutationError =
	HTTPValidationError;

/**
 * @summary Read Block Schemas
 */
export const useReadBlockSchemasBlockSchemasFilterPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof readBlockSchemasBlockSchemasFilterPost>>,
		TError,
		{ data: BodyReadBlockSchemasBlockSchemasFilterPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof readBlockSchemasBlockSchemasFilterPost>>,
	TError,
	{ data: BodyReadBlockSchemasBlockSchemasFilterPost },
	TContext
> => {
	const mutationOptions =
		getReadBlockSchemasBlockSchemasFilterPostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Read Block Schema By Checksum
 */
export type readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetResponse = {
	data: BlockSchema | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetUrl = (
	checksum: string,
	params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	return normalizedParams.size
		? `http://prefect.grose.click/api/block_schemas/checksum/${checksum}?${normalizedParams.toString()}`
		: `http://prefect.grose.click/api/block_schemas/checksum/${checksum}`;
};

export const readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet = async (
	checksum: string,
	params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
	options?: RequestInit,
): Promise<readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetResponse> => {
	const res = await fetch(
		getReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetUrl(
			checksum,
			params,
		),
		{
			...options,
			method: "GET",
		},
	);

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetResponse["data"] =
		body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetResponse;
};

export const getReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetQueryKey =
	(
		checksum: string,
		params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
	) => {
		return [
			`http://prefect.grose.click/api/block_schemas/checksum/${checksum}`,
			...(params ? [params] : []),
		] as const;
	};

export const getReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetQueryOptions =
	<
		TData = Awaited<
			ReturnType<
				typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
			>
		>,
		TError = HTTPValidationError,
	>(
		checksum: string,
		params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
		options?: {
			query?: Partial<
				UseQueryOptions<
					Awaited<
						ReturnType<
							typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
						>
					>,
					TError,
					TData
				>
			>;
			fetch?: RequestInit;
		},
	) => {
		const { query: queryOptions, fetch: fetchOptions } = options ?? {};

		const queryKey =
			queryOptions?.queryKey ??
			getReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetQueryKey(
				checksum,
				params,
			);

		const queryFn: QueryFunction<
			Awaited<
				ReturnType<
					typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
				>
			>
		> = ({ signal }) =>
			readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet(
				checksum,
				params,
				{ signal, ...fetchOptions },
			);

		return {
			queryKey,
			queryFn,
			enabled: !!checksum,
			...queryOptions,
		} as UseQueryOptions<
			Awaited<
				ReturnType<
					typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
				>
			>,
			TError,
			TData
		> & { queryKey: DataTag<QueryKey, TData, TError> };
	};

export type ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetQueryResult =
	NonNullable<
		Awaited<
			ReturnType<
				typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
			>
		>
	>;
export type ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetQueryError =
	HTTPValidationError;

export function useReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGet<
	TData = Awaited<
		ReturnType<typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet>
	>,
	TError = HTTPValidationError,
>(
	checksum: string,
	params:
		| undefined
		| ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<
					ReturnType<
						typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
					>
				>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<
						ReturnType<
							typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
						>
					>,
					TError,
					Awaited<
						ReturnType<
							typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
						>
					>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGet<
	TData = Awaited<
		ReturnType<typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet>
	>,
	TError = HTTPValidationError,
>(
	checksum: string,
	params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<
					ReturnType<
						typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
					>
				>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<
						ReturnType<
							typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
						>
					>,
					TError,
					Awaited<
						ReturnType<
							typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
						>
					>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGet<
	TData = Awaited<
		ReturnType<typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet>
	>,
	TError = HTTPValidationError,
>(
	checksum: string,
	params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<
					ReturnType<
						typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
					>
				>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Block Schema By Checksum
 */

export function useReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGet<
	TData = Awaited<
		ReturnType<typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet>
	>,
	TError = HTTPValidationError,
>(
	checksum: string,
	params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<
					ReturnType<
						typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
					>
				>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions =
		getReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetQueryOptions(
			checksum,
			params,
			options,
		);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetSuspenseQueryOptions =
	<
		TData = Awaited<
			ReturnType<
				typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
			>
		>,
		TError = HTTPValidationError,
	>(
		checksum: string,
		params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
		options?: {
			query?: Partial<
				UseSuspenseQueryOptions<
					Awaited<
						ReturnType<
							typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
						>
					>,
					TError,
					TData
				>
			>;
			fetch?: RequestInit;
		},
	) => {
		const { query: queryOptions, fetch: fetchOptions } = options ?? {};

		const queryKey =
			queryOptions?.queryKey ??
			getReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetQueryKey(
				checksum,
				params,
			);

		const queryFn: QueryFunction<
			Awaited<
				ReturnType<
					typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
				>
			>
		> = ({ signal }) =>
			readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet(
				checksum,
				params,
				{ signal, ...fetchOptions },
			);

		return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
			Awaited<
				ReturnType<
					typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
				>
			>,
			TError,
			TData
		> & { queryKey: DataTag<QueryKey, TData, TError> };
	};

export type ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetSuspenseQueryResult =
	NonNullable<
		Awaited<
			ReturnType<
				typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
			>
		>
	>;
export type ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetSuspenseQueryError =
	HTTPValidationError;

export function useReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetSuspense<
	TData = Awaited<
		ReturnType<typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet>
	>,
	TError = HTTPValidationError,
>(
	checksum: string,
	params:
		| undefined
		| ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<
					ReturnType<
						typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
					>
				>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetSuspense<
	TData = Awaited<
		ReturnType<typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet>
	>,
	TError = HTTPValidationError,
>(
	checksum: string,
	params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<
					ReturnType<
						typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
					>
				>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetSuspense<
	TData = Awaited<
		ReturnType<typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet>
	>,
	TError = HTTPValidationError,
>(
	checksum: string,
	params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<
					ReturnType<
						typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
					>
				>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Block Schema By Checksum
 */

export function useReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetSuspense<
	TData = Awaited<
		ReturnType<typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet>
	>,
	TError = HTTPValidationError,
>(
	checksum: string,
	params?: ReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<
					ReturnType<
						typeof readBlockSchemaByChecksumBlockSchemasChecksumChecksumGet
					>
				>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions =
		getReadBlockSchemaByChecksumBlockSchemasChecksumChecksumGetSuspenseQueryOptions(
			checksum,
			params,
			options,
		);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
