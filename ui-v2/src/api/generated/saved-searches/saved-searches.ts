/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
	BodyReadSavedSearchesSavedSearchesFilterPost,
	HTTPValidationError,
	SavedSearch,
	SavedSearchCreate,
} from "../../models";

/**
 * Gracefully creates a new saved search from the provided schema.

If a saved search with the same name already exists, the saved search's fields are
replaced.
 * @summary Create Saved Search
 */
export type createSavedSearchSavedSearchesPutResponse = {
	data: SavedSearch | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getCreateSavedSearchSavedSearchesPutUrl = () => {
	return `http://prefect.grose.click/api/saved_searches/`;
};

export const createSavedSearchSavedSearchesPut = async (
	savedSearchCreate: SavedSearchCreate,
	options?: RequestInit,
): Promise<createSavedSearchSavedSearchesPutResponse> => {
	const res = await fetch(getCreateSavedSearchSavedSearchesPutUrl(), {
		...options,
		method: "PUT",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(savedSearchCreate),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: createSavedSearchSavedSearchesPutResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as createSavedSearchSavedSearchesPutResponse;
};

export const getCreateSavedSearchSavedSearchesPutMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createSavedSearchSavedSearchesPut>>,
		TError,
		{ data: SavedSearchCreate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createSavedSearchSavedSearchesPut>>,
	TError,
	{ data: SavedSearchCreate },
	TContext
> => {
	const mutationKey = ["createSavedSearchSavedSearchesPut"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createSavedSearchSavedSearchesPut>>,
		{ data: SavedSearchCreate }
	> = (props) => {
		const { data } = props ?? {};

		return createSavedSearchSavedSearchesPut(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateSavedSearchSavedSearchesPutMutationResult = NonNullable<
	Awaited<ReturnType<typeof createSavedSearchSavedSearchesPut>>
>;
export type CreateSavedSearchSavedSearchesPutMutationBody = SavedSearchCreate;
export type CreateSavedSearchSavedSearchesPutMutationError =
	HTTPValidationError;

/**
 * @summary Create Saved Search
 */
export const useCreateSavedSearchSavedSearchesPut = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createSavedSearchSavedSearchesPut>>,
		TError,
		{ data: SavedSearchCreate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof createSavedSearchSavedSearchesPut>>,
	TError,
	{ data: SavedSearchCreate },
	TContext
> => {
	const mutationOptions =
		getCreateSavedSearchSavedSearchesPutMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Get a saved search by id.
 * @summary Read Saved Search
 */
export type readSavedSearchSavedSearchesIdGetResponse = {
	data: SavedSearch | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadSavedSearchSavedSearchesIdGetUrl = (id: string) => {
	return `http://prefect.grose.click/api/saved_searches/${id}`;
};

export const readSavedSearchSavedSearchesIdGet = async (
	id: string,
	options?: RequestInit,
): Promise<readSavedSearchSavedSearchesIdGetResponse> => {
	const res = await fetch(getReadSavedSearchSavedSearchesIdGetUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readSavedSearchSavedSearchesIdGetResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readSavedSearchSavedSearchesIdGetResponse;
};

export const getReadSavedSearchSavedSearchesIdGetQueryKey = (id: string) => {
	return [`http://prefect.grose.click/api/saved_searches/${id}`] as const;
};

export const getReadSavedSearchSavedSearchesIdGetQueryOptions = <
	TData = Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getReadSavedSearchSavedSearchesIdGetQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>
	> = ({ signal }) =>
		readSavedSearchSavedSearchesIdGet(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadSavedSearchSavedSearchesIdGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>
>;
export type ReadSavedSearchSavedSearchesIdGetQueryError = HTTPValidationError;

export function useReadSavedSearchSavedSearchesIdGet<
	TData = Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
					TError,
					Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadSavedSearchSavedSearchesIdGet<
	TData = Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
					TError,
					Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadSavedSearchSavedSearchesIdGet<
	TData = Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Saved Search
 */

export function useReadSavedSearchSavedSearchesIdGet<
	TData = Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadSavedSearchSavedSearchesIdGetQueryOptions(
		id,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadSavedSearchSavedSearchesIdGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getReadSavedSearchSavedSearchesIdGetQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>
	> = ({ signal }) =>
		readSavedSearchSavedSearchesIdGet(id, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadSavedSearchSavedSearchesIdGetSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>
>;
export type ReadSavedSearchSavedSearchesIdGetSuspenseQueryError =
	HTTPValidationError;

export function useReadSavedSearchSavedSearchesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadSavedSearchSavedSearchesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadSavedSearchSavedSearchesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Saved Search
 */

export function useReadSavedSearchSavedSearchesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readSavedSearchSavedSearchesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadSavedSearchSavedSearchesIdGetSuspenseQueryOptions(
		id,
		options,
	);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Delete a saved search by id.
 * @summary Delete Saved Search
 */
export type deleteSavedSearchSavedSearchesIdDeleteResponse = {
	data: void | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getDeleteSavedSearchSavedSearchesIdDeleteUrl = (id: string) => {
	return `http://prefect.grose.click/api/saved_searches/${id}`;
};

export const deleteSavedSearchSavedSearchesIdDelete = async (
	id: string,
	options?: RequestInit,
): Promise<deleteSavedSearchSavedSearchesIdDeleteResponse> => {
	const res = await fetch(getDeleteSavedSearchSavedSearchesIdDeleteUrl(id), {
		...options,
		method: "DELETE",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteSavedSearchSavedSearchesIdDeleteResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteSavedSearchSavedSearchesIdDeleteResponse;
};

export const getDeleteSavedSearchSavedSearchesIdDeleteMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteSavedSearchSavedSearchesIdDelete>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteSavedSearchSavedSearchesIdDelete>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["deleteSavedSearchSavedSearchesIdDelete"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteSavedSearchSavedSearchesIdDelete>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return deleteSavedSearchSavedSearchesIdDelete(id, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteSavedSearchSavedSearchesIdDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteSavedSearchSavedSearchesIdDelete>>
>;

export type DeleteSavedSearchSavedSearchesIdDeleteMutationError =
	HTTPValidationError;

/**
 * @summary Delete Saved Search
 */
export const useDeleteSavedSearchSavedSearchesIdDelete = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteSavedSearchSavedSearchesIdDelete>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteSavedSearchSavedSearchesIdDelete>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions =
		getDeleteSavedSearchSavedSearchesIdDeleteMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Query for saved searches.
 * @summary Read Saved Searches
 */
export type readSavedSearchesSavedSearchesFilterPostResponse = {
	data: SavedSearch[] | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadSavedSearchesSavedSearchesFilterPostUrl = () => {
	return `http://prefect.grose.click/api/saved_searches/filter`;
};

export const readSavedSearchesSavedSearchesFilterPost = async (
	bodyReadSavedSearchesSavedSearchesFilterPost: BodyReadSavedSearchesSavedSearchesFilterPost,
	options?: RequestInit,
): Promise<readSavedSearchesSavedSearchesFilterPostResponse> => {
	const res = await fetch(getReadSavedSearchesSavedSearchesFilterPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(bodyReadSavedSearchesSavedSearchesFilterPost),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readSavedSearchesSavedSearchesFilterPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readSavedSearchesSavedSearchesFilterPostResponse;
};

export const getReadSavedSearchesSavedSearchesFilterPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof readSavedSearchesSavedSearchesFilterPost>>,
		TError,
		{ data: BodyReadSavedSearchesSavedSearchesFilterPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof readSavedSearchesSavedSearchesFilterPost>>,
	TError,
	{ data: BodyReadSavedSearchesSavedSearchesFilterPost },
	TContext
> => {
	const mutationKey = ["readSavedSearchesSavedSearchesFilterPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof readSavedSearchesSavedSearchesFilterPost>>,
		{ data: BodyReadSavedSearchesSavedSearchesFilterPost }
	> = (props) => {
		const { data } = props ?? {};

		return readSavedSearchesSavedSearchesFilterPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type ReadSavedSearchesSavedSearchesFilterPostMutationResult =
	NonNullable<
		Awaited<ReturnType<typeof readSavedSearchesSavedSearchesFilterPost>>
	>;
export type ReadSavedSearchesSavedSearchesFilterPostMutationBody =
	BodyReadSavedSearchesSavedSearchesFilterPost;
export type ReadSavedSearchesSavedSearchesFilterPostMutationError =
	HTTPValidationError;

/**
 * @summary Read Saved Searches
 */
export const useReadSavedSearchesSavedSearchesFilterPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof readSavedSearchesSavedSearchesFilterPost>>,
		TError,
		{ data: BodyReadSavedSearchesSavedSearchesFilterPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof readSavedSearchesSavedSearchesFilterPost>>,
	TError,
	{ data: BodyReadSavedSearchesSavedSearchesFilterPost },
	TContext
> => {
	const mutationOptions =
		getReadSavedSearchesSavedSearchesFilterPostMutationOptions(options);

	return useMutation(mutationOptions);
};
