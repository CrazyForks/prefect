/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateCsrfTokenCsrfTokenGetParams,
	CsrfToken,
	HTTPValidationError,
} from "../../models";

/**
 * Create or update a CSRF token for a client
 * @summary Create Csrf Token
 */
export type createCsrfTokenCsrfTokenGetResponse = {
	data: CsrfToken | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getCreateCsrfTokenCsrfTokenGetUrl = (
	params: CreateCsrfTokenCsrfTokenGetParams,
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	return normalizedParams.size
		? `http://prefect.grose.click/api/csrf-token?${normalizedParams.toString()}`
		: `http://prefect.grose.click/api/csrf-token`;
};

export const createCsrfTokenCsrfTokenGet = async (
	params: CreateCsrfTokenCsrfTokenGetParams,
	options?: RequestInit,
): Promise<createCsrfTokenCsrfTokenGetResponse> => {
	const res = await fetch(getCreateCsrfTokenCsrfTokenGetUrl(params), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: createCsrfTokenCsrfTokenGetResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as createCsrfTokenCsrfTokenGetResponse;
};

export const getCreateCsrfTokenCsrfTokenGetQueryKey = (
	params: CreateCsrfTokenCsrfTokenGetParams,
) => {
	return [
		`http://prefect.grose.click/api/csrf-token`,
		...(params ? [params] : []),
	] as const;
};

export const getCreateCsrfTokenCsrfTokenGetQueryOptions = <
	TData = Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
	TError = HTTPValidationError,
>(
	params: CreateCsrfTokenCsrfTokenGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getCreateCsrfTokenCsrfTokenGetQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>
	> = ({ signal }) =>
		createCsrfTokenCsrfTokenGet(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CreateCsrfTokenCsrfTokenGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>
>;
export type CreateCsrfTokenCsrfTokenGetQueryError = HTTPValidationError;

export function useCreateCsrfTokenCsrfTokenGet<
	TData = Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
	TError = HTTPValidationError,
>(
	params: CreateCsrfTokenCsrfTokenGetParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
					TError,
					Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCreateCsrfTokenCsrfTokenGet<
	TData = Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
	TError = HTTPValidationError,
>(
	params: CreateCsrfTokenCsrfTokenGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
					TError,
					Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCreateCsrfTokenCsrfTokenGet<
	TData = Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
	TError = HTTPValidationError,
>(
	params: CreateCsrfTokenCsrfTokenGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Create Csrf Token
 */

export function useCreateCsrfTokenCsrfTokenGet<
	TData = Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
	TError = HTTPValidationError,
>(
	params: CreateCsrfTokenCsrfTokenGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getCreateCsrfTokenCsrfTokenGetQueryOptions(
		params,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getCreateCsrfTokenCsrfTokenGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
	TError = HTTPValidationError,
>(
	params: CreateCsrfTokenCsrfTokenGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getCreateCsrfTokenCsrfTokenGetQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>
	> = ({ signal }) =>
		createCsrfTokenCsrfTokenGet(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CreateCsrfTokenCsrfTokenGetSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>
>;
export type CreateCsrfTokenCsrfTokenGetSuspenseQueryError = HTTPValidationError;

export function useCreateCsrfTokenCsrfTokenGetSuspense<
	TData = Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
	TError = HTTPValidationError,
>(
	params: CreateCsrfTokenCsrfTokenGetParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCreateCsrfTokenCsrfTokenGetSuspense<
	TData = Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
	TError = HTTPValidationError,
>(
	params: CreateCsrfTokenCsrfTokenGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCreateCsrfTokenCsrfTokenGetSuspense<
	TData = Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
	TError = HTTPValidationError,
>(
	params: CreateCsrfTokenCsrfTokenGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Create Csrf Token
 */

export function useCreateCsrfTokenCsrfTokenGetSuspense<
	TData = Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
	TError = HTTPValidationError,
>(
	params: CreateCsrfTokenCsrfTokenGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof createCsrfTokenCsrfTokenGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getCreateCsrfTokenCsrfTokenGetSuspenseQueryOptions(
		params,
		options,
	);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
