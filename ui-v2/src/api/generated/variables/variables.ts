/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
	BodyCountVariablesVariablesCountPost,
	BodyReadVariablesVariablesFilterPost,
	HTTPValidationError,
	Variable,
	VariableCreate,
	VariableUpdate,
} from "../../models";

/**
 * @summary Create Variable
 */
export type createVariableVariablesPostResponse = {
	data: Variable | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getCreateVariableVariablesPostUrl = () => {
	return `http://prefect.grose.click/api/variables/`;
};

export const createVariableVariablesPost = async (
	variableCreate: VariableCreate,
	options?: RequestInit,
): Promise<createVariableVariablesPostResponse> => {
	const res = await fetch(getCreateVariableVariablesPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(variableCreate),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: createVariableVariablesPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as createVariableVariablesPostResponse;
};

export const getCreateVariableVariablesPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createVariableVariablesPost>>,
		TError,
		{ data: VariableCreate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createVariableVariablesPost>>,
	TError,
	{ data: VariableCreate },
	TContext
> => {
	const mutationKey = ["createVariableVariablesPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createVariableVariablesPost>>,
		{ data: VariableCreate }
	> = (props) => {
		const { data } = props ?? {};

		return createVariableVariablesPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateVariableVariablesPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof createVariableVariablesPost>>
>;
export type CreateVariableVariablesPostMutationBody = VariableCreate;
export type CreateVariableVariablesPostMutationError = HTTPValidationError;

/**
 * @summary Create Variable
 */
export const useCreateVariableVariablesPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createVariableVariablesPost>>,
		TError,
		{ data: VariableCreate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof createVariableVariablesPost>>,
	TError,
	{ data: VariableCreate },
	TContext
> => {
	const mutationOptions =
		getCreateVariableVariablesPostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Read Variable
 */
export type readVariableVariablesIdGetResponse = {
	data: Variable | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadVariableVariablesIdGetUrl = (id: string) => {
	return `http://prefect.grose.click/api/variables/${id}`;
};

export const readVariableVariablesIdGet = async (
	id: string,
	options?: RequestInit,
): Promise<readVariableVariablesIdGetResponse> => {
	const res = await fetch(getReadVariableVariablesIdGetUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readVariableVariablesIdGetResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readVariableVariablesIdGetResponse;
};

export const getReadVariableVariablesIdGetQueryKey = (id: string) => {
	return [`http://prefect.grose.click/api/variables/${id}`] as const;
};

export const getReadVariableVariablesIdGetQueryOptions = <
	TData = Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getReadVariableVariablesIdGetQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readVariableVariablesIdGet>>
	> = ({ signal }) =>
		readVariableVariablesIdGet(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadVariableVariablesIdGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof readVariableVariablesIdGet>>
>;
export type ReadVariableVariablesIdGetQueryError = HTTPValidationError;

export function useReadVariableVariablesIdGet<
	TData = Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
					TError,
					Awaited<ReturnType<typeof readVariableVariablesIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadVariableVariablesIdGet<
	TData = Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
					TError,
					Awaited<ReturnType<typeof readVariableVariablesIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadVariableVariablesIdGet<
	TData = Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Variable
 */

export function useReadVariableVariablesIdGet<
	TData = Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadVariableVariablesIdGetQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadVariableVariablesIdGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getReadVariableVariablesIdGetQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readVariableVariablesIdGet>>
	> = ({ signal }) =>
		readVariableVariablesIdGet(id, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadVariableVariablesIdGetSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof readVariableVariablesIdGet>>
>;
export type ReadVariableVariablesIdGetSuspenseQueryError = HTTPValidationError;

export function useReadVariableVariablesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadVariableVariablesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadVariableVariablesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Variable
 */

export function useReadVariableVariablesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readVariableVariablesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadVariableVariablesIdGetSuspenseQueryOptions(
		id,
		options,
	);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Update Variable
 */
export type updateVariableVariablesIdPatchResponse = {
	data: void | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getUpdateVariableVariablesIdPatchUrl = (id: string) => {
	return `http://prefect.grose.click/api/variables/${id}`;
};

export const updateVariableVariablesIdPatch = async (
	id: string,
	variableUpdate: VariableUpdate,
	options?: RequestInit,
): Promise<updateVariableVariablesIdPatchResponse> => {
	const res = await fetch(getUpdateVariableVariablesIdPatchUrl(id), {
		...options,
		method: "PATCH",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(variableUpdate),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: updateVariableVariablesIdPatchResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as updateVariableVariablesIdPatchResponse;
};

export const getUpdateVariableVariablesIdPatchMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateVariableVariablesIdPatch>>,
		TError,
		{ id: string; data: VariableUpdate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateVariableVariablesIdPatch>>,
	TError,
	{ id: string; data: VariableUpdate },
	TContext
> => {
	const mutationKey = ["updateVariableVariablesIdPatch"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateVariableVariablesIdPatch>>,
		{ id: string; data: VariableUpdate }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateVariableVariablesIdPatch(id, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateVariableVariablesIdPatchMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateVariableVariablesIdPatch>>
>;
export type UpdateVariableVariablesIdPatchMutationBody = VariableUpdate;
export type UpdateVariableVariablesIdPatchMutationError = HTTPValidationError;

/**
 * @summary Update Variable
 */
export const useUpdateVariableVariablesIdPatch = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateVariableVariablesIdPatch>>,
		TError,
		{ id: string; data: VariableUpdate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof updateVariableVariablesIdPatch>>,
	TError,
	{ id: string; data: VariableUpdate },
	TContext
> => {
	const mutationOptions =
		getUpdateVariableVariablesIdPatchMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Delete Variable
 */
export type deleteVariableVariablesIdDeleteResponse = {
	data: void | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getDeleteVariableVariablesIdDeleteUrl = (id: string) => {
	return `http://prefect.grose.click/api/variables/${id}`;
};

export const deleteVariableVariablesIdDelete = async (
	id: string,
	options?: RequestInit,
): Promise<deleteVariableVariablesIdDeleteResponse> => {
	const res = await fetch(getDeleteVariableVariablesIdDeleteUrl(id), {
		...options,
		method: "DELETE",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteVariableVariablesIdDeleteResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteVariableVariablesIdDeleteResponse;
};

export const getDeleteVariableVariablesIdDeleteMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteVariableVariablesIdDelete>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteVariableVariablesIdDelete>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["deleteVariableVariablesIdDelete"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteVariableVariablesIdDelete>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return deleteVariableVariablesIdDelete(id, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteVariableVariablesIdDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteVariableVariablesIdDelete>>
>;

export type DeleteVariableVariablesIdDeleteMutationError = HTTPValidationError;

/**
 * @summary Delete Variable
 */
export const useDeleteVariableVariablesIdDelete = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteVariableVariablesIdDelete>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteVariableVariablesIdDelete>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions =
		getDeleteVariableVariablesIdDeleteMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Read Variable By Name
 */
export type readVariableByNameVariablesNameNameGetResponse = {
	data: Variable | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadVariableByNameVariablesNameNameGetUrl = (name: string) => {
	return `http://prefect.grose.click/api/variables/name/${name}`;
};

export const readVariableByNameVariablesNameNameGet = async (
	name: string,
	options?: RequestInit,
): Promise<readVariableByNameVariablesNameNameGetResponse> => {
	const res = await fetch(getReadVariableByNameVariablesNameNameGetUrl(name), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readVariableByNameVariablesNameNameGetResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readVariableByNameVariablesNameNameGetResponse;
};

export const getReadVariableByNameVariablesNameNameGetQueryKey = (
	name: string,
) => {
	return [`http://prefect.grose.click/api/variables/name/${name}`] as const;
};

export const getReadVariableByNameVariablesNameNameGetQueryOptions = <
	TData = Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReadVariableByNameVariablesNameNameGetQueryKey(name);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>
	> = ({ signal }) =>
		readVariableByNameVariablesNameNameGet(name, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!name,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadVariableByNameVariablesNameNameGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>
>;
export type ReadVariableByNameVariablesNameNameGetQueryError =
	HTTPValidationError;

export function useReadVariableByNameVariablesNameNameGet<
	TData = Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
					TError,
					Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadVariableByNameVariablesNameNameGet<
	TData = Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
					TError,
					Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadVariableByNameVariablesNameNameGet<
	TData = Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Variable By Name
 */

export function useReadVariableByNameVariablesNameNameGet<
	TData = Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadVariableByNameVariablesNameNameGetQueryOptions(
		name,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadVariableByNameVariablesNameNameGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReadVariableByNameVariablesNameNameGetQueryKey(name);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>
	> = ({ signal }) =>
		readVariableByNameVariablesNameNameGet(name, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadVariableByNameVariablesNameNameGetSuspenseQueryResult =
	NonNullable<
		Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>
	>;
export type ReadVariableByNameVariablesNameNameGetSuspenseQueryError =
	HTTPValidationError;

export function useReadVariableByNameVariablesNameNameGetSuspense<
	TData = Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadVariableByNameVariablesNameNameGetSuspense<
	TData = Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadVariableByNameVariablesNameNameGetSuspense<
	TData = Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Variable By Name
 */

export function useReadVariableByNameVariablesNameNameGetSuspense<
	TData = Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readVariableByNameVariablesNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions =
		getReadVariableByNameVariablesNameNameGetSuspenseQueryOptions(
			name,
			options,
		);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Update Variable By Name
 */
export type updateVariableByNameVariablesNameNamePatchResponse = {
	data: void | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getUpdateVariableByNameVariablesNameNamePatchUrl = (
	name: string,
) => {
	return `http://prefect.grose.click/api/variables/name/${name}`;
};

export const updateVariableByNameVariablesNameNamePatch = async (
	name: string,
	variableUpdate: VariableUpdate,
	options?: RequestInit,
): Promise<updateVariableByNameVariablesNameNamePatchResponse> => {
	const res = await fetch(
		getUpdateVariableByNameVariablesNameNamePatchUrl(name),
		{
			...options,
			method: "PATCH",
			headers: { "Content-Type": "application/json", ...options?.headers },
			body: JSON.stringify(variableUpdate),
		},
	);

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: updateVariableByNameVariablesNameNamePatchResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as updateVariableByNameVariablesNameNamePatchResponse;
};

export const getUpdateVariableByNameVariablesNameNamePatchMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateVariableByNameVariablesNameNamePatch>>,
		TError,
		{ name: string; data: VariableUpdate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateVariableByNameVariablesNameNamePatch>>,
	TError,
	{ name: string; data: VariableUpdate },
	TContext
> => {
	const mutationKey = ["updateVariableByNameVariablesNameNamePatch"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateVariableByNameVariablesNameNamePatch>>,
		{ name: string; data: VariableUpdate }
	> = (props) => {
		const { name, data } = props ?? {};

		return updateVariableByNameVariablesNameNamePatch(name, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateVariableByNameVariablesNameNamePatchMutationResult =
	NonNullable<
		Awaited<ReturnType<typeof updateVariableByNameVariablesNameNamePatch>>
	>;
export type UpdateVariableByNameVariablesNameNamePatchMutationBody =
	VariableUpdate;
export type UpdateVariableByNameVariablesNameNamePatchMutationError =
	HTTPValidationError;

/**
 * @summary Update Variable By Name
 */
export const useUpdateVariableByNameVariablesNameNamePatch = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateVariableByNameVariablesNameNamePatch>>,
		TError,
		{ name: string; data: VariableUpdate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof updateVariableByNameVariablesNameNamePatch>>,
	TError,
	{ name: string; data: VariableUpdate },
	TContext
> => {
	const mutationOptions =
		getUpdateVariableByNameVariablesNameNamePatchMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Delete Variable By Name
 */
export type deleteVariableByNameVariablesNameNameDeleteResponse = {
	data: void | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getDeleteVariableByNameVariablesNameNameDeleteUrl = (
	name: string,
) => {
	return `http://prefect.grose.click/api/variables/name/${name}`;
};

export const deleteVariableByNameVariablesNameNameDelete = async (
	name: string,
	options?: RequestInit,
): Promise<deleteVariableByNameVariablesNameNameDeleteResponse> => {
	const res = await fetch(
		getDeleteVariableByNameVariablesNameNameDeleteUrl(name),
		{
			...options,
			method: "DELETE",
		},
	);

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteVariableByNameVariablesNameNameDeleteResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteVariableByNameVariablesNameNameDeleteResponse;
};

export const getDeleteVariableByNameVariablesNameNameDeleteMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteVariableByNameVariablesNameNameDelete>>,
		TError,
		{ name: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteVariableByNameVariablesNameNameDelete>>,
	TError,
	{ name: string },
	TContext
> => {
	const mutationKey = ["deleteVariableByNameVariablesNameNameDelete"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteVariableByNameVariablesNameNameDelete>>,
		{ name: string }
	> = (props) => {
		const { name } = props ?? {};

		return deleteVariableByNameVariablesNameNameDelete(name, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteVariableByNameVariablesNameNameDeleteMutationResult =
	NonNullable<
		Awaited<ReturnType<typeof deleteVariableByNameVariablesNameNameDelete>>
	>;

export type DeleteVariableByNameVariablesNameNameDeleteMutationError =
	HTTPValidationError;

/**
 * @summary Delete Variable By Name
 */
export const useDeleteVariableByNameVariablesNameNameDelete = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteVariableByNameVariablesNameNameDelete>>,
		TError,
		{ name: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteVariableByNameVariablesNameNameDelete>>,
	TError,
	{ name: string },
	TContext
> => {
	const mutationOptions =
		getDeleteVariableByNameVariablesNameNameDeleteMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Read Variables
 */
export type readVariablesVariablesFilterPostResponse = {
	data: Variable[] | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadVariablesVariablesFilterPostUrl = () => {
	return `http://prefect.grose.click/api/variables/filter`;
};

export const readVariablesVariablesFilterPost = async (
	bodyReadVariablesVariablesFilterPost: BodyReadVariablesVariablesFilterPost,
	options?: RequestInit,
): Promise<readVariablesVariablesFilterPostResponse> => {
	const res = await fetch(getReadVariablesVariablesFilterPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(bodyReadVariablesVariablesFilterPost),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readVariablesVariablesFilterPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readVariablesVariablesFilterPostResponse;
};

export const getReadVariablesVariablesFilterPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof readVariablesVariablesFilterPost>>,
		TError,
		{ data: BodyReadVariablesVariablesFilterPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof readVariablesVariablesFilterPost>>,
	TError,
	{ data: BodyReadVariablesVariablesFilterPost },
	TContext
> => {
	const mutationKey = ["readVariablesVariablesFilterPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof readVariablesVariablesFilterPost>>,
		{ data: BodyReadVariablesVariablesFilterPost }
	> = (props) => {
		const { data } = props ?? {};

		return readVariablesVariablesFilterPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type ReadVariablesVariablesFilterPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof readVariablesVariablesFilterPost>>
>;
export type ReadVariablesVariablesFilterPostMutationBody =
	BodyReadVariablesVariablesFilterPost;
export type ReadVariablesVariablesFilterPostMutationError = HTTPValidationError;

/**
 * @summary Read Variables
 */
export const useReadVariablesVariablesFilterPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof readVariablesVariablesFilterPost>>,
		TError,
		{ data: BodyReadVariablesVariablesFilterPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof readVariablesVariablesFilterPost>>,
	TError,
	{ data: BodyReadVariablesVariablesFilterPost },
	TContext
> => {
	const mutationOptions =
		getReadVariablesVariablesFilterPostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Count Variables
 */
export type countVariablesVariablesCountPostResponse = {
	data: number | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getCountVariablesVariablesCountPostUrl = () => {
	return `http://prefect.grose.click/api/variables/count`;
};

export const countVariablesVariablesCountPost = async (
	bodyCountVariablesVariablesCountPost: BodyCountVariablesVariablesCountPost,
	options?: RequestInit,
): Promise<countVariablesVariablesCountPostResponse> => {
	const res = await fetch(getCountVariablesVariablesCountPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(bodyCountVariablesVariablesCountPost),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: countVariablesVariablesCountPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as countVariablesVariablesCountPostResponse;
};

export const getCountVariablesVariablesCountPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof countVariablesVariablesCountPost>>,
		TError,
		{ data: BodyCountVariablesVariablesCountPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof countVariablesVariablesCountPost>>,
	TError,
	{ data: BodyCountVariablesVariablesCountPost },
	TContext
> => {
	const mutationKey = ["countVariablesVariablesCountPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof countVariablesVariablesCountPost>>,
		{ data: BodyCountVariablesVariablesCountPost }
	> = (props) => {
		const { data } = props ?? {};

		return countVariablesVariablesCountPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CountVariablesVariablesCountPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof countVariablesVariablesCountPost>>
>;
export type CountVariablesVariablesCountPostMutationBody =
	BodyCountVariablesVariablesCountPost;
export type CountVariablesVariablesCountPostMutationError = HTTPValidationError;

/**
 * @summary Count Variables
 */
export const useCountVariablesVariablesCountPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof countVariablesVariablesCountPost>>,
		TError,
		{ data: BodyCountVariablesVariablesCountPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof countVariablesVariablesCountPost>>,
	TError,
	{ data: BodyCountVariablesVariablesCountPost },
	TContext
> => {
	const mutationOptions =
		getCountVariablesVariablesCountPostMutationOptions(options);

	return useMutation(mutationOptions);
};
