/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
	BodyCountDeploymentsByFlowUiFlowsCountDeploymentsPost,
	BodyCountFlowsFlowsCountPost,
	BodyNextRunsByFlowUiFlowsNextRunsPost,
	BodyPaginateFlowsFlowsPaginatePost,
	BodyReadFlowsFlowsFilterPost,
	CountDeploymentsByFlowUiFlowsCountDeploymentsPost200,
	Flow,
	FlowCreate,
	FlowPaginationResponse,
	FlowUpdate,
	HTTPValidationError,
	NextRunsByFlowUiFlowsNextRunsPost200,
} from "../../models";

/**
 * Gracefully creates a new flow from the provided schema. If a flow with the
same name already exists, the existing flow is returned.
 * @summary Create Flow
 */
export type createFlowFlowsPostResponse = {
	data: Flow | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getCreateFlowFlowsPostUrl = () => {
	return `http://prefect.grose.click/api/flows/`;
};

export const createFlowFlowsPost = async (
	flowCreate: FlowCreate,
	options?: RequestInit,
): Promise<createFlowFlowsPostResponse> => {
	const res = await fetch(getCreateFlowFlowsPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(flowCreate),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: createFlowFlowsPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as createFlowFlowsPostResponse;
};

export const getCreateFlowFlowsPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createFlowFlowsPost>>,
		TError,
		{ data: FlowCreate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createFlowFlowsPost>>,
	TError,
	{ data: FlowCreate },
	TContext
> => {
	const mutationKey = ["createFlowFlowsPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createFlowFlowsPost>>,
		{ data: FlowCreate }
	> = (props) => {
		const { data } = props ?? {};

		return createFlowFlowsPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateFlowFlowsPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof createFlowFlowsPost>>
>;
export type CreateFlowFlowsPostMutationBody = FlowCreate;
export type CreateFlowFlowsPostMutationError = HTTPValidationError;

/**
 * @summary Create Flow
 */
export const useCreateFlowFlowsPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createFlowFlowsPost>>,
		TError,
		{ data: FlowCreate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof createFlowFlowsPost>>,
	TError,
	{ data: FlowCreate },
	TContext
> => {
	const mutationOptions = getCreateFlowFlowsPostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Updates a flow.
 * @summary Update Flow
 */
export type updateFlowFlowsIdPatchResponse = {
	data: void | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getUpdateFlowFlowsIdPatchUrl = (id: string) => {
	return `http://prefect.grose.click/api/flows/${id}`;
};

export const updateFlowFlowsIdPatch = async (
	id: string,
	flowUpdate: FlowUpdate,
	options?: RequestInit,
): Promise<updateFlowFlowsIdPatchResponse> => {
	const res = await fetch(getUpdateFlowFlowsIdPatchUrl(id), {
		...options,
		method: "PATCH",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(flowUpdate),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: updateFlowFlowsIdPatchResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as updateFlowFlowsIdPatchResponse;
};

export const getUpdateFlowFlowsIdPatchMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateFlowFlowsIdPatch>>,
		TError,
		{ id: string; data: FlowUpdate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateFlowFlowsIdPatch>>,
	TError,
	{ id: string; data: FlowUpdate },
	TContext
> => {
	const mutationKey = ["updateFlowFlowsIdPatch"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateFlowFlowsIdPatch>>,
		{ id: string; data: FlowUpdate }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateFlowFlowsIdPatch(id, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateFlowFlowsIdPatchMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateFlowFlowsIdPatch>>
>;
export type UpdateFlowFlowsIdPatchMutationBody = FlowUpdate;
export type UpdateFlowFlowsIdPatchMutationError = HTTPValidationError;

/**
 * @summary Update Flow
 */
export const useUpdateFlowFlowsIdPatch = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateFlowFlowsIdPatch>>,
		TError,
		{ id: string; data: FlowUpdate },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof updateFlowFlowsIdPatch>>,
	TError,
	{ id: string; data: FlowUpdate },
	TContext
> => {
	const mutationOptions = getUpdateFlowFlowsIdPatchMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Get a flow by id.
 * @summary Read Flow
 */
export type readFlowFlowsIdGetResponse = {
	data: Flow | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadFlowFlowsIdGetUrl = (id: string) => {
	return `http://prefect.grose.click/api/flows/${id}`;
};

export const readFlowFlowsIdGet = async (
	id: string,
	options?: RequestInit,
): Promise<readFlowFlowsIdGetResponse> => {
	const res = await fetch(getReadFlowFlowsIdGetUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readFlowFlowsIdGetResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readFlowFlowsIdGetResponse;
};

export const getReadFlowFlowsIdGetQueryKey = (id: string) => {
	return [`http://prefect.grose.click/api/flows/${id}`] as const;
};

export const getReadFlowFlowsIdGetQueryOptions = <
	TData = Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getReadFlowFlowsIdGetQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readFlowFlowsIdGet>>
	> = ({ signal }) => readFlowFlowsIdGet(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadFlowFlowsIdGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof readFlowFlowsIdGet>>
>;
export type ReadFlowFlowsIdGetQueryError = HTTPValidationError;

export function useReadFlowFlowsIdGet<
	TData = Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
					TError,
					Awaited<ReturnType<typeof readFlowFlowsIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadFlowFlowsIdGet<
	TData = Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
					TError,
					Awaited<ReturnType<typeof readFlowFlowsIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadFlowFlowsIdGet<
	TData = Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Flow
 */

export function useReadFlowFlowsIdGet<
	TData = Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadFlowFlowsIdGetQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadFlowFlowsIdGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getReadFlowFlowsIdGetQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readFlowFlowsIdGet>>
	> = ({ signal }) => readFlowFlowsIdGet(id, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadFlowFlowsIdGetSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof readFlowFlowsIdGet>>
>;
export type ReadFlowFlowsIdGetSuspenseQueryError = HTTPValidationError;

export function useReadFlowFlowsIdGetSuspense<
	TData = Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadFlowFlowsIdGetSuspense<
	TData = Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadFlowFlowsIdGetSuspense<
	TData = Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Flow
 */

export function useReadFlowFlowsIdGetSuspense<
	TData = Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readFlowFlowsIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadFlowFlowsIdGetSuspenseQueryOptions(id, options);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Delete a flow by id.
 * @summary Delete Flow
 */
export type deleteFlowFlowsIdDeleteResponse = {
	data: void | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getDeleteFlowFlowsIdDeleteUrl = (id: string) => {
	return `http://prefect.grose.click/api/flows/${id}`;
};

export const deleteFlowFlowsIdDelete = async (
	id: string,
	options?: RequestInit,
): Promise<deleteFlowFlowsIdDeleteResponse> => {
	const res = await fetch(getDeleteFlowFlowsIdDeleteUrl(id), {
		...options,
		method: "DELETE",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteFlowFlowsIdDeleteResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteFlowFlowsIdDeleteResponse;
};

export const getDeleteFlowFlowsIdDeleteMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteFlowFlowsIdDelete>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteFlowFlowsIdDelete>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["deleteFlowFlowsIdDelete"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteFlowFlowsIdDelete>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return deleteFlowFlowsIdDelete(id, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteFlowFlowsIdDeleteMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteFlowFlowsIdDelete>>
>;

export type DeleteFlowFlowsIdDeleteMutationError = HTTPValidationError;

/**
 * @summary Delete Flow
 */
export const useDeleteFlowFlowsIdDelete = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteFlowFlowsIdDelete>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteFlowFlowsIdDelete>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteFlowFlowsIdDeleteMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Count flows.
 * @summary Count Flows
 */
export type countFlowsFlowsCountPostResponse = {
	data: number | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getCountFlowsFlowsCountPostUrl = () => {
	return `http://prefect.grose.click/api/flows/count`;
};

export const countFlowsFlowsCountPost = async (
	bodyCountFlowsFlowsCountPost: BodyCountFlowsFlowsCountPost,
	options?: RequestInit,
): Promise<countFlowsFlowsCountPostResponse> => {
	const res = await fetch(getCountFlowsFlowsCountPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(bodyCountFlowsFlowsCountPost),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: countFlowsFlowsCountPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as countFlowsFlowsCountPostResponse;
};

export const getCountFlowsFlowsCountPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof countFlowsFlowsCountPost>>,
		TError,
		{ data: BodyCountFlowsFlowsCountPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof countFlowsFlowsCountPost>>,
	TError,
	{ data: BodyCountFlowsFlowsCountPost },
	TContext
> => {
	const mutationKey = ["countFlowsFlowsCountPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof countFlowsFlowsCountPost>>,
		{ data: BodyCountFlowsFlowsCountPost }
	> = (props) => {
		const { data } = props ?? {};

		return countFlowsFlowsCountPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CountFlowsFlowsCountPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof countFlowsFlowsCountPost>>
>;
export type CountFlowsFlowsCountPostMutationBody = BodyCountFlowsFlowsCountPost;
export type CountFlowsFlowsCountPostMutationError = HTTPValidationError;

/**
 * @summary Count Flows
 */
export const useCountFlowsFlowsCountPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof countFlowsFlowsCountPost>>,
		TError,
		{ data: BodyCountFlowsFlowsCountPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof countFlowsFlowsCountPost>>,
	TError,
	{ data: BodyCountFlowsFlowsCountPost },
	TContext
> => {
	const mutationOptions = getCountFlowsFlowsCountPostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Get a flow by name.
 * @summary Read Flow By Name
 */
export type readFlowByNameFlowsNameNameGetResponse = {
	data: Flow | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadFlowByNameFlowsNameNameGetUrl = (name: string) => {
	return `http://prefect.grose.click/api/flows/name/${name}`;
};

export const readFlowByNameFlowsNameNameGet = async (
	name: string,
	options?: RequestInit,
): Promise<readFlowByNameFlowsNameNameGetResponse> => {
	const res = await fetch(getReadFlowByNameFlowsNameNameGetUrl(name), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readFlowByNameFlowsNameNameGetResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readFlowByNameFlowsNameNameGetResponse;
};

export const getReadFlowByNameFlowsNameNameGetQueryKey = (name: string) => {
	return [`http://prefect.grose.click/api/flows/name/${name}`] as const;
};

export const getReadFlowByNameFlowsNameNameGetQueryOptions = <
	TData = Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getReadFlowByNameFlowsNameNameGetQueryKey(name);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>
	> = ({ signal }) =>
		readFlowByNameFlowsNameNameGet(name, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!name,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadFlowByNameFlowsNameNameGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>
>;
export type ReadFlowByNameFlowsNameNameGetQueryError = HTTPValidationError;

export function useReadFlowByNameFlowsNameNameGet<
	TData = Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
					TError,
					Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadFlowByNameFlowsNameNameGet<
	TData = Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
					TError,
					Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadFlowByNameFlowsNameNameGet<
	TData = Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Flow By Name
 */

export function useReadFlowByNameFlowsNameNameGet<
	TData = Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadFlowByNameFlowsNameNameGetQueryOptions(
		name,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadFlowByNameFlowsNameNameGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getReadFlowByNameFlowsNameNameGetQueryKey(name);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>
	> = ({ signal }) =>
		readFlowByNameFlowsNameNameGet(name, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadFlowByNameFlowsNameNameGetSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>
>;
export type ReadFlowByNameFlowsNameNameGetSuspenseQueryError =
	HTTPValidationError;

export function useReadFlowByNameFlowsNameNameGetSuspense<
	TData = Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadFlowByNameFlowsNameNameGetSuspense<
	TData = Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadFlowByNameFlowsNameNameGetSuspense<
	TData = Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Flow By Name
 */

export function useReadFlowByNameFlowsNameNameGetSuspense<
	TData = Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
	TError = HTTPValidationError,
>(
	name: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readFlowByNameFlowsNameNameGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadFlowByNameFlowsNameNameGetSuspenseQueryOptions(
		name,
		options,
	);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Query for flows.
 * @summary Read Flows
 */
export type readFlowsFlowsFilterPostResponse = {
	data: Flow[] | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadFlowsFlowsFilterPostUrl = () => {
	return `http://prefect.grose.click/api/flows/filter`;
};

export const readFlowsFlowsFilterPost = async (
	bodyReadFlowsFlowsFilterPost: BodyReadFlowsFlowsFilterPost,
	options?: RequestInit,
): Promise<readFlowsFlowsFilterPostResponse> => {
	const res = await fetch(getReadFlowsFlowsFilterPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(bodyReadFlowsFlowsFilterPost),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readFlowsFlowsFilterPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readFlowsFlowsFilterPostResponse;
};

export const getReadFlowsFlowsFilterPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof readFlowsFlowsFilterPost>>,
		TError,
		{ data: BodyReadFlowsFlowsFilterPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof readFlowsFlowsFilterPost>>,
	TError,
	{ data: BodyReadFlowsFlowsFilterPost },
	TContext
> => {
	const mutationKey = ["readFlowsFlowsFilterPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof readFlowsFlowsFilterPost>>,
		{ data: BodyReadFlowsFlowsFilterPost }
	> = (props) => {
		const { data } = props ?? {};

		return readFlowsFlowsFilterPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type ReadFlowsFlowsFilterPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof readFlowsFlowsFilterPost>>
>;
export type ReadFlowsFlowsFilterPostMutationBody = BodyReadFlowsFlowsFilterPost;
export type ReadFlowsFlowsFilterPostMutationError = HTTPValidationError;

/**
 * @summary Read Flows
 */
export const useReadFlowsFlowsFilterPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof readFlowsFlowsFilterPost>>,
		TError,
		{ data: BodyReadFlowsFlowsFilterPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof readFlowsFlowsFilterPost>>,
	TError,
	{ data: BodyReadFlowsFlowsFilterPost },
	TContext
> => {
	const mutationOptions = getReadFlowsFlowsFilterPostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Pagination query for flows.
 * @summary Paginate Flows
 */
export type paginateFlowsFlowsPaginatePostResponse = {
	data: FlowPaginationResponse | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getPaginateFlowsFlowsPaginatePostUrl = () => {
	return `http://prefect.grose.click/api/flows/paginate`;
};

export const paginateFlowsFlowsPaginatePost = async (
	bodyPaginateFlowsFlowsPaginatePost: BodyPaginateFlowsFlowsPaginatePost,
	options?: RequestInit,
): Promise<paginateFlowsFlowsPaginatePostResponse> => {
	const res = await fetch(getPaginateFlowsFlowsPaginatePostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(bodyPaginateFlowsFlowsPaginatePost),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: paginateFlowsFlowsPaginatePostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as paginateFlowsFlowsPaginatePostResponse;
};

export const getPaginateFlowsFlowsPaginatePostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paginateFlowsFlowsPaginatePost>>,
		TError,
		{ data: BodyPaginateFlowsFlowsPaginatePost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof paginateFlowsFlowsPaginatePost>>,
	TError,
	{ data: BodyPaginateFlowsFlowsPaginatePost },
	TContext
> => {
	const mutationKey = ["paginateFlowsFlowsPaginatePost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof paginateFlowsFlowsPaginatePost>>,
		{ data: BodyPaginateFlowsFlowsPaginatePost }
	> = (props) => {
		const { data } = props ?? {};

		return paginateFlowsFlowsPaginatePost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PaginateFlowsFlowsPaginatePostMutationResult = NonNullable<
	Awaited<ReturnType<typeof paginateFlowsFlowsPaginatePost>>
>;
export type PaginateFlowsFlowsPaginatePostMutationBody =
	BodyPaginateFlowsFlowsPaginatePost;
export type PaginateFlowsFlowsPaginatePostMutationError = HTTPValidationError;

/**
 * @summary Paginate Flows
 */
export const usePaginateFlowsFlowsPaginatePost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof paginateFlowsFlowsPaginatePost>>,
		TError,
		{ data: BodyPaginateFlowsFlowsPaginatePost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof paginateFlowsFlowsPaginatePost>>,
	TError,
	{ data: BodyPaginateFlowsFlowsPaginatePost },
	TContext
> => {
	const mutationOptions =
		getPaginateFlowsFlowsPaginatePostMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Get deployment counts by flow id.
 * @summary Count Deployments By Flow
 */
export type countDeploymentsByFlowUiFlowsCountDeploymentsPostResponse = {
	data:
		| CountDeploymentsByFlowUiFlowsCountDeploymentsPost200
		| HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getCountDeploymentsByFlowUiFlowsCountDeploymentsPostUrl = () => {
	return `http://prefect.grose.click/api/ui/flows/count-deployments`;
};

export const countDeploymentsByFlowUiFlowsCountDeploymentsPost = async (
	bodyCountDeploymentsByFlowUiFlowsCountDeploymentsPost: BodyCountDeploymentsByFlowUiFlowsCountDeploymentsPost,
	options?: RequestInit,
): Promise<countDeploymentsByFlowUiFlowsCountDeploymentsPostResponse> => {
	const res = await fetch(
		getCountDeploymentsByFlowUiFlowsCountDeploymentsPostUrl(),
		{
			...options,
			method: "POST",
			headers: { "Content-Type": "application/json", ...options?.headers },
			body: JSON.stringify(
				bodyCountDeploymentsByFlowUiFlowsCountDeploymentsPost,
			),
		},
	);

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: countDeploymentsByFlowUiFlowsCountDeploymentsPostResponse["data"] =
		body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as countDeploymentsByFlowUiFlowsCountDeploymentsPostResponse;
};

export const getCountDeploymentsByFlowUiFlowsCountDeploymentsPostMutationOptions =
	<TError = HTTPValidationError, TContext = unknown>(options?: {
		mutation?: UseMutationOptions<
			Awaited<
				ReturnType<typeof countDeploymentsByFlowUiFlowsCountDeploymentsPost>
			>,
			TError,
			{ data: BodyCountDeploymentsByFlowUiFlowsCountDeploymentsPost },
			TContext
		>;
		fetch?: RequestInit;
	}): UseMutationOptions<
		Awaited<
			ReturnType<typeof countDeploymentsByFlowUiFlowsCountDeploymentsPost>
		>,
		TError,
		{ data: BodyCountDeploymentsByFlowUiFlowsCountDeploymentsPost },
		TContext
	> => {
		const mutationKey = ["countDeploymentsByFlowUiFlowsCountDeploymentsPost"];
		const { mutation: mutationOptions, fetch: fetchOptions } = options
			? options.mutation &&
				"mutationKey" in options.mutation &&
				options.mutation.mutationKey
				? options
				: { ...options, mutation: { ...options.mutation, mutationKey } }
			: { mutation: { mutationKey }, fetch: undefined };

		const mutationFn: MutationFunction<
			Awaited<
				ReturnType<typeof countDeploymentsByFlowUiFlowsCountDeploymentsPost>
			>,
			{ data: BodyCountDeploymentsByFlowUiFlowsCountDeploymentsPost }
		> = (props) => {
			const { data } = props ?? {};

			return countDeploymentsByFlowUiFlowsCountDeploymentsPost(
				data,
				fetchOptions,
			);
		};

		return { mutationFn, ...mutationOptions };
	};

export type CountDeploymentsByFlowUiFlowsCountDeploymentsPostMutationResult =
	NonNullable<
		Awaited<
			ReturnType<typeof countDeploymentsByFlowUiFlowsCountDeploymentsPost>
		>
	>;
export type CountDeploymentsByFlowUiFlowsCountDeploymentsPostMutationBody =
	BodyCountDeploymentsByFlowUiFlowsCountDeploymentsPost;
export type CountDeploymentsByFlowUiFlowsCountDeploymentsPostMutationError =
	HTTPValidationError;

/**
 * @summary Count Deployments By Flow
 */
export const useCountDeploymentsByFlowUiFlowsCountDeploymentsPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<
			ReturnType<typeof countDeploymentsByFlowUiFlowsCountDeploymentsPost>
		>,
		TError,
		{ data: BodyCountDeploymentsByFlowUiFlowsCountDeploymentsPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof countDeploymentsByFlowUiFlowsCountDeploymentsPost>>,
	TError,
	{ data: BodyCountDeploymentsByFlowUiFlowsCountDeploymentsPost },
	TContext
> => {
	const mutationOptions =
		getCountDeploymentsByFlowUiFlowsCountDeploymentsPostMutationOptions(
			options,
		);

	return useMutation(mutationOptions);
};
/**
 * Get the next flow run by flow id.
 * @summary Next Runs By Flow
 */
export type nextRunsByFlowUiFlowsNextRunsPostResponse = {
	data: NextRunsByFlowUiFlowsNextRunsPost200 | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getNextRunsByFlowUiFlowsNextRunsPostUrl = () => {
	return `http://prefect.grose.click/api/ui/flows/next-runs`;
};

export const nextRunsByFlowUiFlowsNextRunsPost = async (
	bodyNextRunsByFlowUiFlowsNextRunsPost: BodyNextRunsByFlowUiFlowsNextRunsPost,
	options?: RequestInit,
): Promise<nextRunsByFlowUiFlowsNextRunsPostResponse> => {
	const res = await fetch(getNextRunsByFlowUiFlowsNextRunsPostUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(bodyNextRunsByFlowUiFlowsNextRunsPost),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: nextRunsByFlowUiFlowsNextRunsPostResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as nextRunsByFlowUiFlowsNextRunsPostResponse;
};

export const getNextRunsByFlowUiFlowsNextRunsPostMutationOptions = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof nextRunsByFlowUiFlowsNextRunsPost>>,
		TError,
		{ data: BodyNextRunsByFlowUiFlowsNextRunsPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof nextRunsByFlowUiFlowsNextRunsPost>>,
	TError,
	{ data: BodyNextRunsByFlowUiFlowsNextRunsPost },
	TContext
> => {
	const mutationKey = ["nextRunsByFlowUiFlowsNextRunsPost"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof nextRunsByFlowUiFlowsNextRunsPost>>,
		{ data: BodyNextRunsByFlowUiFlowsNextRunsPost }
	> = (props) => {
		const { data } = props ?? {};

		return nextRunsByFlowUiFlowsNextRunsPost(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type NextRunsByFlowUiFlowsNextRunsPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof nextRunsByFlowUiFlowsNextRunsPost>>
>;
export type NextRunsByFlowUiFlowsNextRunsPostMutationBody =
	BodyNextRunsByFlowUiFlowsNextRunsPost;
export type NextRunsByFlowUiFlowsNextRunsPostMutationError =
	HTTPValidationError;

/**
 * @summary Next Runs By Flow
 */
export const useNextRunsByFlowUiFlowsNextRunsPost = <
	TError = HTTPValidationError,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof nextRunsByFlowUiFlowsNextRunsPost>>,
		TError,
		{ data: BodyNextRunsByFlowUiFlowsNextRunsPost },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationResult<
	Awaited<ReturnType<typeof nextRunsByFlowUiFlowsNextRunsPost>>,
	TError,
	{ data: BodyNextRunsByFlowUiFlowsNextRunsPost },
	TContext
> => {
	const mutationOptions =
		getNextRunsByFlowUiFlowsNextRunsPostMutationOptions(options);

	return useMutation(mutationOptions);
};
