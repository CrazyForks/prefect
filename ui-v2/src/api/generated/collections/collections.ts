/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
	HTTPValidationError,
	ReadViewContentCollectionsViewsViewGet200,
} from "../../models";

/**
 * Reads the content of a view from the prefect-collection-registry.
 * @summary Read View Content
 */
export type readViewContentCollectionsViewsViewGetResponse = {
	data: ReadViewContentCollectionsViewsViewGet200 | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadViewContentCollectionsViewsViewGetUrl = (view: string) => {
	return `http://prefect.grose.click/api/collections/views/${view}`;
};

export const readViewContentCollectionsViewsViewGet = async (
	view: string,
	options?: RequestInit,
): Promise<readViewContentCollectionsViewsViewGetResponse> => {
	const res = await fetch(getReadViewContentCollectionsViewsViewGetUrl(view), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readViewContentCollectionsViewsViewGetResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readViewContentCollectionsViewsViewGetResponse;
};

export const getReadViewContentCollectionsViewsViewGetQueryKey = (
	view: string,
) => {
	return [`http://prefect.grose.click/api/collections/views/${view}`] as const;
};

export const getReadViewContentCollectionsViewsViewGetQueryOptions = <
	TData = Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
	TError = HTTPValidationError,
>(
	view: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReadViewContentCollectionsViewsViewGetQueryKey(view);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>
	> = ({ signal }) =>
		readViewContentCollectionsViewsViewGet(view, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!view,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadViewContentCollectionsViewsViewGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>
>;
export type ReadViewContentCollectionsViewsViewGetQueryError =
	HTTPValidationError;

export function useReadViewContentCollectionsViewsViewGet<
	TData = Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
	TError = HTTPValidationError,
>(
	view: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
					TError,
					Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadViewContentCollectionsViewsViewGet<
	TData = Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
	TError = HTTPValidationError,
>(
	view: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
					TError,
					Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadViewContentCollectionsViewsViewGet<
	TData = Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
	TError = HTTPValidationError,
>(
	view: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read View Content
 */

export function useReadViewContentCollectionsViewsViewGet<
	TData = Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
	TError = HTTPValidationError,
>(
	view: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadViewContentCollectionsViewsViewGetQueryOptions(
		view,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadViewContentCollectionsViewsViewGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
	TError = HTTPValidationError,
>(
	view: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReadViewContentCollectionsViewsViewGetQueryKey(view);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>
	> = ({ signal }) =>
		readViewContentCollectionsViewsViewGet(view, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadViewContentCollectionsViewsViewGetSuspenseQueryResult =
	NonNullable<
		Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>
	>;
export type ReadViewContentCollectionsViewsViewGetSuspenseQueryError =
	HTTPValidationError;

export function useReadViewContentCollectionsViewsViewGetSuspense<
	TData = Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
	TError = HTTPValidationError,
>(
	view: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadViewContentCollectionsViewsViewGetSuspense<
	TData = Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
	TError = HTTPValidationError,
>(
	view: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadViewContentCollectionsViewsViewGetSuspense<
	TData = Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
	TError = HTTPValidationError,
>(
	view: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read View Content
 */

export function useReadViewContentCollectionsViewsViewGetSuspense<
	TData = Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
	TError = HTTPValidationError,
>(
	view: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readViewContentCollectionsViewsViewGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions =
		getReadViewContentCollectionsViewsViewGetSuspenseQueryOptions(
			view,
			options,
		);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
