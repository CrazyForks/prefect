/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
	HTTPValidationError,
	ReadTaskRunStatesTaskRunStatesGetParams,
	State,
} from "../../models";

/**
 * Get a task run state by id.
 * @summary Read Task Run State
 */
export type readTaskRunStateTaskRunStatesIdGetResponse = {
	data: State | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadTaskRunStateTaskRunStatesIdGetUrl = (id: string) => {
	return `http://prefect.grose.click/api/task_run_states/${id}`;
};

export const readTaskRunStateTaskRunStatesIdGet = async (
	id: string,
	options?: RequestInit,
): Promise<readTaskRunStateTaskRunStatesIdGetResponse> => {
	const res = await fetch(getReadTaskRunStateTaskRunStatesIdGetUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readTaskRunStateTaskRunStatesIdGetResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readTaskRunStateTaskRunStatesIdGetResponse;
};

export const getReadTaskRunStateTaskRunStatesIdGetQueryKey = (id: string) => {
	return [`http://prefect.grose.click/api/task_run_states/${id}`] as const;
};

export const getReadTaskRunStateTaskRunStatesIdGetQueryOptions = <
	TData = Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getReadTaskRunStateTaskRunStatesIdGetQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>
	> = ({ signal }) =>
		readTaskRunStateTaskRunStatesIdGet(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadTaskRunStateTaskRunStatesIdGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>
>;
export type ReadTaskRunStateTaskRunStatesIdGetQueryError = HTTPValidationError;

export function useReadTaskRunStateTaskRunStatesIdGet<
	TData = Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
					TError,
					Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadTaskRunStateTaskRunStatesIdGet<
	TData = Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
					TError,
					Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadTaskRunStateTaskRunStatesIdGet<
	TData = Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Task Run State
 */

export function useReadTaskRunStateTaskRunStatesIdGet<
	TData = Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadTaskRunStateTaskRunStatesIdGetQueryOptions(
		id,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadTaskRunStateTaskRunStatesIdGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getReadTaskRunStateTaskRunStatesIdGetQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>
	> = ({ signal }) =>
		readTaskRunStateTaskRunStatesIdGet(id, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadTaskRunStateTaskRunStatesIdGetSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>
>;
export type ReadTaskRunStateTaskRunStatesIdGetSuspenseQueryError =
	HTTPValidationError;

export function useReadTaskRunStateTaskRunStatesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadTaskRunStateTaskRunStatesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadTaskRunStateTaskRunStatesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Task Run State
 */

export function useReadTaskRunStateTaskRunStatesIdGetSuspense<
	TData = Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
	TError = HTTPValidationError,
>(
	id: string,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStateTaskRunStatesIdGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions =
		getReadTaskRunStateTaskRunStatesIdGetSuspenseQueryOptions(id, options);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Get states associated with a task run.
 * @summary Read Task Run States
 */
export type readTaskRunStatesTaskRunStatesGetResponse = {
	data: State[] | HTTPValidationError;
	status: number;
	headers: Headers;
};

export const getReadTaskRunStatesTaskRunStatesGetUrl = (
	params: ReadTaskRunStatesTaskRunStatesGetParams,
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	return normalizedParams.size
		? `http://prefect.grose.click/api/task_run_states/?${normalizedParams.toString()}`
		: `http://prefect.grose.click/api/task_run_states/`;
};

export const readTaskRunStatesTaskRunStatesGet = async (
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options?: RequestInit,
): Promise<readTaskRunStatesTaskRunStatesGetResponse> => {
	const res = await fetch(getReadTaskRunStatesTaskRunStatesGetUrl(params), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: readTaskRunStatesTaskRunStatesGetResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as readTaskRunStatesTaskRunStatesGetResponse;
};

export const getReadTaskRunStatesTaskRunStatesGetQueryKey = (
	params: ReadTaskRunStatesTaskRunStatesGetParams,
) => {
	return [
		`http://prefect.grose.click/api/task_run_states/`,
		...(params ? [params] : []),
	] as const;
};

export const getReadTaskRunStatesTaskRunStatesGetQueryOptions = <
	TData = Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
	TError = HTTPValidationError,
>(
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReadTaskRunStatesTaskRunStatesGetQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>
	> = ({ signal }) =>
		readTaskRunStatesTaskRunStatesGet(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadTaskRunStatesTaskRunStatesGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>
>;
export type ReadTaskRunStatesTaskRunStatesGetQueryError = HTTPValidationError;

export function useReadTaskRunStatesTaskRunStatesGet<
	TData = Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
	TError = HTTPValidationError,
>(
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
					TError,
					Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadTaskRunStatesTaskRunStatesGet<
	TData = Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
	TError = HTTPValidationError,
>(
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
					TError,
					Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadTaskRunStatesTaskRunStatesGet<
	TData = Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
	TError = HTTPValidationError,
>(
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Task Run States
 */

export function useReadTaskRunStatesTaskRunStatesGet<
	TData = Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
	TError = HTTPValidationError,
>(
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadTaskRunStatesTaskRunStatesGetQueryOptions(
		params,
		options,
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getReadTaskRunStatesTaskRunStatesGetSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
	TError = HTTPValidationError,
>(
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getReadTaskRunStatesTaskRunStatesGetQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>
	> = ({ signal }) =>
		readTaskRunStatesTaskRunStatesGet(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadTaskRunStatesTaskRunStatesGetSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>
>;
export type ReadTaskRunStatesTaskRunStatesGetSuspenseQueryError =
	HTTPValidationError;

export function useReadTaskRunStatesTaskRunStatesGetSuspense<
	TData = Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
	TError = HTTPValidationError,
>(
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadTaskRunStatesTaskRunStatesGetSuspense<
	TData = Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
	TError = HTTPValidationError,
>(
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadTaskRunStatesTaskRunStatesGetSuspense<
	TData = Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
	TError = HTTPValidationError,
>(
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Task Run States
 */

export function useReadTaskRunStatesTaskRunStatesGetSuspense<
	TData = Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
	TError = HTTPValidationError,
>(
	params: ReadTaskRunStatesTaskRunStatesGetParams,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof readTaskRunStatesTaskRunStatesGet>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getReadTaskRunStatesTaskRunStatesGetSuspenseQueryOptions(
		params,
		options,
	);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
